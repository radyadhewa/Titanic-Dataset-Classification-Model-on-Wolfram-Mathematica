(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   1275244,      22523]
NotebookOptionsPosition[   1269797,      22422]
NotebookOutlinePosition[   1270198,      22438]
CellTagsIndexPosition[   1270155,      22435]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Big Data Analytics Class Assignment - Week 9", "Title",
 CellChangeTimes->{{3.9376203105991383`*^9, 3.937620326196331*^9}, {
  3.9376204265951786`*^9, 
  3.937620427361309*^9}},ExpressionUUID->"dddee75b-4084-3e42-afab-\
ee11872a3cd2"],

Cell["by: Dhewa Radya | 6701011256", "Subtitle",
 CellChangeTimes->{{3.937620332458063*^9, 
  3.937620438721136*^9}},ExpressionUUID->"54b35a77-87df-5f42-acdc-\
f1a11bb4587b"],

Cell[CellGroupData[{

Cell["Task 1. Make an Classification ML Model on Titanic Dataset", "Section",
 CellChangeTimes->{{3.937620397821106*^9, 3.937620402090906*^9}, 
   3.937626420359455*^9},ExpressionUUID->"c1e2e9bf-f64f-1d43-a8f2-\
3e71e8f1af0e"],

Cell[CellGroupData[{

Cell["Import the dataset", "Subsubsection",
 CellChangeTimes->{{3.9376204442920437`*^9, 
  3.937620464135639*^9}},ExpressionUUID->"c11bc12f-c702-2141-b036-\
08efb7bf60c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], ",", 
   "\"\<Properties\>\""}], "]"}]], "Code",
 CellChangeTimes->{{3.9376204657792816`*^9, 3.937620465794855*^9}, {
  3.937620504373747*^9, 3.937620531819933*^9}, {3.937620746343113*^9, 
  3.93762078393458*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"4acb8a1f-9b41-e141-b216-be6dd2eb3fd3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Data\"\>", ",", "\<\"Description\"\>", ",", "\<\"Data\"\>", 
   ",", "\<\"Dimensions\"\>", ",", "\<\"LearningTask\"\>", 
   ",", "\<\"LongDescription\"\>", ",", "\<\"MissingData\"\>", 
   ",", "\<\"Name\"\>", ",", "\<\"Source\"\>", ",", "\<\"TestData\"\>", 
   ",", "\<\"TrainingData\"\>", ",", "\<\"VariableDescriptions\"\>", 
   ",", "\<\"VariableTypes\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.9376207736691265`*^9, 3.937620785311098*^9}},
 CellLabel->"Out[3]=",ExpressionUUID->"07008436-916e-4545-b93e-d4c048c5c9b0"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"df", " ", "=", " ", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
     ",", "\"\<Data\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dftrain", " ", "=", " ", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
     ",", "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dftest", " ", "=", " ", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
     ",", "\"\<TestData\>\""}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.937620788833143*^9, 3.937620850736517*^9}, {
  3.9376210205241737`*^9, 3.937621047312002*^9}, {3.9376210792840786`*^9, 
  3.937621102698303*^9}, {3.937622638981882*^9, 3.937622650558571*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"e5d063f1-02d7-1a4a-a9c9-a2995892eb37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"df", ",", " ", "5"}], "]"}]], "Code",
 CellChangeTimes->{{3.937621104809969*^9, 3.937621121232441*^9}, {
  3.9376226066581287`*^9, 3.9376226073626194`*^9}, {3.937622653765354*^9, 
  3.937622685437893*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"5c4ffc9e-c48f-f840-b725-bb66ca3d7b38"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"1st\"\>", ",", "29.`", ",", "\<\"female\"\>"}], "}"}], 
    "\[Rule]", "\<\"survived\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"1st\"\>", ",", "0.9167`", ",", "\<\"male\"\>"}], "}"}], 
    "\[Rule]", "\<\"survived\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"1st\"\>", ",", "2.`", ",", "\<\"female\"\>"}], "}"}], 
    "\[Rule]", "\<\"died\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"1st\"\>", ",", "30.`", ",", "\<\"male\"\>"}], "}"}], 
    "\[Rule]", "\<\"died\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"1st\"\>", ",", "25.`", ",", "\<\"female\"\>"}], "}"}], 
    "\[Rule]", "\<\"died\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.937621110944998*^9, 3.9376211221099854`*^9}, 
   3.9376226157456913`*^9, {3.937622654734844*^9, 3.9376226858042126`*^9}},
 CellLabel->"Out[62]=",ExpressionUUID->"24ba56db-4d0e-a440-b93a-6cf689e8b699"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], ",", 
   "\"\<LongDescription\>\""}], "]"}]], "Code",
 CellChangeTimes->{{3.9376218057729225`*^9, 3.937621845866598*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"17cb48c1-39ae-aa4a-b6bc-2c574cd3beca"],

Cell[BoxData["\<\"\\tThis data set contains the survival status of 1309 \
passengers aboard the maiden voyage of the RMS Titanic in 1912 \\n\\t(the \
ships crew are not included), along with the passengers age, sex and class \
(which serves as a proxy for economic status). \\n\\n\\t70% of the data was \
selected (using stratified sampling) for the training set. \"\>"], "Output",
 CellChangeTimes->{{3.937621823526535*^9, 3.937621846321699*^9}},
 CellLabel->"Out[32]=",ExpressionUUID->"605752e2-9aee-3648-91ea-bb26805a6d82"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exploratory Data Analysis", "Subsubsection",
 CellChangeTimes->{{3.9376218725460663`*^9, 3.9376218812939453`*^9}, {
  3.9376219308169193`*^9, 
  3.9376219374773006`*^9}},ExpressionUUID->"202a5b80-a77b-8043-9c55-\
e4c1c3c4dc34"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], ",", 
   "\"\<MissingData\>\""}], "]"}]], "Code",
 CellChangeTimes->{{3.937621856695675*^9, 3.9376218640794506`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"5d724260-d035-444d-992c-c7b8268e811a"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9376218645744553`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"c2e80a72-d9ed-194b-af27-b8d1d32a7f55"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], ",", 
   "\"\<VariableDescriptions\>\""}], "]"}]], "Code",
 CellChangeTimes->{{3.9376218853497696`*^9, 3.937621891771717*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"9c26f092-0ce6-a444-a747-210ab678593b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"\<\"passenger class\"\>", ",", "\<\"passenger age\"\>", 
    ",", "\<\"passenger sex\"\>"}], "}"}], 
  "\[Rule]", "\<\"passenger survival\"\>"}]], "Output",
 CellChangeTimes->{3.9376218930044537`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"d93a3bb6-2c7e-954e-a057-f0405d04ded7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], ",", 
   "\"\<VariableTypes\>\""}], "]"}]], "Code",
 CellChangeTimes->{{3.9376219012853317`*^9, 3.937621903812855*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"9d3e0263-f73a-544b-8151-c0ff845d34ef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"\<\"Nominal\"\>", ",", "\<\"Numerical\"\>", 
    ",", "\<\"Nominal\"\>"}], "}"}], "\[Rule]", "\<\"Nominal\"\>"}]], "Output",
 CellChangeTimes->{3.937621905415348*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"adabb0d7-86a5-e14f-8237-4555c6cba2af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Count", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", "df", "]"}], ",", " ", "_Missing"}], "]"}]], "Code",
 CellChangeTimes->{{3.9376219597586823`*^9, 3.93762197769232*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"049e7403-aedd-bd4e-ae37-9947ae1e7ebe"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.937621979412245*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"f6d934d4-93de-1040-9554-40e58c80f3be"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Machine Learning Model", "Subsection",
 CellChangeTimes->{{3.937622587387209*^9, 
  3.937622593396879*^9}},ExpressionUUID->"3082675e-5f1e-2845-80fc-\
1fa37d86c8e5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"dt", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"dftrain", ",", " ", 
    RowBox[{"Method", "->", "\"\<DecisionTree\>\""}]}], "]"}]}], "\n", 
 RowBox[{"lr", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"dftrain", ",", " ", 
    RowBox[{"Method", "->", "\"\<LogisticRegression\>\""}]}], "]"}]}], "\n", 
 RowBox[{"rf", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"dftrain", ",", " ", 
    RowBox[{"Method", "->", "\"\<RandomForest\>\""}]}], "]"}]}], "\n", 
 RowBox[{"gb", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"dftrain", ",", " ", 
    RowBox[{"Method", "->", "\"\<GradientBoostedTrees\>\""}]}], 
   "]"}]}]}], "Code",
 CellChangeTimes->{{3.937622701250225*^9, 3.9376227713068504`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"f90d6c20-0f83-d443-9965-cbf9e32c8325"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["916", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 916, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal"|>, "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 3|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
           "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 916, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{0.9924763087166281, 
                   0.06962246892396884, -0.10071488696884714`}, \
{-0.12176028349302224`, 0.6475982344553933, -0.7521907737362618}, {
                   0.012853404215050985`, 0.7587945957577639, 
                   0.6512031568173609}}, 
                  "Precisions" -> {1.1096705122951698`, 11.071379162604247`, 
                   14.504654820468707`}, "NoisePrecision" -> None, 
                  "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001752264873371586, 0.09643725350844203, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                   "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                   "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   8708448484904811398|>], "InputDimension" -> 0, 
                "OutputDimension" -> 3, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.1851587, "MaxTrainingMemory" -> 2049992,
                   "DataMemory" -> 106416, "FunctionMemory" -> 64512, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 10, 11, 15, 6, 12.0230906`8.832591076175953}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146168`, -1.997829760914916, -1.976574768503185, \
-1.9695170466598357`, -1.9059724997243812`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714302`, -1.7810711623410056`}, 
                   "LeftBoundary" -> -2.0628669170146168`, "LeftScale" -> 
                   0.12459852713774523`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[5.892604950680779, 0.13867820062256261`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 616651398117295976|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {29.018970775438927`}, 
             "StandardDeviation" -> {12.892103992603547`}, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
               "female" -> 1, "male" -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {14.1, 0}, "ID" -> 3653976628138478392, 
             "Output" -> <|
              "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
             0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "died" -> 0.6176470588235294, "survived" -> 0.3823529411764706|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "Tree" -> MachineLearning`DecisionTree[<|
        "FeatureIndices" -> 
         RawArray["Integer16",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
           2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
           3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 
           5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}], 
         "NumericalThresholds" -> CompressedData["
1:eJwdyH0s1HEcwPFTZ/7oNBPH2CFGdyKHlofUT+LatbFmNku4o+7caHkaJRVD
HppW1rCbxpGshKPDHNq3kEaOhbujhTh33FB3caRwfb798d5rex9PTI3kmZBI
pATIJs6qiD1Kev80tjVtous3+jHKevV3T4+GU8luQmsdUvHHKPThDaSW9nNf
V60hp6WLkkdNq8hswdeMJlWhlBBvJ23ZDNKTiyvtjipQCr+G3c4dRJboFLPQ
cYjgM5KvVnvKiOi1S3RjpIyIldxjWFQsEu8mOcuLAxpia1tJBHnpiEqyjXvC
5iYx3i9+aZ9EDt5n6RhBzVo0cahqLBA86TpRgBW19HpjC8Oz6Nh+ce+EP5i8
f4KNveHpMPOlaIioZSXpJ0FxqCl9CtyI9QrAGuMZgmkw23u+TQ5GuIxsY++0
XP6mAGXGAd9ZkErN2fsKMu8ehM+DBVTbVmyG+y5nAfThyA9/B8+72Q4ONy4R
mSraxn//CMNGwLfILHQUfMxwK2tkDqKztrkW2LxbiaoXYKOwuAmbL/CaagCH
Uos+1oNJTKtwETjGXL/yHBTKG+JqwNvpJseEoOUin1uJf++cNZaijolRj3Sg
cpK75zT4zCiRToL3g+2ov7pUxIc+iQO23Fnrh3ViigOxWfHm41sgz7nviAH8
5OJDU+rWkaGnxB4rF8z6KcASmmu3HDyo7hRhza9HFCznKAhKXnonNneTt4AN
qml3UoPXunemsSrNrrsGXPkcRVoFS3nl7HWww+dm2x6lGT0cFRQbQIbSv0oL
8nmKDI/kdkKT7aE9De5JVuwugKvTc6W1D5YJBfeJDCszZUTVgS1nWHXYzHzD
CrZndrhaBFoYc/rqQWWa47kG0FTLCWje1xM/o2lh2JnOOil2v6Ku6w1YFtK0
g/0Hbsaw7Q==
          "], "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVkfdTDgAAhh8hZWTvkUj2yMgIlawi4wsZHT534SfuPu6cfyZ7ZWaTkJmZ
vcnK3ruMx9cP7/vce8+Pb9yCpYGFEcCyqHAFgivSQqHgyuzo8MhYsjxvUV4o
MWlxtQ+GU83vzmUcY1nrGmuy0d+24brXPORBT3nSC7bmjKeN56IbXG8aL23A
NFJ5YJmXHUUTrtiMEfz1vLkk04JSW1LkYYdyz+MOYwy//GA7KpxKb974xwCX
jKIu8+jPLOKYyGtfecIS99iVAw6gwC1mUuVzn9mdXmTxyIY89YmPbU9n/tmN
PsSw2U0mUosdbverX1xnEqudwy532pemNKI5+93nOUeTzU1rkMJw7vrNHtwy
kpGUG81Vc2hFsUecwWdrMwntwF5nM54uTKEtgyh0AoO54237MZOOxPLJj87n
oQOpdDqdeGFPzprBW9O5b2N++sP67HabW11lvsc8agRDeO8765DA5PALN6zH
fyEmzI4=
          "], "LeafValues" -> 
         RawArray["UnsignedInteger8",{{1, 10}, {1, 8}, {2, 1}, {1, 3}, {1, 
           3}, {9, 1}, {12, 1}, {1, 3}, {1, 4}, {6, 1}, {2, 2}, {3, 1}, {1, 
           3}, {3, 1}, {1, 3}, {4, 4}, {1, 8}, {7, 1}, {2, 2}, {1, 90}, {12, 
           1}, {17, 1}, {3, 1}, {1, 5}, {1, 3}, {66, 1}, {1, 6}, {1, 5}, {3, 
           1}, {2, 2}, {1, 4}, {4, 1}, {1, 2}, {1, 2}, {8, 1}, {2, 2}, {1, 
           5}, {17, 1}, {38, 1}, {14, 1}, {2, 2}, {1, 29}, {1, 3}, {1, 10}, {
           1, 3}, {2, 1}, {1, 2}, {1, 6}, {1, 4}, {2, 1}, {5, 1}, {6, 1}, {2, 
           2}, {1, 3}, {10, 1}, {1, 3}, {2, 2}, {1, 6}, {2, 1}, {2, 2}, {1, 
           8}, {1, 6}, {2, 1}, {14, 1}, {9, 1}, {1, 2}, {3, 1}, {1, 2}, {4, 
           1}, {1, 2}, {4, 1}, {2, 4}, {20, 1}, {3, 1}, {1, 2}, {20, 1}, {60, 
           1}, {1, 5}, {1, 3}, {39, 1}, {4, 2}, {3, 1}, {1, 2}, {1, 4}, {2, 
           1}, {2, 2}, {9, 1}, {4, 1}, {2, 4}, {27, 1}, {4, 1}, {1, 3}, {9, 
           1}, {3, 1}, {1, 2}, {1, 3}, {10, 1}, {1, 2}}], "RootIndex" -> 93, 
         "NominalDimension" -> 0|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f3)" -> <|
            "Type" -> "NominalVector", "Weight" -> 2, "SetSize" -> {3, 2}|>, 
           "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f2(f1f3))" -> <|
            "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
             "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3)" -> <|
                "Type" -> "NominalVector", "Weight" -> 2, 
                 "SetSize" -> {3, 2}|>|>, 
             "Index" -> {<|1 -> 1, 2 -> 2, 3 -> 3|>, <|1 -> 1, 2 -> 2|>}, 
             "Output" -> <|
              "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.8020297288894653, -0.06948617100715637, \
-0.9043995141983032}, {0.5826151371002197, 0.6159605979919434, 
                0.28722482919692993`}, {
                0.16030417382717133`, -0.14992104470729828`, 
                0.3511906564235687}}], 
               RawArray["Real32",{{0., 0.}, {-0.05088059604167938, 
                1.1244308948516846`}, {0.06412075459957123, 
                0.6404573917388916}}]}, "Version" -> {14.1, 0}, "ID" -> 
             5204932255505181998|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "Spans" -> {
               Span[1, 1], 
               Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
             1497333623259361766|>], 
           MachineLearning`MLProcessor[
           "Values", <|
            "Info" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
         "Missing" -> "Imputed"|>], "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 0.3742958061838055|>], "Method" -> 
      "DecisionTree", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "DistributionSmoothing" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "FeatureFraction" -> <|"Value" -> 1, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Configurations" -> 
      Dataset[<|<|
          "Value" -> "DecisionTree", 
           "Options" -> <|
            "DistributionSmoothing" -> <|"Value" -> 1|>, 
             "FeatureFraction" -> <|"Value" -> 1|>|>, "NaiveImputer" -> 
           Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {
              TypeSystem`Atom[Integer]}], 2], TypeSystem`UnknownType, 
           TypeSystem`UnknownType}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
      Dataset[<|"Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "ModelUtility" -> Missing[]|>, 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}],
           TypeSystem`UnknownType}], <||>], "InputDimension" -> 3, 
      "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
    "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, "ID" -> 
           7168142382301173801|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, "ID" -> 
           1978735388468315165|>, 
         "f3" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
           9071588231046195481|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.3903428, 
      "MaxTrainingMemory" -> 2181752, "DataMemory" -> 227152, 
      "FunctionMemory" -> 158840, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 10, 11, 15, 6, 12.2178033`8.839568085376493}, 
        "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9376227407096615`*^9, 3.9376227722605762`*^9}},
 CellLabel->"Out[66]=",ExpressionUUID->"86a0a593-0170-2143-95f6-12aa56fe9dc5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["916", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 916, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal"|>, "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 3|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f2(f1f3))" -> <|
            "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
             "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 916, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{0.9924763087166281, 
                   0.06962246892396884, -0.10071488696884714`}, \
{-0.12176028349302224`, 0.6475982344553933, -0.7521907737362618}, {
                   0.012853404215050985`, 0.7587945957577639, 
                   0.6512031568173609}}, 
                  "Precisions" -> {1.1096705122951698`, 11.071379162604247`, 
                   14.504654820468707`}, "NoisePrecision" -> None, 
                  "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001752264873371586, 0.09643725350844203, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                   "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                   "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   8708448484904811398|>], "InputDimension" -> 0, 
                "OutputDimension" -> 3, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.2126862, "MaxTrainingMemory" -> 2050056,
                   "DataMemory" -> 106416, "FunctionMemory" -> 64512, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 10, 11, 15, 6, 12.4644016`8.848246389846508}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146168`, -1.997829760914916, -1.976574768503185, \
-1.9695170466598357`, -1.9059724997243812`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714302`, -1.7810711623410056`}, 
                   "LeftBoundary" -> -2.0628669170146168`, "LeftScale" -> 
                   0.12459852713774523`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[5.892604950680779, 0.13867820062256261`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 616651398117295976|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {29.018970775438927`}, 
             "StandardDeviation" -> {12.892103992603547`}, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
               "female" -> 1, "male" -> 2|>}, 
             "Output" -> <|
              "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 0.}, {
                0.21963098645210266`, -0.1438339650630951, 
                0.544792890548706}, {-0.2416929453611374, 0.3798814117908478, 
                0.6873865127563477}, {-0.9437126517295837, 
                0.4273325502872467, -1.2217921018600464`}}], 
               RawArray["Real32",{{0., 0.}, {-0.12253803759813309`, 
                0.6071814894676208}, {-0.6194148659706116, \
-0.98703533411026}}]}, "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "Spans" -> {
               Span[1, 1], 
               Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
             7619735631186802745|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
             0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "died" -> 0.6176470588235294, "survived" -> 0.3823529411764706|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "LogProbabilitiesFunction" -> 
      LinearLayer[<|
        "Type" -> "Linear", 
         "Arrays" -> <|
          "Weights" -> 
           RawArray["Real32",{{0.3871692717075348, -0.786674439907074, 
             0.794525682926178, -0.26716524362564087`, -0.1982635259628296, \
-1.372771143913269}}], "Biases" -> RawArray["Real32",{-0.7363905310630798}]|>,
          "Parameters" -> <|
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 6, 
           "$InputDimensions" -> {6}|>, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "14.1.2", "Unstable" -> False|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|
          "Weight" -> {0.3333333333333333, 0.9444444444444444, 
            0.34444444444444444`, 0.34444444444444444`, 0.34444444444444444`, 
            0.34444444444444444`, 0.34444444444444444`}, "Type" -> 
           "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Calibrator" -> None, "Method" -> "LogisticRegression", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> 10., "Options" -> <||>|>, 
        "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
        MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.9355994`7.422634928120078, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.5069915913412173, 0.023164486835799566`], "Accuracy" -> 
         Around[0.7923608891741653, 0.020574191906295176`], "EvaluationTime" -> 
         5.573156776402112*^-6, "TestSize" -> 766, "ModelMemory" -> 9232, 
         "ModelUtility" -> -0.022995469098241017`, "Round" -> 3, "Iteration" -> 
         11, "Time" -> {
          1.6283053`7.663280829967164, 1.6695687`7.674149287756113}, 
         "TrainingSize" -> 150, "TrainingTime" -> 0.03162277660168379, 
         "TrainingMemory" -> 104648, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.5069915913412173, 0.016379765724300385`]}, 
         "AccuracyHistory" -> {
           Around[0.7923608891741653, 0.0145481506143747]}, 
         "IterationHistory" -> {11}, 
         "TimeHistory" -> {{
           1.6283053`7.663280829967164, 1.6695687`7.674149287756113}}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           10., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 916|>, 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
      "Configurations" -> 
      Dataset[<|<|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 100000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.6928323624498461, 0.0034666143328233416`], "Accuracy" -> 
              Around[0.6932541238289601, 0.04599631536810039], 
              "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 200,
               "ModelMemory" -> 9232, "ModelUtility" -> -0.3271928294755607, 
              "Round" -> 1, "Iteration" -> 1, 
              "Time" -> {
               1.1659474`7.518223951804881, 1.2348001`7.5431416494772705}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 300688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6928323624498461, 0.0024512665024978638`]}, 
              "AccuracyHistory" -> {
                Around[0.6932541238289601, 0.032524306506378796`]}, 
              "IterationHistory" -> {1}, 
              "TimeHistory" -> {{
                1.1659474`7.518223951804881, 
                 1.2348001`7.5431416494772705}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6927591298420762, 0.002451281872346834], "Accuracy" -> 
              Around[0.7424683440333636, 0.03069574485101578], 
              "EvaluationTime" -> 5.660722890537325*^-6, "TestSize" -> 400, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.3267943328466181, 
              "Round" -> 2, "Iteration" -> 5, 
              "Time" -> {
               1.4158478`7.602561563818094, 1.4353891`7.608514637476825}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 78040, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6927591298420762, 0.0017333180345361031`]}, 
              "AccuracyHistory" -> {
                Around[0.7424683440333636, 0.021705169337725306`]}, 
              "IterationHistory" -> {5}, 
              "TimeHistory" -> {{
                1.4158478`7.602561563818094, 
                 1.4353891`7.608514637476825}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6912888964654801, 0.001938893893437251], "Accuracy" -> 
              Around[0.7624286960085747, 0.053373296516817846`], 
              "EvaluationTime" -> 6.659333253239047*^-6, "TestSize" -> 183., 
              "ModelMemory" -> 9232., "ModelUtility" -> -0.32452314884527267`,
               "Round" -> 4, "Iteration" -> 40, 
              "Time" -> {
               6.5347412`8.26677338608009, 6.5587336`8.26836498475788}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.01721682899963702, 
              "TrainingMemory" -> 286418.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6916690719894623, 0.0026923645096793274`], 
                Around[0.6909087209414979, 0.0026852150713985766`]}, 
              "AccuracyHistory" -> {
                Around[0.7137152389874902, 0.03332143128175911], 
                Around[0.8111421530296591, 0.02884964032073664]}, 
              "IterationHistory" -> {33, 40}, 
              "TimeHistory" -> {{
                5.5174606`8.193284234058494, 5.5378615`8.194887083486622}, {
                6.5347412`8.26677338608009, 6.5587336`8.26836498475788}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 6.659333253239047*^-6, "MeanCrossEntropy" -> 
             Around[0.6912888964654801, 0.001938893893437251], "ModelMemory" -> 
             9232., "TrainingMemory" -> 286418.6666666666, "TrainingTime" -> 
             0.04146778735660217|>, "Index" -> 1|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.0001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[2.122733343458516, 0.18652333116759956`], "Accuracy" -> 
              Around[0.7770815796770789, 0.01950988670082878], 
              "EvaluationTime" -> 4.035291342194522*^-6, "TestSize" -> 906, 
              "ModelMemory" -> 9232, "ModelUtility" -> -1.4632856296997336`, 
              "Round" -> 1, "Iteration" -> 4, 
              "Time" -> {
               1.3683973`7.587757202098547, 1.4136089`7.601874264296265}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 81944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.122733343458516, 0.13189191231811376`]}, 
              "AccuracyHistory" -> {
                Around[0.7770815796770789, 0.01379557318633727]}, 
              "IterationHistory" -> {4}, 
              "TimeHistory" -> {{
                1.3683973`7.587757202098547, 
                 1.4136089`7.601874264296265}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5147360496046184, 0.02861441497460611], "Accuracy" -> 
              Around[0.7418739346183433, 0.020854046248822356`], 
              "EvaluationTime" -> 3.6013547059371745`*^-6, "TestSize" -> 876, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.040115516700205966`,
               "Round" -> 2, "Iteration" -> 7, 
              "Time" -> {
               1.4852043`7.6233311914319755, 1.5329798`7.637081425710861}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 86432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5147360496046184, 0.02023344686822987]}, 
              "AccuracyHistory" -> {
                Around[0.7418739346183433, 0.01474603751772017]}, 
              "IterationHistory" -> {7}, 
              "TimeHistory" -> {{
                1.4852043`7.6233311914319755, 
                 1.5329798`7.637081425710861}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5721988472021796, 0.07236132014575267], "Accuracy" -> 
              Around[0.724510241651282, 0.04657582972427154], 
              "EvaluationTime" -> 6.1865823940298635`*^-6, "TestSize" -> 183, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.1598689095458794, 
              "Round" -> 4, "Iteration" -> 34, 
              "Time" -> {
               5.7587352`8.211872102617512, 5.8170589`8.216248454718354}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 286248, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5721988472021796, 0.05116718017067244]}, 
              "AccuracyHistory" -> {
                Around[0.724510241651282, 0.032934085037422366`]}, 
              "IterationHistory" -> {34}, 
              "TimeHistory" -> {{
                5.7587352`8.211872102617512, 5.8170589`8.216248454718354}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 6.1865823940298635`*^-6, "MeanCrossEntropy" -> 
             Around[0.5721988472021796, 0.07236132014575267], "ModelMemory" -> 
             9232, "TrainingMemory" -> 286248, "TrainingTime" -> 
             0.09425408710681085|>, "Index" -> 2|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 10.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5495986953055956, 0.019806497105161178`], "Accuracy" -> 
              Around[0.7838112744892074, 0.019560430033959346`], 
              "EvaluationTime" -> 3.6013547059371745`*^-6, "TestSize" -> 876, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.10177466949420766`, 
              "Round" -> 2, "Iteration" -> 8, 
              "Time" -> {
               1.5341887`7.637423773140655, 1.5697386`7.647372331236823}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 85440, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5495986953055956, 0.01400530841461119]}, 
              "AccuracyHistory" -> {
                Around[0.7838112744892074, 0.013831312719937663`]}, 
              "IterationHistory" -> {8}, 
              "TimeHistory" -> {{
                1.5341887`7.637423773140655, 
                 1.5697386`7.647372331236823}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5069915913412173, 0.023164486835799566`], "Accuracy" -> 
              Around[0.7923608891741653, 0.020574191906295176`], 
              "EvaluationTime" -> 5.573156776402112*^-6, "TestSize" -> 766, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.022995469098241017`,
               "Round" -> 3, "Iteration" -> 11, 
              "Time" -> {
               1.6283053`7.663280829967164, 1.6695687`7.674149287756113}, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 104648, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5069915913412173, 0.016379765724300385`]}, 
              "AccuracyHistory" -> {
                Around[0.7923608891741653, 0.0145481506143747]}, 
              "IterationHistory" -> {11}, 
              "TimeHistory" -> {{
                1.6283053`7.663280829967164, 
                 1.6695687`7.674149287756113}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.606910396043657, 0.040920458324858834`], "Accuracy" -> 
              Around[0.7028769886637768, 0.08463631381394823], 
              "EvaluationTime" -> 6.084499257651103*^-6, "TestSize" -> 906., 
              "ModelMemory" -> 9232., "ModelUtility" -> -0.20718042870185172`,
               "Round" -> 1, "Iteration" -> 19, 
              "Time" -> {
               4.3087669`8.085897993320701, 4.3426195`8.089296771674753}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.019952623149688785`, 
              "TrainingMemory" -> 78138.66666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5663943875360774, 0.010580582375903222`], 
                Around[0.6474264045512366, 0.006831333538885554]}, 
              "AccuracyHistory" -> {
                Around[0.7868835915551807, 0.01350241031934863], 
                Around[0.6188703857723729, 0.015948506026198912`]}, 
              "IterationHistory" -> {12, 19}, 
              "TimeHistory" -> {{
                4.079651`8.062168005787544, 4.1156506`8.065983491526865}, {
                4.3087669`8.085897993320701, 
                 4.3426195`8.089296771674753}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5773743258963544, 0.06781935786946702], "Accuracy" -> 
              Around[0.724510241651282, 0.04657582972427154], 
              "EvaluationTime" -> 6.8957086828436396`*^-6, "TestSize" -> 183, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.16711597408672219`, 
              "Round" -> 4, "Iteration" -> 31, 
              "Time" -> {
               5.3981184`8.18378739944873, 5.4806466`8.190376792536226}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 286312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5773743258963544, 0.04795552784521737]}, 
              "AccuracyHistory" -> {
                Around[0.724510241651282, 0.032934085037422366`]}, 
              "IterationHistory" -> {31}, 
              "TimeHistory" -> {{
                5.3981184`8.18378739944873, 5.4806466`8.190376792536226}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 6.8957086828436396`*^-6, "MeanCrossEntropy" -> 
             Around[0.5773743258963544, 0.06781935786946702], "ModelMemory" -> 
             9232, "TrainingMemory" -> 286312, "TrainingTime" -> 
             0.1243828019695899|>, "Index" -> 3|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 10000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.6916582109208202, 0.0017373860639825227`], "Accuracy" -> 
              Around[0.7736831583579653, 0.020768185218697534`], 
              "EvaluationTime" -> 5.498510251971174*^-6, "TestSize" -> 800, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.3249987089900759, 
              "Round" -> 2, "Iteration" -> 10, 
              "Time" -> {
               1.6011119`7.65596667885329, 1.6252687`7.66247016513725}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 78632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6916582109208202, 0.0012285174673810466`]}, 
              "AccuracyHistory" -> {
                Around[0.7736831583579653, 0.014685324601079247`]}, 
              "IterationHistory" -> {10}, 
              "TimeHistory" -> {{
                1.6011119`7.65596667885329, 1.6252687`7.66247016513725}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6925850545861177, 0.0011942989406118912`], "Accuracy" -> 
              Around[0.7713772628621309, 0.019625430028988654`], 
              "EvaluationTime" -> 4.101837509049173*^-6, "TestSize" -> 906, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.32618040725429565`, 
              "Round" -> 1, "Iteration" -> 14, 
              "Time" -> {
               4.1460955`8.06918429478622, 4.1680814`8.071481185367483}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 73680, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6925850545861177, 0.000844496879670578]}, 
              "AccuracyHistory" -> {
                Around[0.7713772628621309, 0.013877274657199979`]}, 
              "IterationHistory" -> {14}, 
              "TimeHistory" -> {{
                4.1460955`8.06918429478622, 4.1680814`8.071481185367483}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6789720860576749, 0.004417229935539473], "Accuracy" -> 
              Around[0.7624286960085747, 0.053373296516817846`], 
              "EvaluationTime" -> 7.788445788002592*^-6, "TestSize" -> 183., 
              "ModelMemory" -> 9232., "ModelUtility" -> -0.3072848585733816, 
              "Round" -> 4, "Iteration" -> 41, 
              "Time" -> {
               6.5627301`8.268629537248408, 6.5903737`8.270455034986247}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.023396783926626794`, 
              "TrainingMemory" -> 288850.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6826060727314138, 0.003772202896718405], 
                Around[0.675338099383936, 0.0033652464569055673`]}, 
              "AccuracyHistory" -> {
                Around[0.7137152389874902, 0.03332143128175911], 
                Around[0.8111421530296591, 0.02884964032073664]}, 
              "IterationHistory" -> {32, 41}, 
              "TimeHistory" -> {{
                5.4838665`8.190631867217562, 5.5144588`8.193047889835759}, {
                6.5627301`8.268629537248408, 6.5903737`8.270455034986247}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 7.788445788002592*^-6, "MeanCrossEntropy" -> 
             Around[0.6789720860576749, 0.004417229935539473], "ModelMemory" -> 
             9232., "TrainingMemory" -> 288850.6666666666, "TrainingTime" -> 
             0.041827254222703114`|>, "Index" -> 4|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.00001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[2.6034835033304735`, 0.22850320138672567`], "Accuracy" -> 
              Around[0.7770815796770789, 0.01950988670082878], 
              "EvaluationTime" -> 4.395933484013701*^-6, "TestSize" -> 906, 
              "ModelMemory" -> 9232, "ModelUtility" -> -1.66741153369914, 
              "Round" -> 1, "Iteration" -> 15, 
              "Time" -> {
               4.1710806`8.071793575525223, 4.2159656`8.076442052106742}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 82128, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6034835033304735`, 0.16157616322338902`]}, 
              "AccuracyHistory" -> {
                Around[0.7770815796770789, 0.01379557318633727]}, 
              "IterationHistory" -> {15}, 
              "TimeHistory" -> {{
                4.1710806`8.071793575525223, 
                 4.2159656`8.076442052106742}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5147422408041915, 0.028615233451249517`], "Accuracy" -> 
              Around[0.7418739346183433, 0.020854046248822356`], 
              "EvaluationTime" -> 3.7878511559875038`*^-6, "TestSize" -> 876, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.04012772698764777, 
              "Round" -> 2, "Iteration" -> 22, 
              "Time" -> {
               4.4184326`8.096813228027155, 4.4604319`8.100921906626327}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 86488, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5147422408041915, 0.020234025618614666`]}, 
              "AccuracyHistory" -> {
                Around[0.7418739346183433, 0.01474603751772017]}, 
              "IterationHistory" -> {22}, 
              "TimeHistory" -> {{
                4.4184326`8.096813228027155, 
                 4.4604319`8.100921906626327}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5370673106584146, 0.04795395811349101], "Accuracy" -> 
              Around[0.7515232123085116, 0.0351058922111984], 
              "EvaluationTime" -> 7.254491323345016*^-6, "TestSize" -> 183., 
              "ModelMemory" -> 9232., "ModelUtility" -> -0.08922810078437593, 
              "Round" -> 4, "Iteration" -> 39, 
              "Time" -> {
               6.2178268`8.245183613928797, 6.3139653`8.251847184283099}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.06674581557515148, 
              "TrainingMemory" -> 287610.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5722013842366427, 0.051167935639610675`], 
                Around[0.5019332370801866, 0.042376632622516286`]}, 
              "AccuracyHistory" -> {
                Around[0.724510241651282, 0.032934085037422366`], 
                Around[0.7785361829657413, 0.030610774443744465`]}, 
              "IterationHistory" -> {29, 39}, 
              "TimeHistory" -> {{
                5.1816545`8.16601344542138, 5.2464374`8.171409488764334}, {
                6.2178268`8.245183613928797, 6.3139653`8.251847184283099}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 7.254491323345016*^-6, "MeanCrossEntropy" -> 
             Around[0.5370673106584146, 0.04795395811349101], "ModelMemory" -> 
             9232., "TrainingMemory" -> 287610.6666666666, "TrainingTime" -> 
             0.11503228146776669`|>, "Index" -> 5|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.*^6|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.6929885176248032, 0.0005969180758191512], "Accuracy" -> 
              Around[0.6991131693169781, 0.0730170394955145], 
              "EvaluationTime" -> 3.7833971134659626`*^-6, "TestSize" -> 906.,
               "ModelMemory" -> 9232., "ModelUtility" -> -0.3265902205594433, 
              "Round" -> 1, "Iteration" -> 18, 
              "Time" -> {
               4.2852751`8.083523700870002, 4.3047317`8.085491081959137}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.009999999999999998, 
              "TrainingMemory" -> 72946.66666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.692987220420572, 0.0008441673826165286], 
                Around[0.6929898148290342, 0.0008441679075457631]}, 
              "AccuracyHistory" -> {
                Around[0.7713772628621309, 0.013877274657199979`], 
                Around[0.6268490757718252, 0.015913120951265573`]}, 
              "IterationHistory" -> {16, 18}, 
              "TimeHistory" -> {{
                4.2189658`8.076750998391603, 4.239416`8.078851028049584}, {
                4.2852751`8.083523700870002, 
                 4.3047317`8.085491081959137}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6928378778625851, 0.0016739284324991566`], "Accuracy" -> 
              Around[0.7714832145671765, 0.01991978818645332], 
              "EvaluationTime" -> 5.445462699031153*^-6, "TestSize" -> 876, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.3266836554136201, 
              "Round" -> 2, "Iteration" -> 20, 
              "Time" -> {
               4.3459592`8.089630638329526, 4.3687965`8.091906809094668}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              77640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6928378778625851, 0.0011836461458411215`]}, 
              "AccuracyHistory" -> {
                Around[0.7714832145671765, 0.01408541730644082]}, 
              "IterationHistory" -> {20}, 
              "TimeHistory" -> {{
                4.3459592`8.089630638329526, 
                 4.3687965`8.091906809094668}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.692674942459773, 0.0018934556164296467`], "Accuracy" -> 
              Around[0.7624286960085747, 0.053373296516817846`], 
              "EvaluationTime" -> 7.254491323345016*^-6, "TestSize" -> 183., 
              "ModelMemory" -> 9232., "ModelUtility" -> -0.32651192484884417`,
               "Round" -> 4, "Iteration" -> 37, 
              "Time" -> {
               5.9978526`8.229540782062992, 6.1054853`8.237265183437069}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.04389928794974075, 
              "TrainingMemory" -> 286624., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6927131786291589, 0.0026772643795382454`], 
                Around[0.6926367062903871, 0.0026771447733780797`]}, 
              "AccuracyHistory" -> {
                Around[0.7137152389874902, 0.03332143128175911], 
                Around[0.8111421530296591, 0.02884964032073664]}, 
              "IterationHistory" -> {26, 37}, 
              "TimeHistory" -> {{
                5.0585507`8.15557110062225, 5.0803954`8.157442507621548}, {
                5.9978526`8.229540782062992, 6.1054853`8.237265183437069}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 7.254491323345016*^-6, "MeanCrossEntropy" -> 
             Around[0.692674942459773, 0.0018934556164296467`], "ModelMemory" -> 
             9232., "TrainingMemory" -> 286624., "TrainingTime" -> 
             0.06485913746516034|>, "Index" -> 6|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6535553563621763`, 0.1455851206338388], "Accuracy" -> 
              Around[0.7770815796770789, 0.01950988670082878], 
              "EvaluationTime" -> 4.035291342194522*^-6, "TestSize" -> 906, 
              "ModelMemory" -> 9232, "ModelUtility" -> -1.2135430433385748`, 
              "Round" -> 1, "Iteration" -> 17, 
              "Time" -> {
               4.2414516`8.079059509046115, 4.2829434`8.083287328637324}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 82000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6535553563621763`, 0.10294422604004898`]}, 
              "AccuracyHistory" -> {
                Around[0.7770815796770789, 0.01379557318633727]}, 
              "IterationHistory" -> {17}, 
              "TimeHistory" -> {{
                4.2414516`8.079059509046115, 
                 4.2829434`8.083287328637324}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5107300218797126, 0.02952988101198171], "Accuracy" -> 
              Around[0.7457900135162899, 0.021673769763398586`], 
              "EvaluationTime" -> 5.660722890537325*^-6, "TestSize" -> 800, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.0327430946547721, 
              "Round" -> 2, "Iteration" -> 21, 
              "Time" -> {
               4.3718328`8.092208537572834, 4.4163882`8.096612234328529}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 86488, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5107300218797126, 0.020880779111204135`]}, 
              "AccuracyHistory" -> {
                Around[0.7457900135162899, 0.015325669573575092`]}, 
              "IterationHistory" -> {21}, 
              "TimeHistory" -> {{
                4.3718328`8.092208537572834, 
                 4.4163882`8.096612234328529}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5721954258114013, 0.0723591338904639], "Accuracy" -> 
              Around[0.724510241651282, 0.04657582972427154], 
              "EvaluationTime" -> 6.1865823940298635`*^-6, "TestSize" -> 183, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.15986233234367553`, 
              "Round" -> 4, "Iteration" -> 27, 
              "Time" -> {
               5.0823936`8.157613288938547, 5.1426892`8.162735271889854}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 286376, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5721954258114013, 0.051165634254732355`]}, 
              "AccuracyHistory" -> {
                Around[0.724510241651282, 0.032934085037422366`]}, 
              "IterationHistory" -> {27}, 
              "TimeHistory" -> {{
                5.0823936`8.157613288938547, 5.1426892`8.162735271889854}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 6.1865823940298635`*^-6, "MeanCrossEntropy" -> 
             Around[0.5721954258114013, 0.0723591338904639], "ModelMemory" -> 
             9232, "TrainingMemory" -> 286376, "TrainingTime" -> 
             0.09425408710681085|>, "Index" -> 7|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.1|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7854141893751735, 0.06814151217344809], "Accuracy" -> 
              Around[0.7802160202088798, 0.019315646729522386`], 
              "EvaluationTime" -> 6.277497724411115*^-6, "TestSize" -> 906, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.46881865992998994`, 
              "Round" -> 1, "Iteration" -> 3, 
              "Time" -> {
               1.317183`7.571191110423609, 1.3663519`7.587107558541528}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 81952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7854141893751735, 0.04818332533815082]}, 
              "AccuracyHistory" -> {
                Around[0.7802160202088798, 0.013658224785449037`]}, 
              "IterationHistory" -> {3}, 
              "TimeHistory" -> {{
                1.317183`7.571191110423609, 1.3663519`7.587107558541528}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5147845052231148, 0.030848719545912527`], "Accuracy" -> 
              Around[0.7527621084483795, 0.022981278414572186`], 
              "EvaluationTime" -> 5.75341582686084*^-6, "TestSize" -> 700, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.04106675814670968, 
              "Round" -> 2, "Iteration" -> 6, 
              "Time" -> {
               1.4383891`7.609421376848011, 1.4830241`7.6226932021184}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 86496, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5147845052231148, 0.02181333878183674]}, 
              "AccuracyHistory" -> {
                Around[0.7527621084483795, 0.01625021780728002]}, 
              "IterationHistory" -> {6}, 
              "TimeHistory" -> {{
                1.4383891`7.609421376848011, 1.4830241`7.6226932021184}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5722284248452572, 0.07228903599665538], "Accuracy" -> 
              Around[0.724510241651282, 0.04657582972427154], 
              "EvaluationTime" -> 7.788445788002592*^-6, "TestSize" -> 183, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.15989468473384683`, 
              "Round" -> 4, "Iteration" -> 30, 
              "Time" -> {
               5.2678562`8.173178904736577, 5.3951217`8.183546239186322}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 286752, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5722284248452572, 0.05111606755867345]}, 
              "AccuracyHistory" -> {
                Around[0.724510241651282, 0.032934085037422366`]}, 
              "IterationHistory" -> {30}, 
              "TimeHistory" -> {{
                5.2678562`8.173178904736577, 5.3951217`8.183546239186322}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 7.788445788002592*^-6, "MeanCrossEntropy" -> 
             Around[0.5722284248452572, 0.07228903599665538], "ModelMemory" -> 
             9232, "TrainingMemory" -> 286752, "TrainingTime" -> 
             0.18894551564717593`|>, "Index" -> 8|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1000.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.681639282004578, 0.002101960243143695], "Accuracy" -> 
              Around[0.7768170107187629, 0.020654013762807056`], 
              "EvaluationTime" -> 5.822935529103476*^-6, "TestSize" -> 800, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.3105216865117696, 
              "Round" -> 2, "Iteration" -> 9, 
              "Time" -> {
               1.5717388`7.647925367804962, 1.5991024`7.65542126858118}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 79800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.681639282004578, 0.0014863103417114307`]}, 
              "AccuracyHistory" -> {
                Around[0.7768170107187629, 0.014604593190401149`]}, 
              "IterationHistory" -> {9}, 
              "TimeHistory" -> {{
                1.5717388`7.647925367804962, 1.5991024`7.65542126858118}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6890105290021672, 0.0012483835355718727`], "Accuracy" -> 
              Around[0.7701724122206496, 0.019663712538288254`], 
              "EvaluationTime" -> 5.050132571137552*^-6, "TestSize" -> 906, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.32102338988338597`, 
              "Round" -> 1, "Iteration" -> 13, 
              "Time" -> {
               4.1186964`8.066304773637833, 4.1428161`8.068840648848854}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 74672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6890105290021672, 0.0008827404635245087]}, 
              "AccuracyHistory" -> {
                Around[0.7701724122206496, 0.013904344479126562`]}, 
              "IterationHistory" -> {13}, 
              "TimeHistory" -> {{
                4.1186964`8.066304773637833, 
                 4.1428161`8.068840648848854}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.621426577877582, 0.02453463928744212], "Accuracy" -> 
              Around[0.7651084284470573, 0.05091663272875066], 
              "EvaluationTime" -> 6.186582394029863*^-6, "TestSize" -> 183., 
              "ModelMemory" -> 9232., "ModelUtility" -> -0.22528752024887966`,
               "Round" -> 4, "Iteration" -> 38, 
              "Time" -> {
               6.1094825`8.237549418646438, 6.2136076`8.2448888168379}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.050079242876730524`, 
              "TrainingMemory" -> 286477.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6440930760385891, 0.015409943547030914`], 
                Around[0.5987600797165749, 0.011843217589012665`]}, 
              "AccuracyHistory" -> {
                Around[0.7190747038644556, 0.03313343128446832], 
                Around[0.8111421530296591, 0.02884964032073664]}, 
              "IterationHistory" -> {28, 38}, 
              "TimeHistory" -> {{
                5.1459343`8.16300923061134, 5.1786564`8.165762090353931}, {
                6.1094825`8.237549418646438, 6.2136076`8.2448888168379}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 6.186582394029863*^-6, "MeanCrossEntropy" -> 
             Around[0.621426577877582, 0.02453463928744212], "ModelMemory" -> 
             9232., "TrainingMemory" -> 286477.3333333333, "TrainingTime" -> 
             0.07843090528761953|>, "Index" -> 9|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.092189384670039, 0.27121848172109886`], "Accuracy" -> 
              Around[0.7770815796770789, 0.01950988670082878], 
              "EvaluationTime" -> 4.101837509049173*^-6, "TestSize" -> 906, 
              "ModelMemory" -> 9232, "ModelUtility" -> -1.8394292671507815`, 
              "Round" -> 1, "Iteration" -> 2, 
              "Time" -> {
               1.2454999`7.546888690499409, 1.3152201`7.570543430897227}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 82328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.092189384670039, 0.19178042760810868`]}, 
              "AccuracyHistory" -> {
                Around[0.7770815796770789, 0.01379557318633727]}, 
              "IterationHistory" -> {2}, 
              "TimeHistory" -> {{
                1.2454999`7.546888690499409, 
                 1.3152201`7.570543430897227}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5147482638518698, 0.028616140168859258`], "Accuracy" -> 
              Around[0.7418739346183433, 0.020854046248822356`], 
              "EvaluationTime" -> 3.4532153099863514`*^-6, "TestSize" -> 876, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.04013964743691201, 
              "Round" -> 2, "Iteration" -> 23, 
              "Time" -> {
               4.4630164`8.101173476217392, 4.5432606`8.108912642020044}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 245016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5147482638518698, 0.020234666764785136`]}, 
              "AccuracyHistory" -> {
                Around[0.7418739346183433, 0.01474603751772017]}, 
              "IterationHistory" -> {23}, 
              "TimeHistory" -> {{
                4.4630164`8.101173476217392, 
                 4.5432606`8.108912642020044}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5722017435502916, 0.07236253575851744], "Accuracy" -> 
              Around[0.724510241651282, 0.04657582972427154], 
              "EvaluationTime" -> 5.477456105216087*^-6, "TestSize" -> 183, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.15987426015234474`, 
              "Round" -> 4, "Iteration" -> 36, 
              "Time" -> {
               5.8811533`8.221007493502727, 5.9945835`8.229304007463716}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              350256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5722017435502916, 0.05116803973870171]}, 
              "AccuracyHistory" -> {
                Around[0.724510241651282, 0.032934085037422366`]}, 
              "IterationHistory" -> {36}, 
              "TimeHistory" -> {{
                5.8811533`8.221007493502727, 5.9945835`8.229304007463716}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 5.477456105216087*^-6, "MeanCrossEntropy" -> 
             Around[0.5722017435502916, 0.07236253575851744], "ModelMemory" -> 
             9232, "TrainingMemory" -> 350256, "TrainingTime" -> 
             0.17508461695072178`|>, "Index" -> 10|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.51204488584961, 0.026254760594163158`], "Accuracy" -> 
              Around[0.7875959823630763, 0.01942856429454016], 
              "EvaluationTime" -> 3.6013547059371745`*^-6, "TestSize" -> 876, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.03401946295736924, 
              "Round" -> 2, "Iteration" -> 24, 
              "Time" -> {
               4.5485612`8.10941903592926, 4.8131405`8.13397353281391}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 101640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.51204488584961, 0.018564919254562117`]}, 
              "AccuracyHistory" -> {
                Around[0.7875959823630763, 0.013738069561388178`]}, 
              "IterationHistory" -> {24}, 
              "TimeHistory" -> {{
                4.5485612`8.10941903592926, 4.8131405`8.13397353281391}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5481891871041183, 0.03680681832775478], "Accuracy" -> 
              Around[0.7770815796770789, 0.01950988670082878], 
              "EvaluationTime" -> 4.178525460133728*^-6, "TestSize" -> 906, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.10536413766478236`, 
              "Round" -> 1, "Iteration" -> 25, 
              "Time" -> {
               5.016903`8.1519806976786, 5.0565174`8.15539649952748}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 82192, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5481891871041183, 0.026026350833456707`]}, 
              "AccuracyHistory" -> {
                Around[0.7770815796770789, 0.01379557318633727]}, 
              "IterationHistory" -> {25}, 
              "TimeHistory" -> {{
                5.016903`8.1519806976786, 5.0565174`8.15539649952748}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5726011976885326, 0.07170524970276555], "Accuracy" -> 
              Around[0.724510241651282, 0.04657582972427154], 
              "EvaluationTime" -> 7.788445788002592*^-6, "TestSize" -> 183, 
              "ModelMemory" -> 9232, "ModelUtility" -> -0.16033096519737045`, 
              "Round" -> 4, "Iteration" -> 35, 
              "Time" -> {
               5.8197085`8.21644622556649, 5.8781565`8.220786138039921}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 286248, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5726011976885326, 0.05070326831150019]}, 
              "AccuracyHistory" -> {
                Around[0.724510241651282, 0.032934085037422366`]}, 
              "IterationHistory" -> {35}, 
              "TimeHistory" -> {{
                5.8197085`8.21644622556649, 5.8781565`8.220786138039921}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 7.788445788002592*^-6, "MeanCrossEntropy" -> 
             Around[0.5726011976885326, 0.07170524970276555], "ModelMemory" -> 
             9232, "TrainingMemory" -> 286248, "TrainingTime" -> 
             0.12572704495314635`|>, "Index" -> 11|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LogisticRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "Round", "Iteration", "Time", 
              "TrainingSize", "TrainingTime", "TrainingMemory", 
              "ExperimentCount", "MeanCrossEntropyHistory", "AccuracyHistory",
               "IterationHistory", "TimeHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[
               TypeSystem`Atom[Real], 2], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[
               TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
              TypeSystem`Vector[
               TypeSystem`Vector[
                TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], <||>], 
      "TrainingSizes" -> {10, 40, 150, 733}, "MaxTrainingSize" -> 916, 
      "PreprocessorEvaluationTime" -> 4.26875*^-6, "PreprocessorMemory" -> 
      99192, "InputDimension" -> 6, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.6652042646399302, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.5210167716762126, 
          "ElapsedTimes" -> 0.5218776, "ExperimentCounts" -> 13|>, <|
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.7443096738231625, 
          "ElapsedTimes" -> 0.8585877, "ExperimentCounts" -> 11|>, <|
         "TrainingSizes" -> 150, "TimeBudgets" -> 1.0632995340330806`, 
          "ElapsedTimes" -> 2.4493458, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 733, "TimeBudgets" -> 1.518999334332965, 
          "ElapsedTimes" -> 1.4956051999999997`, "ExperimentCounts" -> 16|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, "ID" -> 
           7168142382301173801|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, "ID" -> 
           1978735388468315165|>, 
         "f3" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
           9071588231046195481|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 6.6970557, 
      "MaxTrainingMemory" -> 12122600, "DataMemory" -> 227152, 
      "FunctionMemory" -> 337520, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 10, 11, 15, 6, 18.9367886`9.02988127103831}, 
        "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9376227407096615`*^9, 3.937622742607731*^9}, 
   3.9376227789952793`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"e683a406-d155-df49-aca6-d3477ad82f03"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["916", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 916, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal"|>, "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 3|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f2(f1f3))" -> <|
            "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
             "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 916, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{0.9924763087166281, 
                   0.06962246892396884, -0.10071488696884714`}, \
{-0.12176028349302224`, 0.6475982344553933, -0.7521907737362618}, {
                   0.012853404215050985`, 0.7587945957577639, 
                   0.6512031568173609}}, 
                  "Precisions" -> {1.1096705122951698`, 11.071379162604247`, 
                   14.504654820468707`}, "NoisePrecision" -> None, 
                  "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001752264873371586, 0.09643725350844203, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                   "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                   "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   8708448484904811398|>], "InputDimension" -> 0, 
                "OutputDimension" -> 3, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.2031236, "MaxTrainingMemory" -> 2050104,
                   "DataMemory" -> 106416, "FunctionMemory" -> 64512, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 10, 11, 15, 6, 19.189783`9.03564500105436}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146168`, -1.997829760914916, -1.976574768503185, \
-1.9695170466598357`, -1.9059724997243812`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714302`, -1.7810711623410056`}, 
                   "LeftBoundary" -> -2.0628669170146168`, "LeftScale" -> 
                   0.12459852713774523`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[5.892604950680779, 0.13867820062256261`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 616651398117295976|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {29.018970775438927`}, 
             "StandardDeviation" -> {12.892103992603547`}, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
               "female" -> 1, "male" -> 2|>}, 
             "Output" -> <|
              "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 0.}, {
                0.21963098645210266`, -0.1438339650630951, 
                0.544792890548706}, {-0.2416929453611374, 0.3798814117908478, 
                0.6873865127563477}, {-0.9437126517295837, 
                0.4273325502872467, -1.2217921018600464`}}], 
               RawArray["Real32",{{0., 0.}, {-0.12253803759813309`, 
                0.6071814894676208}, {-0.6194148659706116, \
-0.98703533411026}}]}, "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "Spans" -> {
               Span[1, 1], 
               Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
             7619735631186802745|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
             0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "died" -> 0.6176470588235294, "survived" -> 0.3823529411764706|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 4, 4, 2, 4, 1, 3, 1, 1, 6, 2, 5, 4, 5, 
            1, 5, 5, 3, 2, 2, 6, 5, 1, 5, 4, 6, 5, 1, 2, 4, 2, 6, 4, 4, 3, 1, 
            3, 1, 4, 1, 4, 4, 1, 1, 5, 5, 6, 6, 5, 2, 1, 4, 6, 5, 3, 3, 4, 1, 
            2, 5, 2, 3}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZwADhZNT3+8H0gueypwBCS0o7fkM4h8og9AJz4zegflQ
8YQyxk0gdQqZkbdB9IFivnsgcYdzhc/A5kDNO/AEom+B/aXHYHmYfgcI/0BM
xUewuB2EvwBKM2RBzX0K0e9wDeIuh7MQcx9A1TWUTn8IVg8zT/j/U7CXTkHt
h4ov2OH8GyTecA9izoMPeQ/B5t2E8qHqHT5DxBM+QeUVMg+BxBVerAGbq6AJ
4T/Y7cfmAKJLoOGkxnEFbA48fCC0Qsq/B2B3nqsBh4vD+rj9YP3bIHQDZ95j
sHvZIPSBtRBxBqi/GTR2XQHTUHMZOCDqFiyHqHOAhn9CNoSGxRsD62EGkPsc
Tr0/B1a3EGruBQi/4bf/DXsAF8m2pA==
           "], "Children" -> 
          RawArray["Integer16",{{2, 40}, {3, -39}, {4, 12}, {-1, 5}, {6, 8}, {
            7, -4}, {-2, -3}, {-5, 9}, {10, 11}, {-6, -7}, {-8, -9}, {13, 
            21}, {14, 16}, {-10, 15}, {-11, -12}, {-13, 17}, {18, 20}, {
            19, -16}, {-14, -15}, {-17, -18}, {22, 29}, {-19, 23}, {
            24, -26}, {25, 26}, {-20, -21}, {27, -25}, {-22, 
            28}, {-23, -24}, {30, 39}, {31, 36}, {32, 33}, {-27, -28}, {34, 
            35}, {-29, -30}, {-31, -32}, {37, -36}, {-33, 
            38}, {-34, -35}, {-37, -38}, {41, 59}, {42, 58}, {43, 51}, {44, 
            48}, {45, 46}, {-40, -41}, {47, -44}, {-42, -43}, {49, -48}, {-45,
             50}, {-46, -47}, {52, 56}, {53, -53}, {54, -52}, {
            55, -51}, {-49, -50}, {-54, 57}, {-55, -56}, {-57, -58}, {
            60, -64}, {61, -63}, {62, -62}, {-59, 63}, {-60, -61}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 
            1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 
            1, 2, 2, 1, 1, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 2, 6, 1, 4, 3, 4, 3, 2, 3, 3, 6, 1, 5, 4, 
            5, 3, 4, 3, 1, 1, 6, 4, 5, 4, 1, 6, 2, 6, 3, 5, 1, 1, 5, 3, 2, 5, 
            4, 3, 2, 3, 2, 5, 4, 2, 5, 2, 1, 3, 3, 1, 1, 6, 4, 2, 4, 5, 5, 5, 
            4, 4, 2, 3}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZ4AA20uP9wOpA49kzoCEFpya+h7EXzBHleEAiC7t+Qzi
K2RF3gbJHyiD8B2yIfwFj43egfgJipmHwOpUIbTDaYg5B96+OwK2yhFiTwPU
PAcHKD8DYo6C8P+nYPN/+98A0Qnfjx0GyTNUMV4HuwdqngJU/wM7qLth+gTm
PgPzT0LtfQJxFwPUPwdyIPbA3MGwUPc3WF8x3z2wPNS8BJg/n0L0N0DDJ+FT
3kOwf+Uh/mN4CgmvhjRoOJx4fw6sbl3cfjAtBHGXwymI+IMVEPGGJxB9DKyH
GRyQ3NUADU8GjV1XwOpKJkLcyZ73GGwONNxh/oLxGbZB7dsCoQ+sgtAPYOEM
Uwf1j0Me0B4A21+2DA==
           "], "Children" -> 
          RawArray["Integer16",{{2, 41}, {3, 38}, {4, 25}, {-1, 5}, {6, 
            10}, {-2, 7}, {-3, 8}, {-4, 9}, {-5, -6}, {11, 15}, {12, -11}, {
            13, -10}, {-7, 14}, {-8, -9}, {-12, 16}, {-13, 17}, {18, 21}, {19,
             20}, {-14, -15}, {-16, -17}, {22, 23}, {-18, -19}, {-20, 
            24}, {-21, -22}, {26, -36}, {27, 29}, {-23, 28}, {-24, -25}, {-26,
             30}, {31, -35}, {-27, 32}, {33, -34}, {-28, 34}, {-29, 35}, {
            36, -33}, {-30, 37}, {-31, -32}, {39, -40}, {
            40, -39}, {-37, -38}, {42, 49}, {43, 47}, {-41, 44}, {45, -45}, {
            46, -44}, {-42, -43}, {48, -48}, {-46, -47}, {50, 61}, {51, 60}, {
            52, 58}, {53, 56}, {54, 55}, {-49, -50}, {-51, -52}, {-53, 
            57}, {-54, -55}, {-56, 59}, {-57, -58}, {-59, -60}, {62, 
            63}, {-61, -62}, {-63, -64}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 
            1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 
            1, 2, 2, 1, 1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 4, 5, 6, 3, 6, 1, 6, 3, 1, 2, 4, 1, 2, 3, 
            3, 1, 4, 1, 3, 6, 6, 1, 3, 3, 1, 4, 4, 5, 5, 2, 1, 4, 3, 5, 4, 3, 
            5, 4, 6, 1, 1, 1, 1, 3, 4, 2, 5, 5, 2, 1, 6, 6, 6, 2, 3, 5, 5, 3, 
            2, 1, 1, 1, 6, 3, 3, 2, 1, 1, 4, 1, 5}], 
          "NumericalThresholds" -> CompressedData["
1:eJxNkDFLA0EQhcdCxUYiNhYipyAIprLRRt3STrCzkSUgUdRYKYoW9wPSWgpb
CVYqCBYWtySC5IyNIahns8l5h4UoeCBEFL2dmYDbfOzsezNvZzi3ubDcAQBz
gMf8zD/MphSZ38hSTt+FXkqnevBuaUZXS8gbuov6JYiUyqe7w+/iuje2fn0/
WMU+H4WGpdrJ1iwhoLoZI72TJUJnmfolpDdOlNi626JcursQWjoVmidfh0Bb
fnJupvHreZzTT//QfUQ4XvLQd0HU8cQbzt2dusW+W0WcJ1YWn9An+P/bVHe5
LmaoLljfzuMejZex/lV8QfbsfyOv9hqoWyO/YR9EPJ/nKKbkus4cxt6//bb3
LpkmJJ27QX2Bc+kz+p9Y57zPrBt4bKJ/slXD95NTzGW6aK+K86k85+Qc0k8C
9JsR1APvQwXNc9yTSuf9AewS0JI=
           "], "Children" -> 
          RawArray["Integer16",{{2, 30}, {3, 22}, {4, 17}, {5, 
            6}, {-1, -2}, {-3, 7}, {8, 16}, {9, 12}, {10, 
            11}, {-4, -5}, {-6, -7}, {13, -12}, {-8, 14}, {-9, 
            15}, {-10, -11}, {-13, -14}, {18, -20}, {19, 
            20}, {-15, -16}, {-17, 21}, {-18, -19}, {23, 28}, {-21, 24}, {25, 
            26}, {-22, -23}, {-24, 27}, {-25, -26}, {29, -29}, {-27, -28}, {
            31, 58}, {32, 35}, {33, -33}, {34, -32}, {-30, -31}, {36, 38}, {
            37, -36}, {-34, -35}, {39, 55}, {40, 50}, {41, -47}, {42, 48}, {
            43, 44}, {-37, -38}, {-39, 45}, {46, -43}, {-40, 
            47}, {-41, -42}, {49, -46}, {-44, -45}, {51, 52}, {-48, -49}, {
            53, -53}, {-50, 54}, {-51, -52}, {56, 
            57}, {-54, -55}, {-56, -57}, {59, 62}, {60, -61}, {
            61, -60}, {-58, -59}, {63, 70}, {64, 67}, {-62, 65}, {
            66, -65}, {-63, -64}, {-66, 68}, {69, -69}, {-67, -68}, {71, 
            72}, {-70, -71}, {-72, -73}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 
            1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 
            1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
            2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 5, 2, 5, 3, 4, 6, 1, 1, 6, 3, 5, 6, 5, 2, 
            2, 1, 6, 5, 4, 6, 5, 6, 4, 1, 6, 6, 3, 1, 4, 2, 6, 2, 6, 3, 4, 4, 
            2, 6, 5, 2, 6, 5, 4, 2, 3, 5, 5, 6, 5, 5, 4, 3, 4, 5, 4, 4, 3, 2, 
            3, 6, 1, 5, 6, 3, 3, 5, 1}], 
          "NumericalThresholds" -> CompressedData["
1:eJxNUTEvBEEYHR0dtSvmRKLRUFzHjkQrEp1GJhLFCqeinh+gVejmCtT8gLsJ
hWBPoZJcM5t1GomLKEWw33uT2Obte/O+75v3TXP7YGNnTCm1quQLN6PHXv2z
9FTVqF8X3wUz8LC3Ocj+0B8ef9bcP5yMxD993qvRdtdK8d1Djzn8Zpn97qBb
cv+C/nYINBd5X3x9+Dzn6iPMs2neCnTHOW7yZ5hJgtbtf58pgHoX94hF503O
2U+l+clXgbuJdiX9WJf8kbkjfXocPn+5Jfkjczjq8Qx62pdJ/ffR153iXHeA
gXXhCtxSj8znvtafBafALd8pfrRLuQfRzubXMrdsFOKfB4/ci134lnrD/Trm
jzPwhTmg5juFblOZX2iTyyo=
           "], "Children" -> 
          RawArray["Integer16",{{2, 55}, {3, 33}, {4, 13}, {5, 8}, {
            6, -4}, {-1, 7}, {-2, -3}, {9, 10}, {-5, -6}, {11, 
            12}, {-7, -8}, {-9, -10}, {14, -31}, {15, 30}, {16, 18}, {-11, 
            17}, {-12, -13}, {-14, 19}, {20, 26}, {21, 22}, {-15, -16}, {-17, 
            23}, {-18, 24}, {25, -21}, {-19, -20}, {27, 29}, {
            28, -24}, {-22, -23}, {-25, -26}, {31, -30}, {-27, 
            32}, {-28, -29}, {34, 51}, {35, 50}, {36, 42}, {-32, 37}, {-33, 
            38}, {39, -38}, {40, -37}, {-34, 41}, {-35, -36}, {43, 49}, {44, 
            47}, {45, -42}, {46, -41}, {-39, -40}, {
            48, -45}, {-43, -44}, {-46, -47}, {-48, -49}, {52, 54}, {
            53, -52}, {-50, -51}, {-53, -54}, {56, 68}, {57, 64}, {58, -62}, {
            59, -61}, {60, 63}, {-55, 61}, {-56, 
            62}, {-57, -58}, {-59, -60}, {-63, 65}, {66, 
            67}, {-64, -65}, {-66, -67}, {-68, -69}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 
            1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 
            1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 6, 3, 6, 2, 6, 2, 1, 3, 1, 3, 4, 4, 5, 6, 
            1, 4, 6, 4, 1, 3, 3, 6, 5, 1, 6, 5, 6, 6, 5, 3, 4, 1, 3, 4, 4, 2, 
            3, 2, 5, 6, 5, 5, 2, 1, 1, 2, 1, 4, 4, 2, 1, 2, 1, 3, 2, 1, 6, 2, 
            5, 3, 5}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYwCDhvd5D+1BjJNT3+8H0dmRt0H8A6ch/APPjN6B6AQo
fwGUf6CY7x5YfQZEfcLFvW9AtANUv0JZz2eQfEMphGawu/QYrA9qz4Kr7VfA
5kLVwcRh/AeVfofB7sqDmg81t4E97zHY/IVx+8HqNWdcBZsHFXfYAhE/wAbh
J3BA6AXLIeILoOYsgLrrgBrHFbB5WRBxhg+Q8FgADReH2zJnwOI6mYdA6h0e
QfgJDhD/KMDCzRHCf2ALoRluQtW95XkNtneT+gewuSffnwObs8/3Jpgv8P8p
2H5hCJ1wB6JvwQ7n32DxBxC+whu3u2B5VYg7Eh5Czf+lx+AAkof60+ECxHyF
+dBw+OF/AyT+YD2QDwDsPKsY
           "], "Children" -> 
          RawArray["Integer16",{{2, 35}, {3, 19}, {4, 10}, {5, 6}, {-1, -2}, {
            7, 8}, {-3, -4}, {9, -7}, {-5, -6}, {11, -17}, {12, 
            13}, {-8, -9}, {14, 18}, {15, 16}, {-10, -11}, {-12, 
            17}, {-13, -14}, {-15, -16}, {20, 24}, {21, -22}, {22, -21}, {
            23, -20}, {-18, -19}, {25, 33}, {26, 31}, {27, 29}, {-23, 
            28}, {-24, -25}, {-26, 30}, {-27, -28}, {32, -31}, {-29, -30}, {
            34, -34}, {-32, -33}, {36, 38}, {-35, 37}, {-36, -37}, {39, 41}, {
            40, -40}, {-38, -39}, {42, 56}, {-41, 43}, {44, -55}, {45, 
            51}, {-42, 46}, {47, -48}, {48, -47}, {49, -46}, {-43, 
            50}, {-44, -45}, {-49, 52}, {53, -54}, {54, 
            55}, {-50, -51}, {-52, -53}, {57, -63}, {58, -62}, {59, 
            60}, {-56, -57}, {61, -61}, {-58, 62}, {-59, -60}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
            1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 
            2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
            2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 4, 4, 3, 1, 4, 4, 2, 4, 5, 6, 2, 5, 6, 
            2, 4, 6, 1, 5, 5, 4, 1, 5, 2, 1, 3, 6, 1, 6, 4, 1, 2, 1, 4, 4, 2, 
            2, 1, 1, 4, 3, 2, 4, 6, 5, 5, 3, 5, 2, 5, 3, 6, 3, 6, 4, 5, 4, 5, 
            4, 3, 4, 3, 6, 4, 2}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYoAA20uP9wOpBrnMQyD6wce8h/YgPpROUIGIM9yKAfMX
fICKQ2mHGzJnQPQDKP8B1DyHU1Pfg+iEuxB5BjuIuAJU3OGZ0TuwvaU9n0H0
gtNQccmSZyD6AEw9jIaqa3hUdQUsD7VnwROIOQcE5oL1OeRE3ga74yTU/mSz
X2BxqPkNAv+fgt0v+BDiTpj+Ty8uI7snoQzqrsdQ+TPvz4Fp9Yoj4PCoYrwO
dpcwxLwDP/xvgM29AFUnCBFfwJn3GBxO0+P2g9UvhNAPMiDuVNgA4R94CrHH
YRWUnwWRP8AO0Z+QC1UP5TvA3Dcfoh7mboVZEP4CqP0P1KHxB41PBi0IX4ED
aq4QRB0DyH8A+oXBSQ==
           "], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, 16}, {4, 14}, {5, 12}, {6, 
            11}, {-1, 7}, {8, 10}, {9, -4}, {-2, -3}, {-5, -6}, {-7, -8}, {
            13, -11}, {-9, -10}, {15, -14}, {-12, -13}, {17, 24}, {18, 22}, {
            19, 20}, {-15, -16}, {-17, 21}, {-18, -19}, {
            23, -22}, {-20, -21}, {25, -42}, {26, 29}, {27, 
            28}, {-23, -24}, {-25, -26}, {30, 31}, {-27, -28}, {32, 41}, {-29,
             33}, {34, 35}, {-30, -31}, {36, 38}, {37, -34}, {-32, -33}, {
            39, -38}, {40, -37}, {-35, -36}, {-39, 42}, {-40, -41}, {44, 
            60}, {45, -59}, {46, -58}, {47, -57}, {48, 56}, {49, 51}, {
            50, -45}, {-43, -44}, {52, 55}, {-46, 53}, {
            54, -49}, {-47, -48}, {-50, -51}, {-52, 57}, {-53, 58}, {-54, 
            59}, {-55, -56}, {61, 64}, {62, -63}, {63, -62}, {-60, -61}, {65, 
            66}, {-64, -65}, {-66, -67}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 
            1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 
            1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 
            1, 2, 2, 2, 2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 6, 1, 2, 3, 3, 1, 5, 1, 4, 2, 4, 6, 5, 2, 
            3, 2, 2, 3, 4, 2, 2, 1, 1, 2, 1, 4, 4, 2, 4, 2, 1, 4, 1, 3, 4, 1, 
            2, 1, 6, 1, 1, 1, 4, 6, 5, 5, 6, 6, 1, 2, 3, 6, 5, 5, 3, 2, 4, 
            5}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZoAA20uP9wMphZNT34PoBwpPP4Noh8dG70B0Q2bkbXsQ
nQGlqzvZHUD67CH6FmzbdgYkvqC0B6yv4RlE3wMoPwFqrgNU/YOnEHmFbIh5
CaffnwOLn4PQDlB7DnzKewiiH9yQAZuvcAoif6CH6QPYHZcYn4HV3YXK9338
CaY/Q/QteA+hD0Dd41AGcc8BqL8WcCW9BovD3PlC+xqYVso8BHbfB4h+hgnx
EBqm75H7RbA+9rzHIHGHD49vgP09pRQSjkd5XiPbxwBVl7Ahbj/Y/K0QWoED
It7ACaUzdkPCExo+C6DhvgCmfwtE34JZUPq3/w2wf59C/P9A4P9TMD0DKA8A
aDKq6Q==
           "], "Children" -> 
          RawArray["Integer16",{{2, 38}, {3, -37}, {4, 7}, {5, -4}, {
            6, -3}, {-1, -2}, {8, -36}, {9, 27}, {10, 21}, {11, 14}, {12, 
            13}, {-5, -6}, {-7, -8}, {15, -16}, {-9, 16}, {17, -15}, {18, 
            20}, {19, -12}, {-10, -11}, {-13, -14}, {22, 24}, {-17, 
            23}, {-18, -19}, {-20, 25}, {-21, 26}, {-22, -23}, {28, -35}, {29,
             35}, {-24, 30}, {31, 33}, {32, -27}, {-25, -26}, {-28, 
            34}, {-29, -30}, {36, 37}, {-31, -32}, {-33, -34}, {39, 55}, {40, 
            52}, {41, 46}, {42, 45}, {43, 
            44}, {-38, -39}, {-40, -41}, {-42, -43}, {47, 
            48}, {-44, -45}, {-46, 49}, {50, -50}, {51, -49}, {-47, -48}, {53,
             54}, {-51, -52}, {-53, -54}, {56, 59}, {57, 
            58}, {-55, -56}, {-57, -58}, {-59, -60}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 
            1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 
            2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 
            2, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 4, 3, 3, 6, 1, 4, 5, 5, 5, 5, 1, 6, 6, 
            3, 6, 1, 5, 3, 5, 6, 3, 1, 1, 2, 6, 3, 5, 5, 2, 2, 6, 1, 6, 4, 2, 
            3, 3, 2, 6, 2, 4, 4, 6, 2, 6, 5, 1, 5, 2, 1, 2, 2, 6, 5, 2, 4, 6, 
            1, 6}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZQCDhO1x+/cD6Qa5zEMg+sHHvIf2IFoJwj+gDqETTk99
D6YLC8DyCz5A1CnYX3oMEl8ApRnsUGmFF2uegtWdgeh/AKUZsiJvg8XPQs2d
xvwVTEP1NWRC5BkcIXyHU6j6ErrMF4P1/w86C+affH8O7I6TEHUNuVDzofof
QN3X8MToHdi8pxD6AdTcB5mHj4PFYf4s6/kMNu8ZRN2Cv/43QOY1/ILQC57K
nAGbz5b3GBxeZyD2Jwj+B/sXpr+BAyK/AGovAzuE77AGEu4KHgpXwOZsgPAZ
oPYx+EdfQXZvA9S9DFDzGGD6ofIPSiH2PYC6h2Gv/muwPMg+AP17rzE=
           "], "Children" -> 
          RawArray["Integer16",{{2, 38}, {3, 15}, {4, 12}, {5, -9}, {6, 10}, {
            7, 8}, {-1, -2}, {-3, 9}, {-4, -5}, {-6, 11}, {-7, -8}, {
            13, -13}, {-10, 14}, {-11, -12}, {16, 18}, {
            17, -16}, {-14, -15}, {19, 23}, {20, 22}, {
            21, -19}, {-17, -18}, {-20, -21}, {24, 28}, {-22, 25}, {26, 
            27}, {-23, -24}, {-25, -26}, {29, 37}, {-27, 30}, {-28, 31}, {32, 
            36}, {33, 35}, {-29, 
            34}, {-30, -31}, {-32, -33}, {-34, -35}, {-36, -37}, {39, 44}, {
            40, 42}, {41, -40}, {-38, -39}, {43, -43}, {-41, -42}, {45, 49}, {
            46, 48}, {47, -46}, {-44, -45}, {-47, -48}, {50, 61}, {51, 54}, {
            52, 53}, {-49, -50}, {-51, -52}, {55, 57}, {
            56, -55}, {-53, -54}, {58, 60}, {-56, 
            59}, {-57, -58}, {-59, -60}, {-61, -62}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 
            1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 
            1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 
            2, 1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 6, 4, 3, 5, 6, 3, 6, 3, 4, 6, 6, 6, 2, 
            2, 6, 1, 2, 5, 1, 6, 4, 5, 1, 6, 1, 4, 4, 1, 2, 6, 2, 6, 5, 1, 5, 
            1, 1, 6, 3, 2, 1, 1, 2, 5, 6, 4, 6, 1, 2, 6, 1, 3, 2, 2, 5, 5, 6, 
            6, 3, 2, 6, 3, 3, 3, 2, 6, 6, 3, 2, 5, 1}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDwZACDhO1x+/cD6QXf/G/YA+mGM1Pfg/gNn/MegvnymYfA
8raXHoNoh1MQ+QPKEPEHUP4DVQi/4SNEX8JpqDknIXQCjL4lcwYsf/L9ObA5
UPsefL/xAmzfE6N3YPvsIfY1nN/6A0QrQM1LKOv5DKYdoPIzZywFy0PNOVDM
dw9Z3QIY3Rb3ECz+FGK+AtTdDlD7FKDuO2AH9We8ylFkexxCVlwGm6Pef20/
kv8YciJvg/1zDuKfhK/2a0B8hWsF38H0M4j5CVBzG2DhVQL1B3veY5C6BXan
z4LNfwxVzwYRP9CueRPsvkyIPQug5j2A0gsWQuKvYQWETuCA6GOA0g3pUH1Q
f8LkHbKh4j8h8b5ADhJ/CU8h8aMA0w8z7wdE3YMzEH8qzIfaeyH3yH4AEtbb
MA==
           "], "Children" -> 
          RawArray["Integer16",{{2, 48}, {3, 16}, {4, 5}, {-1, -2}, {6, 15}, {
            7, -12}, {8, 13}, {9, -8}, {10, -7}, {11, -6}, {-3, 
            12}, {-4, -5}, {-9, 14}, {-10, -11}, {-13, -14}, {17, -47}, {18, 
            21}, {19, -18}, {20, -17}, {-15, -16}, {22, 25}, {23, 
            24}, {-19, -20}, {-21, -22}, {26, 41}, {-23, 27}, {28, 34}, {29, 
            30}, {-24, -25}, {31, -30}, {32, 33}, {-26, -27}, {-28, -29}, {
            35, -38}, {36, 38}, {-31, 37}, {-32, -33}, {39, 
            40}, {-34, -35}, {-36, -37}, {42, 45}, {43, -42}, {-39, 
            44}, {-40, -41}, {-43, 46}, {47, -46}, {-44, -45}, {49, 65}, {50, 
            56}, {51, 55}, {52, -52}, {-48, 53}, {
            54, -51}, {-49, -50}, {-53, -54}, {-55, 57}, {58, 63}, {
            59, -61}, {60, 61}, {-56, -57}, {-58, 62}, {-59, -60}, {
            64, -64}, {-62, -63}, {66, 71}, {67, 70}, {68, -68}, {-65, 
            69}, {-66, -67}, {-69, -70}, {72, 73}, {-71, -72}, {-73, -74}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 
            2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 
            1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 3, 5, 5, 2, 1, 4, 5, 4, 1, 5, 4, 4, 2, 6, 
            5, 5, 4, 6, 6, 6, 6, 5, 3, 6, 5, 2, 5, 3, 1, 2, 1, 3, 6, 4, 2, 5, 
            4, 1, 5, 2, 4, 6, 2, 1, 4, 6, 6, 2, 2, 5, 5, 6, 1, 5, 1, 4, 4, 2, 
            2, 3, 4, 6, 2}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYAADhXPvz+0H0gnf/W/Yg4TtLz0G8Q9sj9sPFn9s9A5E
P/D6dBZEN5T1fAbRDHYQdQlQvoMzzyUQvQAqrgATL4XQC55AzGE4M/U9WNwB
qh9GQ9UpwOShdMJJKH0aSsPszYm8DXIvw1mIuMJCiHsXPIO6dymE/+AXxF8N
bzffB/sL6g6HPX/+IZvTwJH3GGwezN1QdQ/WQ8yBiSuIrwb7M2EuRLwBpg7m
fqh7GZ7JnAGZ90DhKVj8wfu8h/ZI/ngAU3cToi7hNCQeFkDD4wA0HhSg6hVO
vQa77wDU/wt2OP8G6/sEMfeA0P+nIHrBCYg5Daeg9B+I/w8IQOQZ2CH+THgK
tBcAEAzGOw==
           "], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, 4}, {-1, -2}, {5, 26}, {6, 25}, {
            7, 19}, {8, 9}, {-3, -4}, {-5, 10}, {11, 18}, {12, -13}, {-6, 
            13}, {14, 17}, {15, -10}, {-7, 
            16}, {-8, -9}, {-11, -12}, {-14, -15}, {20, 21}, {-16, -17}, {22, 
            24}, {23, -20}, {-18, -19}, {-21, -22}, {-23, -24}, {27, 
            39}, {-25, 28}, {29, 38}, {-26, 30}, {31, 35}, {32, 
            33}, {-27, -28}, {34, -31}, {-29, -30}, {36, 
            37}, {-32, -33}, {-34, -35}, {-36, -37}, {40, 42}, {-38, 
            41}, {-39, -40}, {-41, -42}, {44, 59}, {45, -58}, {-43, 46}, {47, 
            48}, {-44, -45}, {49, 55}, {50, 51}, {-46, -47}, {-48, 52}, {-49, 
            53}, {54, -52}, {-50, -51}, {56, -57}, {57, -56}, {-53, 
            58}, {-54, -55}, {60, 63}, {61, 62}, {-59, -60}, {-61, -62}, {
            64, -65}, {-63, -64}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 
            2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 
            2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 
            2, 2, 2, 2, 1, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 1, 5, 3, 5, 1, 2, 1, 3, 1, 4, 4, 1, 2, 1, 
            2, 5, 3, 5, 2, 4, 3, 6, 2, 3, 4, 6, 5, 1, 5, 1, 5, 6, 3, 6, 2, 5, 
            6, 1, 4, 4, 2, 6, 2, 5, 1, 5, 4, 2, 4, 4, 1, 3, 2, 5, 5, 2, 4, 4, 
            2, 6}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZQCDByU9n/cDaYeQFZdBdIPtpcdgOjfytj1I3A7CPyBg
dgVEP3hq9A6sXrLkGVhdOkQdQxXjdbB4KdS8Mijd9hus3+ExRF/Ch0cfweZB
+Qqz4vaD+VkQcxQ2QPgMzyDyDTBzYO5hz3sMoh9A5R9kQMWh9iqcnPoebJ49
xN0Mx3uKwLQDhO8Q6nwY7I4tEHsesEHMa8iGmJNwGqJ/AdT8A1D/w8xl0Dj2
Fiz/Ke8hWN9HCO1wQ+YMmD4F1f8Qwl8AdYdC8+nPYP9B+Q4w/VB1DgL/n4L9
xQ+hE84nvAbRB/763wCbc+L9ObA586HhsxJCN5yHigtB9B0QhNALrkHMVeAA
+g8A8Gyw5g==
           "], "Children" -> 
          RawArray["Integer16",{{2, 38}, {3, 24}, {4, 14}, {5, -11}, {6, 
            12}, {7, -7}, {8, 10}, {-1, 9}, {-2, -3}, {11, -6}, {-4, -5}, {
            13, -10}, {-8, -9}, {15, 23}, {-12, 16}, {17, -20}, {18, -19}, {
            19, 22}, {20, 
            21}, {-13, -14}, {-15, -16}, {-17, -18}, {-21, -22}, {-23, 
            25}, {-24, 26}, {27, 35}, {28, 31}, {29, -28}, {
            30, -27}, {-25, -26}, {-29, 32}, {-30, 33}, {-31, 
            34}, {-32, -33}, {36, 37}, {-34, -35}, {-36, -37}, {39, 54}, {-38,
             40}, {41, 50}, {42, 46}, {-39, 43}, {44, -43}, {
            45, -42}, {-40, -41}, {47, 49}, {
            48, -46}, {-44, -45}, {-47, -48}, {51, 53}, {
            52, -51}, {-49, -50}, {-52, -53}, {55, 60}, {56, -59}, {57, 59}, {
            58, -56}, {-54, -55}, {-57, -58}, {61, -62}, {-60, -61}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
            2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 
            1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 
            2, 1, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 3, 1, 1, 6, 5, 3, 6, 6, 3, 3, 4, 4, 5, 5, 
            6, 5, 1, 5, 1, 6, 3, 6, 3, 4, 4, 6, 5, 1, 6, 1, 3, 6, 4, 1, 2, 1, 
            3, 1, 4, 3, 3, 1, 2, 2, 6, 1, 1, 1, 1, 1, 1, 3, 1, 2, 6, 5, 5, 2, 
            2, 5, 2, 2, 4, 1, 3, 3, 4}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYQADhZNT3+8H0d/9b9iDBDSOvQXxF+xw/g3iN0DlFzhc
egyiE75B1D04AxF3OAWhE7QzD4HoAzoQOuFD3kOwuo8QWsEOol/BHkI/gOp7
ABU/kMTL5ADSB+U3nN/6A2z+aYi6hrTI22DzoO5JyIbwHQT+PwXTZT2fkdUv
gNrD8H/HZTAfKn7AzXgTSP2BTKh+qDsUhCHmJPycsQpsz/n358DqP70A64ep
X7Bt2xmwOqh9D6DiDVlQ991Lfg2275nRO7C5jyE0A1veY7C+hsyLYPn/Rd/B
/tCccRWs7mneXbC6rOUvwPTnKWBzHKD+ZJDdCQm3pxDzHkDNe7Akbj9Y/VYI
3QCVX/AEQh9YABF3OAXxTwOUPiAI9W+y8BWweb8g8bpAAxJ/DKB4AwCdTs6m

           "], "Children" -> 
          RawArray["Integer16",{{2, 45}, {3, 19}, {-1, 4}, {5, 18}, {6, 
            17}, {-2, 7}, {8, -13}, {-3, 9}, {10, -12}, {11, 
            12}, {-4, -5}, {-6, 13}, {-7, 14}, {15, -11}, {
            16, -10}, {-8, -9}, {-14, -15}, {-16, -17}, {20, 41}, {21, 23}, {
            22, -20}, {-18, -19}, {24, 36}, {25, -33}, {26, 34}, {-21, 27}, {
            28, 32}, {29, 31}, {-22, 30}, {-23, -24}, {-25, -26}, {
            33, -29}, {-27, -28}, {-30, 35}, {-31, -32}, {37, -39}, {-34, 
            38}, {-35, 39}, {40, -38}, {-36, -37}, {-40, 42}, {-41, 43}, {-42,
             44}, {-43, -44}, {46, 62}, {47, 48}, {-45, -46}, {-47, 49}, {50, 
            57}, {51, 56}, {52, 53}, {-48, -49}, {54, 
            55}, {-50, -51}, {-52, -53}, {-54, -55}, {58, 
            59}, {-56, -57}, {-58, 60}, {-59, 61}, {-60, -61}, {63, 67}, {
            64, -66}, {65, -65}, {-62, 66}, {-63, -64}, {
            68, -69}, {-67, -68}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 
            2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 
            2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 6, 6, 6, 6, 4, 3, 5, 6, 2, 5, 1, 2, 
            2, 3, 3, 3, 3, 6, 1, 6, 4, 3, 6, 5, 2, 4, 5, 6, 3, 2, 2, 1, 3, 5, 
            2, 2, 2, 6, 5, 5, 6, 5, 5, 6, 5, 1, 1, 1, 3, 1, 3, 2, 5, 3, 1, 2, 
            5, 6, 1}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwY4CAk1Pf7wdSDtdkztgD6YRpzF/B/FMQ8QOnIbQCjD4L
oRlKez6D6AeZkbdB+hbYXXoMFofpe2b0Dsy3h4g3zJyxFEQnPIGINzyF0lkQ
/QowOhdCH8iB0A1Q9x0QMLsCNu8MhL8Aar9CNkSdA8x9UPsSoPYnfMp7CJJn
gLrvAdQ8Bp3MQ2D5uxB/H7gOoRl0/jwGh4MmRL7BFmreHYj8gltQdY+h/mPL
A6tvmB23H2z/Qgi9gBMi/mAJhN+wFSrPDhXfBuU/zbsLDu8NCYfB9PoND8Hu
TIP4i+FZ0EcwPx3Ch/lLYR5E/wN1iDsVrvh8ALsT6o8FsyDyMPcl/F73yR4A
+EqwYw==
           "], "Children" -> 
          RawArray["Integer16",{{2, 40}, {3, 29}, {4, 7}, {5, -4}, {-1, 
            6}, {-2, -3}, {8, 9}, {-5, -6}, {10, 17}, {11, -14}, {12, 
            14}, {-7, 13}, {-8, -9}, {15, -13}, {16, -12}, {-10, -11}, {18, 
            19}, {-15, -16}, {20, 28}, {21, 27}, {22, -23}, {23, 
            24}, {-17, -18}, {25, 
            26}, {-19, -20}, {-21, -22}, {-24, -25}, {-26, -27}, {30, 38}, {
            31, 37}, {32, 36}, {33, 34}, {-28, -29}, {-30, 
            35}, {-31, -32}, {-33, -34}, {-35, -36}, {39, -39}, {-37, -38}, {
            41, 57}, {-40, 42}, {43, -56}, {44, 56}, {45, -53}, {46, -52}, {
            47, 50}, {48, 49}, {-41, -42}, {-43, -44}, {51, -51}, {52, 
            54}, {-45, 53}, {-46, -47}, {-48, 55}, {-49, -50}, {-54, -55}, {
            58, 60}, {-57, 59}, {-58, -59}, {61, -63}, {-60, 
            62}, {-61, -62}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 
            2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 
            1, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 1, 4, 1, 6, 6, 3, 1, 1, 2, 3, 3, 4, 2, 3, 
            2, 4, 2, 5, 6, 6, 1, 4, 2, 2, 5, 1, 4, 5, 5, 6, 6, 5, 2, 5, 6, 1, 
            3, 3, 4, 1, 4, 3, 1, 2, 1, 4, 5, 1, 2, 2, 1, 5, 1, 3, 1, 5, 3, 2, 
            5, 3, 1, 2, 3}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYICAk1Pf7wdSDxSefgbRCqU9YDoh+9wPMP80RP4AVB2D
TuYhsHji58/2QLrBfOILMP1U5gyIVsiNvA2iGbIgtILw/6cg+sA1iHxDBkR8
waX350DmOAhA5Bc8NnoH4jc4XHoMps9A7FsAtT+hxvADSF3Cx7yHIPrBOYj+
hicQfQ72EH0Hdhg9BIuXQfzhYAcRZ4DKM8D8cwpCN0DlD9yFuO8AlO8A9e+B
Yr57YH4mxN0JORD6QQnE/AX/i76D3QezD+p/haATh8HizyDuezB/NdhdD6Dh
u2BO3H6werXjt8HiUH/A1CtUr7gCdu82iDoGjV1g/oE0iPkNbzffB+ufBZFf
8Nv/BjgcT0DCZcEyiHjDT4j4g/qgo2B7zkDlvwPFAYmBw+M=
           "], "Children" -> 
          RawArray["Integer16",{{2, 40}, {3, 6}, {4, -4}, {5, -3}, {-1, -2}, {
            7, 33}, {8, 10}, {9, -7}, {-5, -6}, {11, -31}, {12, -30}, {13, 
            25}, {14, 24}, {15, 20}, {16, 18}, {-8, 17}, {-9, -10}, {
            19, -13}, {-11, -12}, {-14, 21}, {22, 
            23}, {-15, -16}, {-17, -18}, {-19, -20}, {26, 31}, {27, 
            28}, {-21, -22}, {-23, 29}, {30, -26}, {-24, -25}, {-27, 
            32}, {-28, -29}, {34, 39}, {35, -37}, {36, -36}, {37, -35}, {-32, 
            38}, {-33, -34}, {-38, -39}, {41, 57}, {-40, 42}, {43, 47}, {
            44, -45}, {45, -44}, {-41, 46}, {-42, -43}, {48, 51}, {
            49, -49}, {-46, 50}, {-47, -48}, {52, 53}, {-50, -51}, {-52, 
            54}, {55, -56}, {-53, 56}, {-54, -55}, {58, 64}, {59, 63}, {
            60, -61}, {61, -60}, {-57, 
            62}, {-58, -59}, {-62, -63}, {-64, -65}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
            2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 
            2, 2, 2, 2, 2, 2, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 5, 5, 1, 1, 1, 2, 6, 4, 6, 2, 5, 2, 1, 
            3, 5, 1, 1, 1, 5, 6, 5, 4, 4, 3, 6, 3, 6, 5, 1, 4, 6, 6, 2, 2, 3, 
            2, 3, 1, 6, 3, 5, 6, 6, 3, 6, 6, 1, 5, 6, 1, 6, 1, 6, 1, 6, 2, 4, 
            6, 4, 1}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYwADBdtLj/cD6YRv/jfsQTSUf8ABQj9Q+nQTJL5g2fyn
IFqhcM0NsPqnMmfA4ienvgfxGT7lPQTxHU5D+AkPoPL2UPNvQflzVBkOgNRn
Rd4G22cHkW84v/UH2F43401g8a/2a0D0Aaj8A5g9UHcdEP4Pds+Bsp7PYP25
EPMOQNU1QM1/cAZVn8OR6ocgekEpRB/MvQ5QdQ5Pjd6B6WcQekEaxJwF1yDu
Z/gBCScG/TdHwOHBkfcY7O9fEPEH6+P2g+1jh4gfYIPQC9Kh/oWKL+CE0jo9
h8DmbIPoa4DKM2QtfwG2H6be7vRZMB9q3wPhv9fB9sD4UHcvgIYHTF8CjD+r
8pk9AMqXrrw=
           "], "Children" -> 
          RawArray["Integer16",{{2, 37}, {3, 15}, {4, -13}, {5, 
            6}, {-1, -2}, {7, 11}, {-3, 8}, {9, -7}, {10, -6}, {-4, -5}, {-8, 
            12}, {13, -12}, {-9, 14}, {-10, -11}, {-14, 16}, {17, 25}, {
            18, -23}, {-15, 19}, {20, 24}, {21, -20}, {22, -19}, {-16, 
            23}, {-17, -18}, {-21, -22}, {-24, 26}, {27, -36}, {28, 36}, {-25,
             29}, {-26, 30}, {-27, 31}, {-28, 32}, {-29, 33}, {34, -33}, {-30,
             35}, {-31, -32}, {-34, -35}, {38, 46}, {39, 44}, {40, 
            41}, {-37, -38}, {-39, 42}, {-40, 43}, {-41, -42}, {
            45, -45}, {-43, -44}, {47, 48}, {-46, -47}, {49, -63}, {50, 62}, {
            51, 52}, {-48, -49}, {53, 54}, {-50, -51}, {55, 60}, {56, -57}, {
            57, -56}, {58, -55}, {-52, 59}, {-53, -54}, {
            61, -60}, {-58, -59}, {-61, -62}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 
            2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 
            1, 1, 2, 2, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 1, 6, 4, 3, 5, 1, 2, 3, 6, 6, 3, 4, 1, 2, 
            2, 5, 1, 5, 3, 5, 5, 1, 5, 1, 1, 5, 6, 2, 4, 3, 3, 1, 5, 4, 5, 1, 
            1, 3, 5, 1, 1, 6, 1, 4, 5, 6, 4, 1, 3, 6, 2, 2, 5, 1, 5, 2, 2, 3, 
            4}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYQCDByU9n/eDGBq7roDpk1Pfg+iGMoh4Q0bkbXsg7eBw
6TGIf6CY7x5Y/KnROzCdC5FXOAPRp3AKSmdCxaHmMBTI3gDRCVB9B6D0goVx
+8HiU9MegWiH2RB+QzZE/4JNEP6BtVDxOvYnYPNsIe5hqLQ4C1LXoLnuDFg9
VPwB1D0PoPYwQN3hkAP1D9R9CxaYXwbbbw/Rt6AU6t7NEPseVPodBqk7oMZx
Bawe5i+YPQpPweoVFlbfBYufhdh7wM14E4if8CnvIYhmsIOafxoaPgL/n4LV
F64Bh0uDXOah/Ujh6PBQBuyfhAcQWgEa/g73jb4hm3fgEUTe4dT7c2B//PW/
AeaDzAcAtQ2qgw==
           "], "Children" -> 
          RawArray["Integer16",{{2, 40}, {3, 24}, {4, 15}, {-1, 5}, {6, 
            7}, {-2, -3}, {8, 14}, {9, 12}, {10, -7}, {-4, 11}, {-5, -6}, {-8,
             13}, {-9, -10}, {-11, -12}, {16, 19}, {17, -16}, {
            18, -15}, {-13, -14}, {20, -22}, {21, -21}, {-17, 22}, {-18, 
            23}, {-19, -20}, {25, 35}, {26, -33}, {27, -32}, {28, -31}, {-23, 
            29}, {-24, 30}, {-25, 31}, {32, -30}, {33, 
            34}, {-26, -27}, {-28, -29}, {36, -39}, {37, 38}, {-34, -35}, {
            39, -38}, {-36, -37}, {41, 58}, {-40, 42}, {43, 50}, {44, 
            45}, {-41, -42}, {46, 48}, {47, -45}, {-43, -44}, {
            49, -48}, {-46, -47}, {51, -57}, {52, 53}, {-49, -50}, {54, 
            56}, {-51, 55}, {-52, -53}, {57, -56}, {-54, -55}, {59, -61}, {
            60, -60}, {-58, -59}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 
            2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 
            2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 
            2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 1, 2, 5, 5, 1, 3, 1, 2, 5, 4, 5, 5, 6, 6, 
            6, 1, 4, 1, 3, 1, 1, 4, 2, 6, 6, 1, 5, 1, 2, 3, 3, 1, 5, 4, 1, 3, 
            5, 4, 2, 4, 6, 5, 5, 3, 5, 5, 2, 2, 1, 2, 4, 4, 6, 6, 4, 5, 4, 2, 
            1, 2, 4, 5, 6, 3}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZAADhX/+N+xBDI1jb/cDqQVH3p8D07aXHoNoBSi94Pva
JhDdoJh5CEQn/JyxCqRvwVOZMyC6AaZe4P9TEP+AA4TvYA+hGU5PfQ825ySU
hvITzie8Bql/8DHvIYhWaD79GWzeH4i7HKScboLlj3/4Z49kfsN5qDvZ8h6D
xaHmNpzf+gPsDqj9C+aoMhwA6X9i9A7sjuzI22D9GRA6gYP5JtgddlD1pT2f
we4Wf3MZLJ4FVQ+VTyiDyC94DDHvAFT9Aaj9D2D+hdIOUPvg5sPC6RlE/wIo
7dAsf8QeyZ0wexqgtAI7xJ8HOKD+hdqbsCpuP7I7HjyF6H8g/Pc6Mh/mL4at
EPULoOY5gPwHAMZ0waY=
           "], "Children" -> 
          RawArray["Integer16",{{2, 26}, {3, 5}, {-1, 4}, {-2, -3}, {6, 22}, {
            7, 8}, {-4, -5}, {-6, 9}, {10, -20}, {11, 21}, {12, 20}, {-7, 
            13}, {14, 16}, {-8, 15}, {-9, -10}, {17, 18}, {-11, -12}, {
            19, -15}, {-13, -14}, {-16, -17}, {-18, -19}, {23, -25}, {-21, 
            24}, {-22, 25}, {-23, -24}, {27, 51}, {28, 31}, {29, 
            30}, {-26, -27}, {-28, -29}, {32, 42}, {33, 36}, {34, -33}, {
            35, -32}, {-30, -31}, {37, 40}, {38, -37}, {
            39, -36}, {-34, -35}, {-38, 41}, {-39, -40}, {43, 49}, {-41, 
            44}, {45, 46}, {-42, -43}, {-44, 47}, {48, -47}, {-45, -46}, {-48,
             50}, {-49, -50}, {52, 62}, {53, 55}, {54, -53}, {-51, -52}, {56, 
            61}, {57, 60}, {58, 
            59}, {-54, -55}, {-56, -57}, {-58, -59}, {-60, -61}, {
            63, -66}, {-62, 64}, {-63, 65}, {-64, -65}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 
            1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 
            1, 1, 2, 2, 2, 2, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 2, 6, 1, 2, 4, 4, 3, 6, 4, 1, 3, 2, 2, 
            5, 5, 6, 4, 5, 1, 3, 3, 6, 3, 6, 5, 1, 1, 1, 5, 4, 5, 6, 5, 4, 3, 
            5, 6, 1, 6, 6, 2, 6, 2, 5, 2, 5, 3, 2, 1, 4, 1, 2, 1, 4, 4, 5, 1, 
            2, 3, 2, 5}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZ4CAk1Pf7wdSC57KnAEJPbgGoRXOQsQT3sgxHADRj43e
gfgMpT2fweqhtEJm5G2Q+gNQcxTKIOIHivnugWiHbIi8whOI/gdQ2sHh0mOw
eTD6FNQdUP0PbCHiCQ2ZF8Hqc6D2QO1bcBpqXxaEnwDlP7CD6nuhfQ3sjpiK
j2D9HsGNYP1Q+QNC/5+CzYHZAzMPKr/gQ95DkHyDVuYhMB8q7gBzp2jWC5C8
Ayz8YP6HhtMCzrzHYPOfQflr4/aD3fcUwm9YAeEvSIO6Hyr+oMzpNZiGhm9D
xm6Ie6DhxlDPfQ7sDmg4OUDVMWyDmv8u7w/Ene/B6hp++9+AhBeEv2AZUB0A
ET6/yA==
           "], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, -42}, {4, 33}, {-1, 5}, {6, 
            7}, {-2, -3}, {8, 29}, {9, 22}, {10, 12}, {-4, 11}, {-5, -6}, {13,
             17}, {14, 15}, {-7, -8}, {16, -11}, {-9, -10}, {18, 
            19}, {-12, -13}, {20, 21}, {-14, -15}, {-16, -17}, {23, 28}, {24, 
            25}, {-18, -19}, {-20, 26}, {
            27, -23}, {-21, -22}, {-24, -25}, {-26, 30}, {-27, 31}, {-28, 
            32}, {-29, -30}, {34, -41}, {35, 38}, {36, -34}, {
            37, -33}, {-31, -32}, {39, -40}, {40, 41}, {-35, -36}, {
            42, -39}, {-37, -38}, {44, 59}, {45, -58}, {46, 47}, {-43, -44}, {
            48, 49}, {-45, -46}, {-47, 50}, {51, 52}, {-48, -49}, {53, 
            57}, {-50, 54}, {55, 56}, {-51, -52}, {-53, -54}, {
            58, -57}, {-55, -56}, {-59, 60}, {61, -64}, {62, -63}, {
            63, -62}, {-60, -61}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 
            1, 2, 2, 2, 2, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 2, 1, 4, 3, 1, 3, 5, 3, 4, 6, 1, 4, 3, 1, 
            5, 1, 4, 5, 1, 6, 3, 1, 2, 1, 2, 5, 4, 6, 3, 5, 3, 3, 5, 6, 3, 2, 
            3, 1, 1, 3, 1, 4, 5, 1, 5, 3, 6, 5, 4, 4, 1, 1, 4, 6, 1, 1, 5, 1, 
            4, 2, 2, 5, 4, 2}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZAADBdtLj/cD6QPPjN6BaIbaebdAtENpz2cQveCX/w17
IP1A4SmYn/ANwl8A1eegk3kIRDd8zHsIEk84PfU9WF/H4nsgvsMHiLiCBkTd
g3l9W0G0gj3U3rfvjoDlP0HV2UHEE84nvAbbAzWvISPyNoh/oIfpA5h+CnGv
g6/8EbD8uffnwPpg+ssg7k84CdGvkAvV7wC1NwfCd8iG0A1Q8QVQ9QuyIOIM
UHsaMiH8BZniz8D6Yyo+gs2FmsPwbssGsP9KIPYe2Bi3H2y/5oyrYHozhK8A
tY+BPe8x2L8bIOIN0PCGuVsh6MRhsP8+PL4Bdg9UnIEDqk989SWwukkPwO5W
WAi1z/znZbD9Av+fQuIDEi4OT2TOgO2FqjsgCJFfcAIoDwB76b6d
           "], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
            22}, {-4, 7}, {8, -20}, {9, 21}, {-5, 10}, {11, 15}, {12, 
            13}, {-6, -7}, {-8, 14}, {-9, -10}, {-11, 16}, {17, 
            18}, {-12, -13}, {-14, 19}, {-15, 20}, {-16, -17}, {-18, -19}, {
            23, 27}, {24, 26}, {25, -23}, {-21, -22}, {-24, -25}, {28, 39}, {
            29, 30}, {-26, -27}, {31, -37}, {-28, 32}, {33, -36}, {
            34, -35}, {-29, 35}, {36, -34}, {37, -33}, {-30, 
            38}, {-31, -32}, {40, 41}, {-38, -39}, {-40, 42}, {-41, -42}, {44,
             60}, {45, 49}, {46, 48}, {47, -45}, {-43, -44}, {-46, -47}, {-48,
             50}, {51, 58}, {52, 56}, {53, -53}, {54, -52}, {-49, 
            55}, {-50, -51}, {57, -56}, {-54, -55}, {59, -59}, {-57, -58}, {
            61, 63}, {-60, 62}, {-61, -62}, {64, 
            65}, {-63, -64}, {-65, -66}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 
            1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 
            2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 
            1, 1, 2, 2, 2, 1, 2, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 2, 5, 6, 3, 1, 5, 6, 2, 3, 4, 2, 5, 2, 5, 
            2, 1, 1, 1, 1, 5, 5, 1, 1, 2, 3, 1, 3, 5, 2, 6, 5, 1, 1, 4, 3, 6, 
            5, 3, 6, 4, 6, 4, 1, 5, 5, 6, 2, 3, 3, 1, 3, 3, 3, 6, 2, 2, 4, 6, 
            5, 3, 2, 3, 2, 5, 6, 5, 1}], 
          "NumericalThresholds" -> CompressedData["
1:eJw1UT1LA0EUXKt0Wtim2FQWWtlrttBW8aPRQhdFYhTORi1lf4Cd2Ni4Nkdq
bYU7tEnIoZA0BiGsJCeCYARBEQR137y9Zpi3M7M770obe4tbQ0KIGUGf2z/+
SP5R9yffPIqpVs+jy04HxHdWHsukK957rqZxnjb4PIfPsE4dIC99xtyVodfM
NfsVc7Vca5Ouu/lKvpOR2KOsTHQIz9YSj/YCaI4KfZovnZPecI6t4n69Olen
vG1wccV+7mcLUc/PJfc08fgt5UXrTfKF91e4TxM9rYJe7vKcc+wh9JL3Yd+j
J8r/Gb6jPO6r2R/ydF7MSPc1/0D4CUyvF7rUo1S9oXeMAW1A9osO/LoxoHvk
6G9OnP9b2LP+Rq7NoDOB18FtjP1I7uNq4G725TL5AwOVyc4=
           "], "Children" -> 
          RawArray["Integer16",{{2, 42}, {3, 32}, {4, 20}, {5, 7}, {-1, 
            6}, {-2, -3}, {8, 18}, {9, 16}, {10, 15}, {11, 13}, {
            12, -6}, {-4, -5}, {-7, 14}, {-8, -9}, {-10, -11}, {-12, 
            17}, {-13, -14}, {-15, 19}, {-16, -17}, {21, 27}, {22, -24}, {23, 
            25}, {24, -20}, {-18, -19}, {-21, 26}, {-22, -23}, {28, 
            29}, {-25, -26}, {-27, 30}, {31, -30}, {-28, -29}, {33, 39}, {
            34, -37}, {35, -36}, {36, -35}, {-31, 37}, {-32, 
            38}, {-33, -34}, {40, 41}, {-38, -39}, {-40, -41}, {43, 63}, {44, 
            48}, {-42, 45}, {46, 47}, {-43, -44}, {-45, -46}, {49, -62}, {50, 
            57}, {51, -54}, {52, 54}, {53, -49}, {-47, -48}, {55, -53}, {-50, 
            56}, {-51, -52}, {58, -61}, {59, 62}, {60, 
            61}, {-55, -56}, {-57, -58}, {-59, -60}, {64, 66}, {
            65, -65}, {-63, -64}, {-66, 67}, {68, -69}, {-67, -68}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 
            2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
            1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 1, 2, 5, 2, 6, 1, 3, 2, 1, 5, 4, 2, 6, 
            1, 1, 6, 2, 6, 3, 1, 6, 3, 1, 5, 2, 5, 5, 1, 2, 5, 5, 5, 4, 6, 3, 
            3, 5, 5, 4, 2, 4, 4, 3, 3, 6, 4, 4, 1, 1, 3, 1, 2, 5, 2, 3, 1, 6, 
            1, 2, 1, 6, 6, 2, 3, 3, 4}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYYCAk1Pf7wdSDtdkztgD6YQ3cgwHQPxnRu9A4gccLj0G
0Q1QfsJpiHqGFp8rYH525G2wPpj8NOavYNoOom9Bac9nEP3gCUSe4RRE/4Gj
mhVgWujBJrD5UHMboOoOnIHwEzIh5isszj8M5kP1N+RAxA8U890D2wNz5+n3
58D2QPkJUNrB6wrYfw43If5kgLqvwR5Cw/gH3uc9BKuDumeBWuYhsDmaENrB
HlWfwieI+gcPIOY2fITySyD+ZsiDuNMhF0Iv4Mx7bI8ULg5lEFoh6ATYfw7r
NzwE86H+XjDr4DWwu6DhsmBT3H6we55CwzMDoo4ha/kLMJ8DYr5Cus5NsPoT
kPB44PoCHM4K7BD5BjYIzXAGKv/L/wbYPg2IPxlA/gAA0zPFog==
           "], "Children" -> 
          RawArray["Integer16",{{2, 44}, {3, 31}, {-1, 4}, {5, 11}, {-2, 6}, {
            7, 10}, {8, -6}, {-3, 9}, {-4, -5}, {-7, -8}, {12, 15}, {
            13, -12}, {14, -11}, {-9, -10}, {16, 25}, {17, -22}, {18, -21}, {
            19, 21}, {20, -15}, {-13, -14}, {-16, 22}, {23, -20}, {
            24, -19}, {-17, -18}, {26, 27}, {-23, -24}, {28, 30}, {
            29, -27}, {-25, -26}, {-28, -29}, {32, 34}, {
            33, -32}, {-30, -31}, {35, 42}, {-33, 36}, {37, 38}, {-34, -35}, {
            39, 40}, {-36, -37}, {-38, 41}, {-39, -40}, {
            43, -43}, {-41, -42}, {45, 61}, {46, 60}, {47, -58}, {48, -57}, {
            49, 56}, {50, 54}, {51, -48}, {52, 
            53}, {-44, -45}, {-46, -47}, {-49, 55}, {-50, -51}, {57, 
            59}, {-52, 58}, {-53, -54}, {-55, -56}, {-59, -60}, {62, 67}, {63,
             65}, {64, -63}, {-61, -62}, {66, -66}, {-64, -65}, {
            68, -69}, {-67, -68}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 
            2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 
            2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 1, 3, 1, 2, 2, 5, 3, 6, 6, 2, 3, 1, 2, 1, 
            3, 5, 1, 5, 4, 2, 3, 3, 4, 1, 6, 1, 6, 4, 2, 3, 4, 1, 6, 4, 3, 3, 
            3, 3, 1, 3, 6, 4, 2, 2, 3, 4, 3, 5, 1, 5, 2, 6, 4, 6, 4, 1, 4}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYoAA20uP94NojWNvQfSCX/437IF0w/nPP0F8h6dG70C0
whMo7QBRn/ANqu7k1PdgdacgdMIdmTMg8QeKmYfA4sf5noH4C55CxW87fADR
DJoQeQVHqHk/Z6wCiTvYQfgKwv+fgvgKj6H2ZkbeBstnQ+gFpT2fweaLv7kM
og+chtof9fwimA91F0zdAaj7H8DMKYOIM3BPv4KsfwHU3gO5EHUH/kL8mfAd
SstD/SUVkA/2z0+I+AO2vMdgeUGo/jPvz4HUNTyD2OuQBTHvAdQ9DekQfsPK
uP1g/u7Fm8H8FRB+AjTcYebC/JHADuHD3K+QrnMTLA6SBwB656gg
           "], "Children" -> 
          RawArray["Integer16",{{2, 37}, {3, 8}, {4, 5}, {-1, -2}, {-3, 6}, {
            7, -6}, {-4, -5}, {9, 17}, {10, 16}, {11, -13}, {12, 14}, {
            13, -9}, {-7, -8}, {15, -12}, {-10, -11}, {-14, -15}, {-16, 18}, {
            19, 35}, {20, 31}, {21, -28}, {22, -27}, {-17, 23}, {24, 28}, {25,
             27}, {26, -20}, {-18, -19}, {-21, -22}, {29, -26}, {-23, 
            30}, {-24, -25}, {-29, 32}, {33, 34}, {-30, -31}, {-32, -33}, {
            36, -36}, {-34, -35}, {38, 45}, {39, 41}, {-37, 40}, {-38, -39}, {
            42, 43}, {-40, -41}, {44, -44}, {-42, -43}, {-45, 46}, {47, 53}, {
            48, 50}, {-46, 49}, {-47, -48}, {51, -52}, {
            52, -51}, {-49, -50}, {54, 55}, {-53, -54}, {-55, 56}, {-56, 
            57}, {58, -59}, {-57, -58}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 
            1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
            1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 
            1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 1, 2, 3, 5, 6, 1, 6, 3, 1, 2, 4, 5, 2, 5, 
            4, 4, 3, 3, 5, 4, 6, 3, 1, 4, 2, 5, 3, 4, 4, 5, 1, 3, 3, 4, 6, 4, 
            6, 4, 2, 3, 5, 4, 4, 3, 1, 4, 3, 5, 6, 5, 6, 3, 1, 1, 1, 5, 1, 1, 
            4, 4, 1, 5, 3, 3, 4, 6, 6, 1}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZYAA20uP94NoQYP/INrhmswZeyB9IDPyNoheYAeVPzX1
PVh+yi4wP+EMhH/gh/8NkLqEnzNWgegH59+fA4k/KO35DKIbHCD6HZ4YvQPR
Co4Q/oEyiPwCKJ2QDbGPAUo/sIfqg5pzAGq/Qg5E3kGy5BlYHmbOU4j5CVD3
OshnHgK7433eQ7B/oHQC1NwF/z//BNunBlGXoAlV/xGizgFqXwKUD/Ovwyeo
eY8g4bQgDeruhXH7wf79AJWHunvBb2j4hLNuBfM/Q+QX/IKIP5gH0cfAlvcY
rG8VhP8AyneA+veB8N/r4HDoWvYC7K61n9+CzVsOUa9wlOc12BzZnSjhlgCL
h+zrb8H2Qt2pkAcxNwEaz7D4UuCA2ssOoRPMf17eDwDEgMom
           "], "Children" -> 
          RawArray["Integer16",{{2, 41}, {-1, 3}, {4, 28}, {5, 13}, {
            6, -10}, {7, 11}, {8, 9}, {-2, -3}, {10, -6}, {-4, -5}, {
            12, -9}, {-7, -8}, {14, 16}, {15, -13}, {-11, -12}, {-14, 
            17}, {-15, 18}, {19, 23}, {20, -20}, {-16, 21}, {
            22, -19}, {-17, -18}, {-21, 24}, {25, 26}, {-22, -23}, {-24, 
            27}, {-25, -26}, {29, -40}, {30, 32}, {31, -29}, {-27, -28}, {33, 
            40}, {34, 37}, {35, -33}, {36, -32}, {-30, -31}, {-34, 38}, {-35, 
            39}, {-36, -37}, {-38, -39}, {42, 50}, {43, 47}, {44, 
            45}, {-41, -42}, {-43, 46}, {-44, -45}, {-46, 48}, {
            49, -49}, {-47, -48}, {51, 52}, {-50, -51}, {53, 56}, {54, -55}, {
            55, -54}, {-52, -53}, {57, 58}, {-56, -57}, {-58, 59}, {-59, 
            60}, {61, 69}, {62, -68}, {63, -67}, {64, 68}, {65, -64}, {-60, 
            66}, {67, -63}, {-61, -62}, {-65, -66}, {-69, -70}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 
            1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 
            1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 
            2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 3, 6, 6, 3, 1, 2, 4, 1, 2, 2, 5, 1, 3, 1, 
            3, 4, 6, 5, 4, 1, 5, 2, 2, 5, 4, 5, 2, 6, 1, 5, 2, 4, 3, 1, 2, 2, 
            2, 2, 1, 1, 5, 1, 2, 2, 5, 3, 5, 6, 2, 6, 3, 5, 3, 6, 1, 2, 3, 1, 
            6, 1, 4, 4, 3, 1}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZICAk1Pf7wdSC77537AH0glQvsNpCM2glnkIRCu87LwB
Fn8ocwakruFD3kMQfWBNXTVI/ME1iPiBxxA6we7SY5B4wjTmryC6ITPyNkhc
ISbhN4h/AMpvEPj/FKwPai+DPUTfgtKez2D7QlZcBos7QMQdnhi9A7vnKYRu
gNrjAFW/AKqu4RlEHuaPBXtnnEY2p+ExVL4Moi8hB+KeBZniz8D+gdrz4Cma
feffnwPzxVdfAssL/70O1r8tbj+Y/5P3CbL5DVBzGmZB5BkyIPY4rIbwD7Dn
PQbzYfbA+NlQ98yHqGuA6nvABpFnkInfbY/kzgVQ9Q/W7vsMDn+oOQ9mWxwB
q4eGswOUfvATEt8NAae27QcAvwW9Aw==
           "], "Children" -> 
          RawArray["Integer16",{{2, 39}, {3, 12}, {4, -10}, {5, 10}, {-1, 
            6}, {-2, 7}, {8, -6}, {-3, 9}, {-4, -5}, {-7, 11}, {-8, -9}, {13, 
            32}, {14, 16}, {-11, 15}, {-12, -13}, {17, 23}, {18, -20}, {19, 
            21}, {-14, 20}, {-15, -16}, {22, -19}, {-17, -18}, {24, 30}, {25, 
            29}, {26, -25}, {27, -24}, {
            28, -23}, {-21, -22}, {-26, -27}, {-28, 31}, {-29, -30}, {
            33, -38}, {34, 37}, {35, -34}, {36, -33}, {-31, -32}, {-35, 
            38}, {-36, -37}, {40, 62}, {41, 55}, {42, 54}, {-39, 43}, {44, 
            48}, {45, -44}, {46, -43}, {47, -42}, {-40, -41}, {49, 
            50}, {-45, -46}, {51, 52}, {-47, -48}, {
            53, -51}, {-49, -50}, {-52, -53}, {56, 57}, {-54, -55}, {58, 
            59}, {-56, -57}, {60, -61}, {-58, 61}, {-59, -60}, {-62, 
            63}, {-63, 64}, {65, -66}, {-64, -65}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 
            1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
            1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 
            1, 1, 1, 2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 1, 6, 5, 3, 2, 4, 3, 5, 3, 4, 5, 2, 5, 
            2, 2, 6, 5, 4, 1, 3, 4, 1, 6, 3, 6, 2, 1, 5, 3, 2, 2, 6, 1, 6, 2, 
            3, 2, 6, 3, 2, 4, 4, 2, 6, 4, 6, 4, 2, 1, 2, 1, 3, 3, 5, 1, 3, 2, 
            1, 4}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZQCDA9vj9u8H0gtKez6D6ISIg39B9IGTU9+DaAa7S49B
tEJO5G17EP+J0TswvwyqHiq+AKou4Zv/DRD/wfu8h2DaASL+4JbMGRBfwR7C
Z3gK4R+AiZ+G2PcAKr/gA0S/wh++c2BzlTIPgeU/QsQZqp9/Bpt/CqKvIQPq
Piif4cJ7sL4DbsabkN134AfEfQ2nIfIJJ6E0VN8BAcdLYHug7lF4CvHvg0yo
P59B+A5Q+YRsqL2PoeLQcHSAhs8CaHgxcOY9BuuHhRs7hJ8AVQ8P13Sdm5Dw
gfAXvNq6FUxD7VFIh9q3FBpvO92vg9VnQcQdTkH9E84K1ndA8P9TewAIrbP+

           "], "Children" -> 
          RawArray["Integer16",{{2, 42}, {3, 11}, {-1, 4}, {5, 8}, {-2, 6}, {
            7, -5}, {-3, -4}, {9, 10}, {-6, -7}, {-8, -9}, {12, 26}, {13, 
            15}, {-10, 14}, {-11, -12}, {16, 21}, {17, -18}, {18, 20}, {-13, 
            19}, {-14, -15}, {-16, -17}, {-19, 22}, {23, -24}, {
            24, -23}, {-20, 25}, {-21, -22}, {27, 34}, {28, 32}, {-25, 29}, {
            30, -29}, {31, -28}, {-26, -27}, {-30, 33}, {-31, -32}, {
            35, -41}, {36, 38}, {-33, 37}, {-34, -35}, {39, 40}, {-36, -37}, {
            41, -40}, {-38, -39}, {43, 59}, {44, 56}, {45, 49}, {46, 48}, {
            47, -44}, {-42, -43}, {-45, -46}, {50, 55}, {51, -52}, {52, 
            53}, {-47, -48}, {-49, 54}, {-50, -51}, {-53, -54}, {57, -58}, {
            58, -57}, {-55, -56}, {60, -62}, {-59, 61}, {-60, -61}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 
            1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
            2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 
            1, 2, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 6, 1, 5, 6, 4, 1, 1, 3, 4, 2, 5, 5, 4, 5, 
            5, 5, 4, 2, 5, 5, 4, 6, 2, 1, 2, 2, 2, 4, 4, 2, 6, 1, 1, 4, 2, 1, 
            4, 1, 5, 6, 6, 6, 5, 2, 5, 4, 4, 1, 1, 5, 1, 4, 5, 2, 3, 6, 5, 1, 
            5, 4, 6, 5, 2, 1, 6, 1, 5, 5}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZQADh3Pvz+0H0gonp74H0Qd2GD0E0Ql2lx6D6VMQ8Yay
ns9g+vzWHyB6wRxVhgNA+kFO5G17kHgpVP6p0TuwvC1EfwOUfgCVV3CE8Bmg
5h+AyjPA9D+D6G+wh4grOEBoB5j+0xD3LHgMUecQsuIy2JwnUD7UfgaYOVB9
BwT/P7VHMp+BPe8xiP/geirEv+Y/IeZA/QnXXzIRbP8CmPsydkPcszBuP1gc
ag4DG9Q8KM2wDSIPc8+CLRA+LBxgNMPk1K0g9Q6Xyjcjh1vCu3V/wPwPeQ/t
kcQf3JA5A+Ir/PS/AfYPLN6g4eVgo/8BLA8Lv48Q/QlnIOpg4Z7wAGpO4ufP
YHlouD5oPXUU7B5YvMwCuhsAOkvRYA==
           "], "Children" -> 
          RawArray["Integer16",{{2, 50}, {3, 30}, {4, 14}, {5, 12}, {6, 
            11}, {-1, 7}, {8, 9}, {-2, -3}, {10, -6}, {-4, -5}, {-7, -8}, {-9,
             13}, {-10, -11}, {15, 18}, {-12, 16}, {-13, 17}, {-14, -15}, {
            19, -28}, {20, 24}, {21, 23}, {22, -18}, {-16, -17}, {-19, -20}, {
            25, 29}, {26, 27}, {-21, -22}, {
            28, -25}, {-23, -24}, {-26, -27}, {31, -49}, {32, 34}, {-29, 
            33}, {-30, -31}, {35, 46}, {-32, 36}, {37, 39}, {
            38, -35}, {-33, -34}, {40, 43}, {41, -39}, {
            42, -38}, {-36, -37}, {-40, 44}, {-41, 45}, {-42, -43}, {47, 
            48}, {-44, -45}, {49, -48}, {-46, -47}, {51, 54}, {52, -53}, {-50,
             53}, {-51, -52}, {55, 67}, {56, 59}, {57, 
            58}, {-54, -55}, {-56, -57}, {60, 64}, {61, 63}, {-58, 
            62}, {-59, -60}, {-61, -62}, {65, 
            66}, {-63, -64}, {-65, -66}, {-67, 68}, {-68, 69}, {-69, -70}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 
            2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 
            1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 1, 6, 2, 5, 1, 3, 2, 5, 3, 3, 2, 5, 6, 5, 
            4, 4, 6, 6, 1, 1, 5, 4, 3, 6, 2, 3, 5, 6, 2, 5, 3, 3, 1, 2, 2, 5, 
            6, 2, 6, 2, 6, 4, 4, 2, 5, 3, 4, 5, 1, 4, 3, 3, 6, 3, 2, 5, 5, 4, 
            2, 5, 1, 6, 2}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYAADhXPvz+0H0gfeF96wBwmcnPoezH9m9A5ENzhcegyi
GWrn3QLRCRmRt0HqGs5D9D2whcgnZEHEGaB0wxOI/gd2UPlTEHMToOYdKO35
DDa3DEIfOA2RfwBT58d0EyzfbncALA/V9wCqXiEXYs8CzrzHYPug7oXZr7Ah
bj+YzwGRZ4DKOyyEiC9Ig+r/5Q/29wLtmVfB6p9C1CnA3L8Mqp4dYg4sXBSg
4fTgqswZsH1Qdz8Q+v8U7B5hCJ1wEhJOCtBweKCUeQjsv095D+2RwuOB0qeb
YHd8hIgf0IGoe6AFoR3OQMxfoAnhH3gAsfeAPTQ8ofHw4D1EP8NDqLtmQsOB
9TA4yh9Aw8PhFNBdAN4GvNI=
           "], "Children" -> 
          RawArray["Integer16",{{2, 40}, {3, 39}, {4, 23}, {5, 7}, {-1, 
            6}, {-2, -3}, {8, 9}, {-4, -5}, {10, -20}, {11, 16}, {12, -11}, {
            13, 14}, {-6, -7}, {-8, 15}, {-9, -10}, {17, -19}, {18, 22}, {-12,
             19}, {20, 21}, {-13, -14}, {-15, -16}, {-17, -18}, {-21, 24}, {
            25, 37}, {26, -34}, {-22, 27}, {28, 34}, {29, 31}, {
            30, -25}, {-23, -24}, {32, 33}, {-26, -27}, {-28, -29}, {
            35, -33}, {-30, 36}, {-31, -32}, {
            38, -37}, {-35, -36}, {-38, -39}, {41, 61}, {42, 46}, {43, 
            45}, {-40, 44}, {-41, -42}, {-43, -44}, {47, 58}, {48, -56}, {49, 
            57}, {50, 51}, {-45, -46}, {52, 55}, {-47, 53}, {-48, 
            54}, {-49, -50}, {56, -53}, {-51, -52}, {-54, -55}, {-57, 
            59}, {-58, 60}, {-59, -60}, {62, -65}, {63, -64}, {-61, 
            64}, {-62, -63}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 
            1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 
            1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 
            2, 1, 2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 3, 4, 2, 2, 4, 2, 1, 6, 6, 4, 5, 3, 3, 6, 
            6, 4, 5, 3, 4, 5, 4, 2, 3, 6, 5, 2, 6, 3, 5, 3, 3, 1, 1, 2, 1, 2, 
            5, 3, 6, 5, 1, 3, 3, 4, 2, 2, 2, 2, 6, 5, 4, 5, 3, 2, 3, 4, 3, 2, 
            3, 5, 2, 2, 5, 2, 4, 5, 5}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYYCAk1Pf7wdSC77537AH0Z/yHoLppzJnQHTCAwi94ANE
3OEmlL9j/WcwfQqq/zSEPvARoo7B7tJjEF9BLfMQmIaa/wCq3gGqvqGs5zOY
toWqz4i8DVYn9P8p2BxHiPiDEoi6A0+N3oH1p0PUMZyF2g+z78z7cyA6AWpP
QjZEXQJU/kAW1PxMCN2wTPswWB9f7x+wOx5DzZcseQaiGaD2KcDMz4Xaewbq
X5i5AnOfIdsHUwdzd8MziDkHoLQClE6Amn+ALe8x2J2b4/aD1ZdC9D1YCOEr
QN3N8ASqD2qPAzT8GKD2OUDlF8Dk50H0LzgBCxcI7QA1l+EChH9AEBLeDWug
9s0E0gBShMf9
           "], "Children" -> 
          RawArray["Integer16",{{2, 45}, {3, 17}, {4, 14}, {5, -11}, {6, 
            12}, {7, 9}, {8, -3}, {-1, -2}, {10, 11}, {-4, -5}, {-6, -7}, {
            13, -10}, {-8, -9}, {15, -15}, {16, -14}, {-12, -13}, {18, 
            19}, {-16, -17}, {20, 28}, {21, 26}, {22, 23}, {-18, -19}, {24, 
            25}, {-20, -21}, {-22, -23}, {27, -26}, {-24, -25}, {29, 42}, {30,
             36}, {31, -33}, {32, -32}, {33, -31}, {34, -30}, {-27, 
            35}, {-28, -29}, {-34, 37}, {38, 39}, {-35, -36}, {40, -40}, {-37,
             41}, {-38, -39}, {-41, 43}, {-42, 44}, {-43, -44}, {46, 62}, {47,
             48}, {-45, -46}, {-47, 49}, {50, 53}, {-48, 51}, {-49, 
            52}, {-50, -51}, {54, 60}, {55, 56}, {-52, -53}, {57, 
            58}, {-54, -55}, {-56, 59}, {-57, -58}, {-59, 61}, {-60, -61}, {
            63, 68}, {64, -67}, {65, -66}, {-62, 66}, {
            67, -65}, {-63, -64}, {-68, -69}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 
            1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 
            1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 
            2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 6, 5, 1, 6, 6, 6, 2, 5, 2, 6, 1, 2, 1, 1, 
            2, 3, 4, 2, 4, 2, 4, 4, 6, 2, 5, 5, 4, 1, 1, 4, 1, 3, 6, 5, 2, 1, 
            4, 2, 2, 3, 4, 6, 1, 1, 1, 5, 1, 1, 2, 6, 6, 3, 6, 1, 6, 6, 1, 2, 
            5, 6, 1, 3, 5, 5, 6, 6, 1}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYQCDByU9n/cDaYWTU9+DaAe7S49B9AOvT2fB/NNQ8TMQ
egGUZnhi9A6szwGifsEzCH8BVH3ClW+XwXyougPFfPfA4pOWg8UTnkLEGbIi
b9uDzC+FuCPhMdRcGB9qrkMZhN8AFWdgy3tsj2R+w+y4/WDxzRC6Aaa+Zc4D
sPjk1K0g9QlQcYf1Gx6C3ZcNsZ+BHWJewgaIfgeoOxg0dl3Zj+S+AzB3Q+kE
qH6HD3kPQfQDaDgemN30DOy+jsX3QLRC4ufPYHW2kPBqOP/5J5iO+LMRLH5H
5gyIPgANX7g5CpmHwPacgob7dftzYHug4QwLb4fjfGD7Ep5CzGmwh9hzAGpO
wtujh8Hu0YaYpzAT4s8HKyD0Amh4KnBA6AeuLzbtBwDDlM1s
           "], "Children" -> 
          RawArray["Integer16",{{2, 42}, {3, 23}, {4, 21}, {5, 16}, {6, 12}, {
            7, 9}, {8, -3}, {-1, -2}, {10, 11}, {-4, -5}, {-6, -7}, {13, 
            15}, {-8, 14}, {-9, -10}, {-11, -12}, {-13, 17}, {-14, 18}, {19, 
            20}, {-15, -16}, {-17, -18}, {22, -21}, {-19, -20}, {24, 37}, {25,
             26}, {-22, -23}, {27, 36}, {28, 30}, {-24, 29}, {-25, -26}, {
            31, -33}, {32, 34}, {-27, 33}, {-28, -29}, {-30, 
            35}, {-31, -32}, {-34, -35}, {38, -41}, {39, 40}, {-36, -37}, {
            41, -40}, {-38, -39}, {43, 47}, {44, -46}, {45, 
            46}, {-42, -43}, {-44, -45}, {48, 64}, {-47, 49}, {50, 54}, {
            51, -52}, {-48, 52}, {-49, 53}, {-50, -51}, {55, 59}, {-53, 
            56}, {-54, 57}, {-55, 58}, {-56, -57}, {60, -63}, {61, 63}, {-58, 
            62}, {-59, -60}, {-61, -62}, {65, -69}, {66, -68}, {-64, 
            67}, {-65, 68}, {-66, -67}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 
            2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 
            2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 6, 2, 5, 6, 6, 1, 6, 3, 6, 4, 5, 1, 5, 5, 
            2, 5, 1, 5, 4, 2, 5, 3, 2, 2, 3, 2, 1, 2, 2, 5, 5, 1, 6, 5, 1, 1, 
            6, 1, 2, 1, 4, 2, 3, 4, 4, 5, 1, 4, 5, 1, 6, 4, 3, 5, 3, 5, 1, 4, 
            6, 4, 1, 2, 4, 2, 4, 1, 2, 2, 1}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYwCDA5fen9sPpBVOTn0Pog88M3oHohscLj0G0QvOQMQb
TkNoh3fiB8A0jJ8dedsepA7GL+v5DFZvB9H/wOvTWbC4PYTvABU/8ARqD4xf
zHcPbJ8tVF0p1ByYOqj+A5kQ+xKg4g8eQ2iGLKg7oO5fsG3bGbC6pxC+A8yc
2XH7wf5dCKEd1m94CFbPnvcYrH8jVJwz4ibYfKcYsHwCG1R+1sFrYP1QexKi
/E6A7Yf6G+YvWLg0QP0BCxcHqP8Sks1+ge39lPcQ7E5oeCu8WPMUrA8aHwkf
IPIKmpmHwObDwkEHwleA8hMKC8DqHnyEqGc4C9Gv8BnCf2D4+AXY/Sch8f1A
6D/YngXXZMDhpCAA4R+QFTgCNu80RF3CcWj6uOLzYT8AJqvVaw==
           "], "Children" -> 
          RawArray["Integer16",{{2, 47}, {3, 31}, {4, 7}, {-1, 5}, {-2, 
            6}, {-3, -4}, {8, 26}, {9, 18}, {10, 14}, {11, 13}, {-5, 
            12}, {-6, -7}, {-8, -9}, {-10, 15}, {16, -14}, {
            17, -13}, {-11, -12}, {19, 23}, {20, -19}, {21, 
            22}, {-15, -16}, {-17, -18}, {-20, 24}, {-21, 
            25}, {-22, -23}, {-24, 27}, {-25, 28}, {29, -29}, {-26, 
            30}, {-27, -28}, {32, 45}, {33, 44}, {34, 36}, {
            35, -32}, {-30, -31}, {37, 38}, {-33, -34}, {-35, 39}, {-36, 
            40}, {41, 42}, {-37, -38}, {43, -41}, {-39, -40}, {-42, -43}, {
            46, -46}, {-44, -45}, {48, 65}, {-47, 49}, {50, 60}, {51, 
            52}, {-48, -49}, {53, -58}, {54, 55}, {-50, -51}, {-52, 56}, {-53,
             57}, {58, 59}, {-54, -55}, {-56, -57}, {-59, 61}, {62, 
            63}, {-60, -61}, {64, -64}, {-62, -63}, {66, 70}, {67, 
            68}, {-65, -66}, {-67, 69}, {-68, -69}, {-70, -71}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 
            1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 
            2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2}], "NominalSplits" -> {},
           "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 2, 6, 4, 1, 2, 2, 3, 4, 5, 3, 1, 2, 5, 
            5, 3, 1, 2, 3, 1, 3, 5, 6, 6, 3, 6, 2, 2, 6, 5, 3, 3, 1, 4, 4, 1, 
            3, 2, 2, 1, 1, 5, 5, 1, 3, 6, 4, 1, 1, 3, 6, 1, 2, 1, 2, 5, 4, 2, 
            4, 4, 6}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwY4CAk1Pf7wfRz43egegFT2XO2APpA1DxBaU9n0G0g/ib
yyD6wBOIuoRnENohJ/I2SL1DGURdgt2lx2B1mRDxhvNbf4DFH0PNh8ovsIfQ
DhkQdQov1jwF0Qmn358DiTf89L8B4i/Ysf4zWD4bqs4Bav5pqLvPQmgFhcxD
YHOh4gtg9p2EmPfgFFQd1N4DUHcv+A21Z9l8sP0LBP6D6QOf8h6C3SNj/AFs
L9Q/B55C/Q31f0JD5kWwO95t2QA2d03cfrD4ZgjtEOp8GCyeDtHPwJn3GDm8
GGR3gt2jcJTnNdidfyHucWCDqGuQ1PsFdscpiD8ULss+Q/Hfcog9sHg6AIsX
qPkPYPHHATQPAOTNuIs=
           "], "Children" -> 
          RawArray["Integer16",{{2, 43}, {-1, 3}, {4, -42}, {5, 32}, {6, 
            13}, {7, -9}, {8, 10}, {9, -4}, {-2, -3}, {11, 
            12}, {-5, -6}, {-7, -8}, {14, 16}, {15, -12}, {-10, -11}, {17, 
            24}, {18, 22}, {19, 21}, {20, -15}, {-13, -14}, {-16, -17}, {
            23, -20}, {-18, -19}, {25, 27}, {26, -23}, {-21, -22}, {-24, 
            28}, {-25, 29}, {30, 31}, {-26, -27}, {-28, -29}, {33, 42}, {34, 
            38}, {35, 37}, {36, -32}, {-30, -31}, {-33, -34}, {39, 
            40}, {-35, -36}, {-37, 41}, {-38, -39}, {-40, -41}, {44, 51}, {45,
             49}, {46, -47}, {-43, 47}, {48, -46}, {-44, -45}, {
            50, -50}, {-48, -49}, {52, 56}, {-51, 53}, {54, -55}, {
            55, -54}, {-52, -53}, {57, -63}, {58, 59}, {-56, -57}, {-58, 
            60}, {-59, 61}, {-60, 62}, {-61, -62}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 
            1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 
            1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 
            2, 1, 2, 1, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 2, 3, 3, 6, 5, 6, 6, 6, 5, 3, 1, 3, 3, 
            2, 4, 2, 2, 6, 2, 2, 1, 3, 1, 4, 1, 6, 1, 6, 2, 3, 2, 4, 5, 6, 1, 
            4, 6, 4, 6, 1, 1, 4, 2, 3, 5, 4, 4, 2, 5, 5, 5, 5, 5, 1, 6, 5, 5, 
            6, 1, 1, 1, 1, 4, 2, 2, 1, 1, 5, 5, 4, 5}], 
          "NumericalThresholds" -> CompressedData["
1:eJxVUD1LQ0EQXBtLCdYW0drKH6DXWgXERgQ5BL8hgqAIae4H2ImogcB1BkEJ
CmnzxIDRRAsjUUyT8JIgQhI1hY0S3+3OK7xmmJndvZ0dXdycWRogommSd3vQ
zQWgKiOlqQC91kSH+dpc1XG1IkglqfMmH33GsA+6uhfU8NUG+vOJuuN2VbjG
XFPsPjidhvtN1m+EW1/+9+4wN9ynAf19/5zrfmMvPH82XXbc7Oz12I+kWrwH
9rPZLOey4LrxP5/3LLntV7zOObG/LiJvu5NnHb4K9/oQbsJ/dsfLjkd/hjiH
/hTfvmL+Mv5LLuScH40gN/LbguTXGfFraeCRoDpEH/pVRl9z/WDc5/0uRDcp
QQvd1Mb4/rR+8sb1Z702+/2tb56zLXejJu4CpNj8E9clryrML2WuPgXi3uY4
4H8qCdpv
           "], "Children" -> 
          RawArray["Integer16",{{2, 46}, {3, 33}, {4, 8}, {5, 
            6}, {-1, -2}, {-3, 7}, {-4, -5}, {9, 25}, {10, 11}, {-6, -7}, {12,
             22}, {13, 21}, {14, 15}, {-8, -9}, {16, 19}, {-10, 17}, {
            18, -13}, {-11, -12}, {20, -16}, {-14, -15}, {-17, -18}, {23, 
            24}, {-19, -20}, {-21, -22}, {26, 29}, {-23, 27}, {-24, 
            28}, {-25, -26}, {30, -31}, {-27, 31}, {-28, 
            32}, {-29, -30}, {-32, 34}, {35, 45}, {36, 43}, {37, 39}, {
            38, -35}, {-33, -34}, {40, 41}, {-36, -37}, {-38, 
            42}, {-39, -40}, {-41, 44}, {-42, -43}, {-44, -45}, {47, 54}, {48,
             53}, {-46, 49}, {50, -51}, {51, -50}, {-47, 
            52}, {-48, -49}, {-52, -53}, {55, -74}, {56, 73}, {57, 70}, {58, 
            59}, {-54, -55}, {60, -67}, {-56, 61}, {62, 67}, {63, 65}, {
            64, -59}, {-57, -58}, {66, -62}, {-60, -61}, {68, 
            69}, {-63, -64}, {-65, -66}, {-68, 71}, {-69, 
            72}, {-70, -71}, {-72, -73}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 
            1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 
            1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 
            1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 1, 1, 3, 3, 4, 4, 5, 4, 2, 2, 3, 2, 1, 6, 
            3, 6, 2, 4, 3, 1, 6, 2, 3, 6, 2, 1, 2, 3, 6, 6, 3, 1, 2, 4, 2, 6, 
            5, 4, 6, 5, 4, 2, 3, 3, 5, 1, 2, 6, 1, 3, 6, 2, 5, 1, 3, 5, 5, 4, 
            4, 1, 2, 1}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZwCDA9vj9u8H0gnJZr/A9Bs5hgNAukEj8xCIz6AJoRd8
zHsI0nLgPYR2sL/0GCT+ACrO8EDmDIhWgNIHMiNvg+lnRu/A5r7jOgqiFc5O
fQ8274f/DZB8wxko/wZUv/D/p2Aaqr/h/OefIPkDJyHqDjyFmLfgN0Q/TLzh
MUT8geOpw2D77kDMc1CFuL/hNFQdVL1CFsT8B/eSX4P1Qd3JUNbzGazuCYTv
AHWfgx3EvwmlEHkHqHkMDtBwKIGIL4Ca05ABMd8hB2rPQkg4M0xO3Qr2H8w+
9rzHIP6CtriHYH3ZEPUJHBBxB6g7DkyH6s/ig5gPNddhFlQcar6CACT8HsBo
1xebwO468f4c2P2smTf3AwAlPrhc
           "], "Children" -> 
          RawArray["Integer16",{{2, 42}, {3, 4}, {-1, -2}, {5, 12}, {
            6, -10}, {7, 9}, {-3, 8}, {-4, -5}, {10, 
            11}, {-6, -7}, {-8, -9}, {13, 31}, {14, 15}, {-11, -12}, {16, 
            17}, {-13, -14}, {-15, 18}, {19, 28}, {20, 27}, {21, 25}, {-16, 
            22}, {-17, 23}, {-18, 24}, {-19, -20}, {-21, 
            26}, {-22, -23}, {-24, -25}, {29, -29}, {-26, 30}, {-27, -28}, {
            32, 41}, {-30, 33}, {-31, 34}, {-32, 35}, {-33, 36}, {
            37, -39}, {-34, 38}, {39, -38}, {
            40, -37}, {-35, -36}, {-40, -41}, {43, 57}, {44, 46}, {-42, 
            45}, {-43, -44}, {47, 54}, {48, -52}, {-45, 49}, {-46, 50}, {51, 
            52}, {-47, -48}, {53, -51}, {-49, -50}, {55, -56}, {-53, 
            56}, {-54, -55}, {58, 63}, {59, 62}, {-57, 60}, {-58, 
            61}, {-59, -60}, {-61, -62}, {-63, -64}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 
            1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 
            2, 2, 2, 1, 2, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 3, 6, 6, 2, 3, 1, 1, 1, 3, 1, 6, 3, 5, 1, 
            5, 2, 1, 4, 4, 2, 1, 3, 2, 5, 6, 1, 2, 3, 1, 4, 6, 1, 2, 6, 5, 3, 
            1, 2, 3, 6, 6, 6, 4, 2, 4, 1, 2, 5, 3, 3, 6, 1, 4, 5, 3, 3, 2, 1, 
            6, 6, 2, 4, 6, 5, 3, 4, 2, 4, 6, 1, 6}], 
          "NumericalThresholds" -> CompressedData["
1:eJxVUT1LA0EQHQWxs7AUi/MH2NjLrZ2deJ2NLIKGqMRKGxH3B6S1lVXBzkrs
hByagMZ8oGCQHMiGMzaiiQYlaqGZjwPd5vFm3rz52LGFtWCxDwCmgZ6rjZb8
HtqluQjRDWRiRK+808r10FRbFUT7MXPnE+98ItfPhXPmJ13SfXPeFW9TiHAl
9V2Oh+omRh5m+9vI1dF87p//yFANEV4zDczr4Z8mzXXBebcdFEj/xX72ceIF
uZpkXyP9YGu3Tvokv8J7eVNBRP03sh1E75L1Kr/ZIHxgvSmKj8++Sb3JH7/T
nDHrwmWOh+JjBbXModa5jxO9EW4OD8rk3+S43eM7qFW5f0r6DfI/aJO+Jh+p
1/usB+nvJfvJ/OHp7L3/Zz8oMbqI/1m/8X2tzKnlfjCePiOd3B/qom8zV3IX
XdVPxNH/FzU32fo=
           "], "Children" -> 
          RawArray["Integer16",{{2, 59}, {3, 24}, {4, 16}, {5, 6}, {-1, -2}, {
            7, 9}, {-3, 8}, {-4, -5}, {-6, 10}, {11, 14}, {-7, 12}, {-8, 
            13}, {-9, -10}, {-11, 15}, {-12, -13}, {17, 19}, {
            18, -16}, {-14, -15}, {-17, 20}, {21, -22}, {22, -21}, {
            23, -20}, {-18, -19}, {25, 31}, {26, 30}, {27, -27}, {28, 
            29}, {-23, -24}, {-25, -26}, {-28, -29}, {-30, 32}, {33, 48}, {34,
             40}, {35, 39}, {36, 38}, {
            37, -33}, {-31, -32}, {-34, -35}, {-36, -37}, {41, 43}, {-38, 
            42}, {-39, -40}, {44, 45}, {-41, -42}, {46, -46}, {-43, 
            47}, {-44, -45}, {49, 53}, {50, -51}, {51, -50}, {-47, 
            52}, {-48, -49}, {54, 58}, {55, 57}, {
            56, -54}, {-52, -53}, {-55, -56}, {-57, -58}, {60, 65}, {
            61, -64}, {62, 63}, {-59, -60}, {64, -63}, {-61, -62}, {66, 
            72}, {-65, 67}, {68, 71}, {-66, 69}, {-67, 
            70}, {-68, -69}, {-70, -71}, {-72, -73}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
            2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 
            2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 
            1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 5, 2, 6, 6, 1, 2, 1, 2, 1, 5, 3, 5, 5, 5, 
            1, 1, 6, 5, 3, 4, 2, 2, 2, 6, 1, 1, 3, 2, 6, 3, 2, 3, 4, 2, 5, 1, 
            1, 1, 1, 5, 3, 1, 4, 3, 5, 2, 4, 1, 6, 6, 2, 5, 5, 6, 5, 4, 3, 2, 
            3, 4, 5, 2, 3, 2}], "NumericalThresholds" -> CompressedData["
1:eJw1UTEsQ1EUvSYmkVhJvhmLdKWvk10YLPJDRCXyDcL8R4PEwmLxWM107I9Y
yq+kLQsir35ZJEq6SIjou+f0LSfnnfvuOfe+seXNudU+ESmIHnc/kua7GJaW
yuUuJm9THx7jm8O2R0mBwV/67dFk0N3C/q9HW2nfqv5wqn2CQj1TvrH4qH1n
wE0emBAl91NTvjX4rP0q8LEGul3De7e91/E8pK+0mI884TtXLDVUr+++K6e/
cB7TmyfCfVBFbkcfswMfU8O9PcI+Ajt/rnOsDN+p3+jQleovs5rfnqAuLNKv
c6D+MftJL8cF616Zh7o7Pmsq9keZr7MDwJi5xeKdmeYer/kf3Kv7ipq6p8n1
S+VP+E+ZAE8+oQfce9iiPk7d838q0MIr
           "], "Children" -> 
          RawArray["Integer16",{{2, 54}, {3, 33}, {4, 6}, {5, -3}, {-1, -2}, {
            7, 9}, {8, -6}, {-4, -5}, {10, -31}, {11, 32}, {-7, 12}, {13, 
            25}, {14, 23}, {15, 21}, {16, -14}, {17, 19}, {
            18, -10}, {-8, -9}, {-11, 20}, {-12, -13}, {-15, 
            22}, {-16, -17}, {-18, 24}, {-19, -20}, {26, 31}, {27, -26}, {-21,
             28}, {29, 30}, {-22, -23}, {-24, -25}, {-27, -28}, {-29, -30}, {
            34, 40}, {-32, 35}, {-33, 36}, {37, -38}, {38, -37}, {-34, 
            39}, {-35, -36}, {41, 51}, {42, 48}, {-39, 43}, {-40, 44}, {-41, 
            45}, {46, 47}, {-42, -43}, {-44, -45}, {49, 
            50}, {-46, -47}, {-48, -49}, {52, -53}, {-50, 53}, {-51, -52}, {
            55, 65}, {56, 63}, {57, -61}, {58, 62}, {-54, 59}, {-55, 60}, {
            61, -58}, {-56, -57}, {-59, -60}, {
            64, -64}, {-62, -63}, {-65, -66}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 
            2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
            1, 1, 1, 2, 1, 1, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 5, 1, 4, 4, 6, 2, 6, 2, 4, 4, 6, 4, 4, 5, 
            4, 5, 4, 3, 4, 6, 2, 4, 2, 3, 4, 3, 5, 3, 1, 5, 3, 2, 4, 6, 1, 5, 
            1, 3, 4, 2, 3, 5, 4, 6, 5, 5, 1, 6, 1, 5, 5, 1, 5, 5, 3, 3, 1, 2, 
            2, 4, 6, 2, 4, 5, 3, 6, 1, 2, 6, 1, 1}], 
          "NumericalThresholds" -> CompressedData["
1:eJxNUD0sg1EUfRZhI9YOz2wzWbRvIxaJzSIvEqGR1kSMX2KQiJEQ05uMVonl
u7oV1UREKpYn9TUSST+toRKUvnsu8ZaTc+7POfeNLq7NLfUppaYVP/qYreV6
qCdv6nEPbfPkM6BPi49Bd4LmYj8NurrPXHF/BdyW0+uAeuQ7CXo0BDSXqOs2
5u0rkLLwMS3wKAfuhduxfClwEq7FN6rCh4axXyfIYTrI70Snd3B7uhDzXGH+
gfv2zthHG/jpFej2abzJfH33Lf7nZ7Y2G4ySj3SG+yiPOSf3UoJ5swydZL/5
3Sf/YOTuSFAdTrS4v4y6n2lXuE/mvaCduq0FdMKVzPtV+Oku7qXSyxf3S56/
XBvIYfuLdb63IXXJZw7kn2SfGkQf7Rw/s6/8jx2A7o7O7zhHd7sT/wACX9f1

           "], "Children" -> 
          RawArray["Integer16",{{2, 28}, {3, 22}, {-1, 4}, {5, 7}, {-2, 
            6}, {-3, -4}, {8, 12}, {-5, 9}, {10, -9}, {11, -8}, {-6, -7}, {13,
             17}, {14, -14}, {-10, 15}, {16, -13}, {-11, -12}, {18, 
            19}, {-15, -16}, {-17, 20}, {-18, 21}, {-19, -20}, {23, 
            24}, {-21, -22}, {25, -27}, {-23, 26}, {-24, 27}, {-25, -26}, {29,
             57}, {30, -56}, {31, 39}, {32, 34}, {-28, 33}, {-29, -30}, {
            35, -36}, {36, -35}, {37, -34}, {-31, 38}, {-32, -33}, {40, 46}, {
            41, -43}, {42, 44}, {-37, 43}, {-38, -39}, {-40, 
            45}, {-41, -42}, {47, 55}, {48, -52}, {49, -51}, {50, 54}, {
            51, -48}, {52, 53}, {-44, -45}, {-46, -47}, {-49, -50}, {-53, 
            56}, {-54, -55}, {-57, 58}, {-58, 59}, {60, 65}, {61, -64}, {62, 
            63}, {-59, -60}, {64, -63}, {-61, -62}, {66, -73}, {67, 69}, {
            68, -67}, {-65, -66}, {-68, 70}, {71, 
            72}, {-69, -70}, {-71, -72}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 
            1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 
            2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 5, 6, 2, 2, 1, 1, 1, 6, 2, 3, 4, 6, 1, 3, 
            4, 6, 3, 1, 1, 3, 5, 1, 3, 3, 4, 5, 1, 4, 6, 1, 2, 3, 2, 1, 6, 5, 
            1, 2, 4, 6, 6, 1, 6, 4, 2, 6, 2, 6, 3, 6, 4, 6, 5, 1, 2, 1, 5, 2, 
            5, 6, 6, 6, 2}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYACDBRfen9sP4m6N2w+iD5ye+h5EL3hm9A5ENzyB0jrx
V8Dib/6usAepn7LrMYifAFXvAFOfEXkbLF/a8xnMPwWRT2jj/QWmcyDyD6Dy
DlD9DzIh4gu6iz+C6APmsU1g8SyoefaXwPY1LNM+DHYnVH1DOoROKIOaZwdR
d0CN4wqyeAJ73mMw//mpu2BzHkPcq5ALNR/Kb9i9eDOIr8ABUb9gJSRcHDgj
boLNfQpRlwB1/wE2qDqo+Q2Ser/A+k9Cw0Xg/1Ow+TdlzoDVQf174DaEzwDl
M+hmHgK75wyEr/Ax7yFYHzT8DkD9tUC+6QbY/pOQeEtINgOH6wEHiLzDKWh8
zoe4ewHUfQ5Q9xyA0gnXgfYDAAcZu6w=
           "], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, 28}, {4, 8}, {-1, 5}, {
            6, -5}, {-2, 7}, {-3, -4}, {9, 15}, {10, 11}, {-6, -7}, {12, 
            13}, {-8, -9}, {14, -12}, {-10, -11}, {16, 26}, {-13, 17}, {18, 
            19}, {-14, -15}, {20, -23}, {21, -22}, {22, -21}, {23, 
            24}, {-16, -17}, {25, -20}, {-18, -19}, {27, -26}, {-24, -25}, {
            29, -42}, {30, 33}, {31, 32}, {-27, -28}, {-29, -30}, {34, 42}, {
            35, 41}, {36, -37}, {37, -36}, {38, 40}, {
            39, -33}, {-31, -32}, {-34, -35}, {-38, -39}, {-40, -41}, {44, 
            62}, {45, 59}, {46, 56}, {47, 48}, {-43, -44}, {49, 
            50}, {-45, -46}, {-47, 51}, {52, 53}, {-48, -49}, {54, 
            55}, {-50, -51}, {-52, -53}, {57, -57}, {-54, 58}, {-55, -56}, {
            60, -61}, {61, -60}, {-58, -59}, {63, 
            64}, {-62, -63}, {-64, -65}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 
            2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 
            1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 
            2, 2, 2, 2, 1, 1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 4, 1, 5, 4, 3, 2, 6, 2, 1, 3, 2, 1, 1, 1, 
            2, 3, 3, 6, 4, 3, 5, 2, 2, 4, 6, 4, 5, 5, 6, 2, 3, 2, 1, 5, 1, 1, 
            5, 4, 1, 5, 2, 2, 2, 2, 5, 1, 5, 1, 5, 1, 6, 3, 6, 1, 5, 4, 6, 3, 
            5, 2, 3, 2, 5, 3, 4, 5}], "NumericalThresholds" -> CompressedData["
1:eJw1UL8vREEY3GskGjlqiXdqUSh03Io/gOg08kLEIY6GehOtVv80CokolbcR
iTiXixxCIthznu7unVxCiPixM997zbyZ79uZ3cnNr88sZpRSkwqfSYr1vP/Z
3OmUPL+czljPx2oNz3WqF2bv/Z6NR1qeh+XdBPNXcr09cOrnZo17RnSbnah5
dIXjK5y7fgdGL+Kzwn29SozO6RtIbrAk+rjcR/Kt+Idb3HNdxQZyhdvDuRL0
fWLULXPJteJrxE8P9z1h/4D7Yfv5De92g3WczzNfddiXO2v/oDe5l4n7K/B7
JAa3RPVAtHLeNlvoKfVzGzdN5EvfwXdPFVx6UEPLJ9CFhwujX9C15GZ/Y/hX
OHc57qd9mYsEftHH1B16LpOHe3yn+qRue+njjv71P5ifyMw=
           "], "Children" -> 
          RawArray["Integer16",{{2, 39}, {3, 37}, {-1, 4}, {5, 25}, {6, 20}, {
            7, 9}, {8, -4}, {-2, -3}, {10, 14}, {11, -9}, {12, -8}, {
            13, -7}, {-5, -6}, {15, 19}, {16, -14}, {-10, 17}, {-11, 
            18}, {-12, -13}, {-15, -16}, {21, 24}, {-17, 22}, {
            23, -20}, {-18, -19}, {-21, -22}, {26, 30}, {-23, 27}, {
            28, -27}, {-24, 29}, {-25, -26}, {31, -35}, {32, 35}, {-28, 
            33}, {-29, 34}, {-30, -31}, {-32, 36}, {-33, -34}, {-36, 
            38}, {-37, -38}, {40, 54}, {41, 52}, {42, 49}, {43, -46}, {44, 
            48}, {-39, 45}, {46, -43}, {-40, 
            47}, {-41, -42}, {-44, -45}, {-47, 50}, {51, -50}, {-48, -49}, {
            53, -53}, {-51, -52}, {55, 63}, {-54, 56}, {57, 59}, {-55, 
            58}, {-56, -57}, {-58, 60}, {61, -62}, {-59, 62}, {-60, -61}, {
            64, -68}, {65, -67}, {-63, 66}, {67, -66}, {-64, -65}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 
            2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 
            1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 
            1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 1, 5, 2, 5, 5, 2, 4, 3, 4, 4, 2, 6, 1, 4, 
            4, 2, 3, 5, 4, 6, 3, 1, 5, 1, 6, 5, 5, 6, 4, 3, 1, 6, 2, 2, 1, 5, 
            3, 1, 1, 4, 2, 1, 3, 5, 4, 3, 3, 4, 1, 2, 6, 2, 2, 1, 2, 3, 1, 5, 
            4, 1, 5, 2, 6}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYICA7/437IHUAkXvu/tBwvaXHoPoA49kzoDFbSH8BjsI
/eAJRNzhQ95DEP1AK/MQWP1HCH/BJwid8ACi7sDJqe9B8gqnXj8G8RWE/j8F
0zB116DqlCDmOMDsg6mD6j+QE3kbrE47jfEAyB6oew4U890Dqz8NUQd3vwOE
XgDV/6C05zOYnwkxxyFkxWUQP+EUVP6x0TuwOVD6wKcXl5H97ZAL1Vdf8Axs
TuCrELD/SyDmNjyD6FMIOnEYzM+GqF+wLW4/2J4yiDqFLIh4ApSGuUuhVucO
WN8TqP3seeDwcoDyHzyF0AvsTp8F0QxQPgPUXQz/2r+D3bkVYt8CQUj4OVwq
3ww2HxquCqfenwPrA4UXAC6Lvlc=
           "], "Children" -> 
          RawArray["Integer16",{{2, 20}, {3, 5}, {-1, 4}, {-2, -3}, {6, 17}, {
            7, 16}, {8, -13}, {9, 10}, {-4, -5}, {-6, 11}, {12, 15}, {13, 
            14}, {-7, -8}, {-9, -10}, {-11, -12}, {-14, -15}, {-16, 18}, {-17,
             19}, {-18, -19}, {21, 62}, {22, 41}, {23, 36}, {-20, 24}, {25, 
            34}, {26, 30}, {27, 28}, {-21, -22}, {-23, 29}, {-24, -25}, {-26, 
            31}, {32, 33}, {-27, -28}, {-29, -30}, {-31, 35}, {-32, -33}, {37,
             40}, {38, 39}, {-34, -35}, {-36, -37}, {-38, -39}, {42, 60}, {43,
             44}, {-40, -41}, {45, 53}, {-42, 46}, {47, 49}, {-43, 
            48}, {-44, -45}, {50, 51}, {-46, -47}, {52, -50}, {-48, -49}, {54,
             57}, {-51, 55}, {56, -54}, {-52, -53}, {58, 
            59}, {-55, -56}, {-57, -58}, {61, -61}, {-59, -60}, {
            63, -65}, {-62, 64}, {-63, -64}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 
            1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 
            1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 
            2, 2, 2, 2, 1, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 1, 3, 6, 4, 5, 3, 5, 4, 6, 2, 4, 1, 5, 
            1, 2, 2, 2, 4, 4, 6, 2, 6, 5, 1, 5, 3, 1, 2, 2, 2, 5, 1, 2, 2, 5, 
            6, 2, 1, 2, 5, 2, 6, 5, 5, 2, 3, 3, 2, 2, 1, 6, 5, 3, 1, 6, 5, 6, 
            6, 6, 1, 6, 6, 5, 1, 2, 4, 2, 2, 1}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZwCDhO1x+/cD6QWlPZ9BdIJMPbMDkG7IiLxtD6QPnJz6
HixeBpV3uPQYRDvkQuQVHCH8A1B5hTMQ9QeeGL0Dq4OKOzTLHwGbZwvVf6T6
IVg9VF3DYwj94KrMGZC6BQL/n4LNh9IOp6HmPoOaC7XngR3UvCm7HiO7bwHU
/QnTmL+C9Z15fw4sfxJCH4DSC6D6E74fOwwWvw6x/8BTCM0AMx9qP8MdqPzb
d2D/JDyE8mHhApV3OAVRrwAVh7kz4RFUvULmIbB96hCaAep/hqdQWmPXFbA8
W95jkPoHsyHx5JAD8ZdDqDPYvQww+YXQeOSE8Bug9AIOKK098yrYfiifASY+
B6KPYa/+a7A7oeGk8CnvIdic89BwugSlJV/9swcA5EbQaQ==
           "], "Children" -> 
          RawArray["Integer16",{{2, 50}, {3, 19}, {4, -17}, {5, 7}, {-1, 
            6}, {-2, -3}, {8, 10}, {9, -6}, {-4, -5}, {-7, 11}, {-8, 12}, {13,
             16}, {14, -12}, {15, -11}, {-9, -10}, {-13, 17}, {-14, 
            18}, {-15, -16}, {20, 35}, {21, 31}, {22, 30}, {23, 27}, {-18, 
            24}, {-19, 25}, {26, -22}, {-20, -21}, {28, 
            29}, {-23, -24}, {-25, -26}, {-27, -28}, {32, -33}, {
            33, -32}, {-29, 34}, {-30, -31}, {-34, 36}, {37, -49}, {38, 48}, {
            39, 43}, {40, 41}, {-35, -36}, {-37, 42}, {-38, -39}, {44, 
            45}, {-40, -41}, {-42, 46}, {47, -45}, {-43, -44}, {
            49, -48}, {-46, -47}, {51, 66}, {52, 57}, {53, 56}, {-50, 54}, {
            55, -53}, {-51, -52}, {-54, -55}, {-56, 58}, {59, 65}, {
            60, -63}, {61, -62}, {62, -61}, {63, -60}, {
            64, -59}, {-57, -58}, {-64, -65}, {67, 69}, {-66, 
            68}, {-67, -68}, {70, 71}, {-69, -70}, {-71, -72}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 
            1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 
            2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 3, 2, 5, 5, 5, 6, 2, 2, 3, 2, 3, 1, 3, 6, 
            2, 1, 1, 2, 1, 1, 4, 2, 3, 5, 2, 4, 6, 4, 2, 3, 4, 1, 6, 3, 2, 3, 
            6, 6, 5, 1, 2, 4, 4, 5, 6, 6, 2, 3, 1, 4, 6, 5, 4, 6, 5, 3, 2, 5, 
            1}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYYCAk1Pf7wdSCt/9b9gDaYdnMmdAdIPDpccgcQY7CJ0A
pR+cgahPOPn+HFj+JkT9A63MQyC+w10If4E6hH+gxe4BmK8J4Suchug/8Mzo
Hdicd1xHwfQ+34dg82HiATfCwXSy2S+wvtKez2D5pxB5hszI22Bzoe46AHXP
Aai6A1B/NQj9fwpSp/AEoq8hF6IvoQyizkGy5Bmy+gNQcxOg9jyA8hmg/l4A
VZcADZ8FmeJg/Q3nIfbDzF0ApR8si9sP5nPkPQaHKyeEhpnPkAMx32FDwmGw
/YIQ9zJA1TtsgeqH+osBqp9hFVT8LyTeDjyBhLvCTIh4wi89BgcA3QWvDA==

           "], "Children" -> 
          RawArray["Integer16",{{2, 42}, {3, 16}, {4, -14}, {-1, 5}, {6, 
            15}, {7, -11}, {-2, 8}, {-3, 9}, {10, 11}, {-4, -5}, {12, 
            13}, {-6, -7}, {-8, 14}, {-9, -10}, {-12, -13}, {17, 21}, {18, 
            20}, {-15, 19}, {-16, -17}, {-18, -19}, {22, 24}, {
            23, -22}, {-20, -21}, {25, 30}, {26, -28}, {27, 29}, {
            28, -25}, {-23, -24}, {-26, -27}, {31, 41}, {32, -39}, {-29, 
            33}, {-30, 34}, {35, 39}, {-31, 36}, {37, 
            38}, {-32, -33}, {-34, -35}, {40, -38}, {-36, -37}, {-40, -41}, {
            43, 57}, {44, 47}, {45, 46}, {-42, -43}, {-44, -45}, {48, -56}, {
            49, 51}, {50, -48}, {-46, -47}, {52, -55}, {53, 55}, {-49, 
            54}, {-50, -51}, {56, -54}, {-52, -53}, {58, -61}, {59, -60}, {
            60, -59}, {-57, -58}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 
            2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 
            2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 
            2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 1, 3, 6, 3, 1, 5, 2, 5, 6, 2, 1, 2, 2, 6, 
            4, 2, 1, 3, 3, 6, 3, 2, 3, 1, 6, 1, 2, 1, 1, 2, 3, 1, 6, 4, 1, 4, 
            6, 4, 3, 1, 4, 3, 2, 4, 2, 4, 3, 6, 4, 2, 2, 6, 5, 1, 1, 2, 1, 2, 
            2, 4, 5}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYwADhZNT3+8H0gnv1v0B0Qt++d+wB9IOp6Di3yB8huv2
50B0gsOlxyDxB/dlzoD4CvYQvsIZiPqGe1Bxns+fweofQvgHnhm9A5sPNbeh
rOcz2ByoOEPtvFtgOjPyNlj9D4i9Cach6h1yIOINT6HqoXyHI9UPweZAzT0g
YHYFbP4TiDoHyZJnYPe5zn0Ntv/I+3NgPlS/QnTKVbB6aDg8eJ/3ECxeuOYG
mF8CcWcDZ95jsP2lUHfnQvQvsDt9FhxOUP80ZEPEGaD+egBVD3P3Aqi6A1B/
MrBDzE2AqkuAqkuAhQsHRH7Bhrj9YPFfegwOIHNbTx2FxBPEPwnhrFvB9AUo
/yyEbvgA8U/CSqB+ADndtyE=
           "], "Children" -> 
          RawArray["Integer16",{{2, 37}, {3, 4}, {-1, -2}, {5, 31}, {6, 14}, {
            7, 10}, {-3, 8}, {9, -6}, {-4, -5}, {-7, 11}, {12, 
            13}, {-8, -9}, {-10, -11}, {15, 19}, {16, -16}, {-12, 17}, {-13, 
            18}, {-14, -15}, {20, 22}, {21, -19}, {-17, -18}, {23, 29}, {-20, 
            24}, {25, -26}, {26, 27}, {-21, -22}, {-23, 28}, {-24, -25}, {
            30, -29}, {-27, -28}, {32, 34}, {-30, 33}, {-31, -32}, {-33, 
            35}, {-34, 36}, {-35, -36}, {38, 55}, {39, 54}, {40, 50}, {
            41, -47}, {42, 47}, {43, 44}, {-37, -38}, {-39, 45}, {-40, 
            46}, {-41, -42}, {-43, 48}, {49, -46}, {-44, -45}, {-48, 51}, {52,
             53}, {-49, -50}, {-51, -52}, {-53, -54}, {56, -63}, {57, -62}, {
            58, 61}, {59, -58}, {-55, 60}, {-56, -57}, {
            62, -61}, {-59, -60}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 
            1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
            2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 
            1, 2, 2, 2, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 2, 1, 5, 6, 3, 1, 1, 2, 1, 4, 4, 5, 3, 4, 
            3, 1, 5, 4, 6, 2, 1, 2, 2, 5, 3, 2, 3, 2, 2, 1, 5, 3, 4, 3, 2, 4, 
            2, 5, 3, 6, 4, 5, 6, 4, 5, 4, 3, 5, 2, 6, 4, 2, 2, 1, 3, 5, 1, 3, 
            6, 6}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZYAA20uP9wOpBU9lztiD+IIG/8F8O4h4wpmp70G0g2rm
IRDNcPvQJRD9wEzwMFj8GkSfwv+gsyB6gcD/pyDaobTnM0hewQFqfk7kbbA8
VDwByk9oyLyIbB9DGUTe4RTE3gVPjd6BxdvtDoD1PYPyoeIJMH3pEPMcoOIK
UPcqXIe4L+EOhG64xPgM7A6ovx8oQdV9ynsIVqcJ4Tecf38ORB8QhPhnAcze
zXH7wfKZUP9w5D0G0Qdg/l4IkT/ADhGHhUPCNoh4AtR/DHkQ/Q9WQs17DDUf
qq8Bpg/qH1g4JGjOuApWDwu/mVBzOa6B1Tf89L8BdhcbxByw+wCWYKn8
           "], "Children" -> 
          RawArray["Integer16",{{2, 36}, {3, 35}, {4, 5}, {-1, -2}, {6, 
            9}, {-3, 7}, {-4, 8}, {-5, -6}, {10, 28}, {11, -25}, {12, -24}, {
            13, 25}, {14, 15}, {-7, -8}, {16, 23}, {17, 20}, {18, -12}, {
            19, -11}, {-9, -10}, {21, 22}, {-13, -14}, {-15, -16}, {-17, 
            24}, {-18, -19}, {26, -23}, {-20, 27}, {-21, -22}, {29, 32}, {-26,
             30}, {31, -29}, {-27, -28}, {33, -33}, {-30, 
            34}, {-31, -32}, {-34, -35}, {37, 57}, {38, -56}, {39, 
            40}, {-36, -37}, {41, 47}, {42, -44}, {43, -43}, {44, -42}, {
            45, -41}, {46, -40}, {-38, -39}, {48, 52}, {49, -49}, {-45, 50}, {
            51, -48}, {-46, -47}, {53, 56}, {54, 
            55}, {-50, -51}, {-52, -53}, {-54, -55}, {58, -62}, {-57, 
            59}, {-58, 60}, {-59, 61}, {-60, -61}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
            1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 
            2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 
            2, 1, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 5, 2, 2, 6, 5, 6, 1, 3, 3, 6, 4, 3, 2, 
            2, 4, 5, 2, 3, 1, 4, 4, 2, 3, 1, 5, 6, 6, 3, 4, 1, 1, 2, 1, 5, 6, 
            3, 6, 2, 1, 5, 4, 2, 3, 1, 1, 1, 3, 5, 5, 6, 1, 1, 1, 3, 1, 2, 5, 
            6, 4, 5, 2, 4, 5, 2, 2, 1}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYYAA20uP9wOpBrnMQyCawQ7CX/BU5ow9SPwxhH5wZup7
sLw9RD7hNITfcInxGUieQQWif4E2lD4JVf8p7yFI3kEDIq7wAGLegWdG70D8
B6U9n0G0gwPU3JPvz4H1/fO/AbF34WuwPuH/T0H8BQIQ+sE5iLoDmZG3weaH
rLgMthfq/gNQ+2F0QhZE3YIyiH0PvD6dBdt7pPoh2PynEPcwXOoA23cA6p4F
UH8qZEPtgfITYOqN92wGmwO190EJxHyY/IF0iL4H11PB9jz4yfsErM8/+gpY
HczcrXH7wfZsg9ANHHmPweGfEAnW57B+A4TeLPga2d8NJ5XB/lZ4ArGvYSVU
PydE/wFoeB2YBRFPOA0Jt4YPkHh5AFN/HiK+ACp/4N2kG/sBd07OoA==
           "], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, 16}, {4, 14}, {5, -11}, {
            6, -10}, {-1, 7}, {8, 11}, {-2, 9}, {10, -5}, {-3, -4}, {-6, 
            12}, {13, -9}, {-7, -8}, {-12, 15}, {-13, -14}, {17, 19}, {-15, 
            18}, {-16, -17}, {20, -42}, {21, 25}, {-18, 22}, {23, 
            24}, {-19, -20}, {-21, -22}, {26, 29}, {27, -26}, {
            28, -25}, {-23, -24}, {30, 42}, {31, 33}, {-27, 32}, {-28, -29}, {
            34, 38}, {35, 37}, {-30, 36}, {-31, -32}, {-33, -34}, {39, 
            40}, {-35, -36}, {41, -39}, {-37, -38}, {-40, -41}, {44, 61}, {45,
             50}, {-43, 46}, {47, 48}, {-44, -45}, {-46, 49}, {-47, -48}, {51,
             52}, {-49, -50}, {53, 59}, {54, 56}, {55, -53}, {-51, -52}, {57, 
            58}, {-54, -55}, {-56, -57}, {60, -60}, {-58, -59}, {62, 66}, {
            63, -65}, {-61, 64}, {65, -64}, {-62, -63}, {-66, 67}, {-67, 
            68}, {-68, -69}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 
            2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 
            1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 
            1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 1, 1, 1, 1, 6, 3, 2, 5, 3, 2, 6, 4, 3, 
            4, 2, 3, 3, 4, 2, 6, 5, 3, 6, 1, 3, 5, 4, 2, 3, 1, 3, 6, 6, 4, 4, 
            5, 6, 2, 1, 6, 1, 1, 3, 3, 4, 6, 1, 3, 1, 4, 2, 5, 1, 6, 5, 2, 6, 
            3, 1, 2, 5, 5, 2, 4, 2}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZoAA20uP9wMph9KezyD6wA6jhyCagSPuGYhuOL/1B4hO
yD4Hoc9MfQ+iF+RE3rYH6Xtm9A7Ef2AHMUcBKt7wBCKuAFX/AGp+QjpEfkEZ
hL/gKUSdQy5EPAGqf8GnvIcQ82XOgOlTUHuh7lXIgqqHih8wj20CuzsTKu4A
UZfwAWKOwnWIOQ9UMw+BzRHNegFWpwLhw/zFAKUVoO5teA/R3wD134KTUP/c
gJqn8BSsTuEsRNzB6wrEvcf5noH9oQ4x/8B3/xtg9SUQcxnY8h6D+T95n4D1
Q92tUKtzB2wP1H4FaPg6TI/bD7Z37b7PYPM5IfoVFkLEHaDhmMAOEW+AheOs
g9fA9j+Gxsc8iHqFmVB9p96fA9MC/5+C1B84A+QDAFGxwjM=
           "], "Children" -> 
          RawArray["Integer16",{{2, 47}, {3, 20}, {4, 11}, {5, 10}, {6, 8}, {
            7, -3}, {-1, -2}, {-4, 9}, {-5, -6}, {-7, -8}, {12, 16}, {
            13, -13}, {-9, 14}, {-10, 15}, {-11, -12}, {-14, 17}, {-15, 18}, {
            19, -18}, {-16, -17}, {21, 41}, {22, -39}, {23, 36}, {24, 35}, {
            25, 34}, {26, -28}, {27, 29}, {-19, 28}, {-20, -21}, {30, 
            31}, {-22, -23}, {32, 
            33}, {-24, -25}, {-26, -27}, {-29, -30}, {-31, -32}, {-33, 
            37}, {-34, 38}, {39, -38}, {-35, 40}, {-36, -37}, {-40, 42}, {-41,
             43}, {-42, 44}, {45, -46}, {-43, 46}, {-44, -45}, {48, 64}, {49, 
            50}, {-47, -48}, {51, 54}, {52, 53}, {-49, -50}, {-51, -52}, {
            55, -63}, {56, -62}, {57, -61}, {58, 63}, {59, 61}, {
            60, -55}, {-53, -54}, {62, -58}, {-56, -57}, {-59, -60}, {
            65, -68}, {66, -67}, {-64, 67}, {-65, -66}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 
            2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 
            1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 5, 5, 3, 6, 5, 1, 1, 6, 2, 1, 2, 4, 2, 5, 
            1, 3, 5, 4, 5, 2, 3, 4, 5, 6, 2, 6, 4, 2, 3, 6, 6, 1, 1, 2, 4, 1, 
            5, 6, 1, 2, 1, 6, 2, 5, 4, 4, 6, 6, 3, 1, 1, 5, 1, 1, 6, 3, 4, 1, 
            1, 3, 1, 3, 5, 6, 1, 5, 1, 6}], 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZQCDhvd5D+2BtMK2uP37gXSC3aXHIFohI/I2SPzAyanv
QXwGB6j4TNEPYDom4TdY/AxEfsEzo3dgmrV1M4h+AOU3lPZ8Bos/gfAV7CHm
LAh8FQIynyEHag/U3gSo+gNQdQ5Pofqg6hzKIPINtlD3QO1PgKpL4Mx7DFKX
AFW3ACrekA7Rz8AOkV8AVddwUvky2J71Gx6C1UHd+QDqjoaESLB4wiJI+ByA
6lfwULgCNg9q/gFFzlNg90DDq+GJzBmwvCPUnQL/n4L4D2DhfRaqDup+he/+
N8Du4j/zFuye3ozNYHXQcFlQoXMZrP+2wwewutPQcP8L0acgDDFfYWH1XbD/
CwvA9iyAmqtwxQccbws0Mg+BzZ8P8Y8CBzS8jsieA/t7MUTcweHTVrA+UDgB
ADrgwsA=
           "], "Children" -> 
          RawArray["Integer16",{{2, 43}, {3, 26}, {4, 22}, {5, 7}, {-1, 
            6}, {-2, -3}, {8, 10}, {9, -6}, {-4, -5}, {11, 13}, {
            12, -9}, {-7, -8}, {14, 18}, {-10, 15}, {16, 
            17}, {-11, -12}, {-13, -14}, {19, -19}, {20, 
            21}, {-15, -16}, {-17, -18}, {-20, 23}, {24, 
            25}, {-21, -22}, {-23, -24}, {27, 32}, {28, -30}, {-25, 29}, {
            30, -29}, {-26, 31}, {-27, -28}, {33, -42}, {34, 40}, {35, 
            37}, {-31, 36}, {-32, -33}, {-34, 38}, {39, -37}, {-35, -36}, {
            41, -41}, {-38, 42}, {-39, -40}, {44, 61}, {45, 60}, {46, 
            47}, {-43, -44}, {-45, 48}, {-46, 49}, {-47, 50}, {51, 57}, {-48, 
            52}, {-49, 53}, {54, -54}, {-50, 55}, {-51, 56}, {-52, -53}, {
            58, -58}, {-55, 59}, {-56, -57}, {-59, -60}, {62, 65}, {-61, 
            63}, {64, -64}, {-62, -63}, {66, 69}, {-65, 67}, {
            68, -68}, {-66, -67}, {-69, -70}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 
            2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 5, 5, 6, 4, 2, 4, 6, 2, 5, 4, 6, 5, 4, 1, 
            3, 3, 2, 5, 1, 5, 4, 1, 1, 2, 5, 4, 2, 4, 1, 2, 3, 5, 1, 6, 4, 3, 
            6, 6, 5, 6, 6, 3, 3, 5, 2, 2, 2, 4, 3, 3, 5, 1, 5, 5, 5, 1, 3, 5, 
            2, 3, 1, 6, 3, 6, 3, 4}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZgCDByU9n/eDGLaXHoPoBDsofXLqexDtUAqVf2r0DkQ3
QPkJpyHyCk8g4gr2UH1lEPmGU1D9UHEGqL4FZ9x3g+gHmZG37UH6oPSBZxBz
GBwg6hdkij8D01B3NUDNZTDesxks/ubvCpC+Bqi+BWvj9oPdAVV34DFEHOb+
hpKJEHNg7oXa67AKoq+hZc4DsPmceY9B4g9g/syGqGPggIg3QOUXbILoc2CH
qmeF0Anf/G+A/QWlYe5nuClzBuzPaxCa4Q6EbviY9xCsTinzEDhcVKE0LB4K
CyDysHB0RI0nhRbOD2D//4DaC1W34OT7c2B//YaIN3ieYjgAkof6I0EeYk8D
lP/gJ0TdA4H/T+0BcNO/tQ==
           "], "Children" -> 
          RawArray["Integer16",{{2, 42}, {3, 25}, {4, 20}, {5, 19}, {6, 14}, {
            7, 9}, {-1, 8}, {-2, -3}, {10, 13}, {11, -7}, {-4, 
            12}, {-5, -6}, {-8, -9}, {15, -15}, {16, 18}, {
            17, -12}, {-10, -11}, {-13, -14}, {-16, -17}, {21, 23}, {-18, 
            22}, {-19, -20}, {-21, 24}, {-22, -23}, {26, 28}, {
            27, -26}, {-24, -25}, {29, 40}, {30, -38}, {31, 34}, {
            32, -30}, {-27, 33}, {-28, -29}, {-31, 35}, {36, 39}, {37, -35}, {
            38, -34}, {-32, -33}, {-36, -37}, {-39, 41}, {-40, -41}, {43, 
            62}, {44, 55}, {45, -53}, {46, -52}, {47, 48}, {-42, -43}, {49, 
            50}, {-44, -45}, {51, -51}, {52, -50}, {53, -49}, {-46, 
            54}, {-47, -48}, {-54, 56}, {57, -61}, {-55, 58}, {-56, 59}, {
            60, -60}, {61, -59}, {-57, -58}, {-62, 63}, {-63, 64}, {65, 
            66}, {-64, -65}, {-66, 67}, {-67, -68}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 
            1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 
            2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 5, 3, 1, 5, 1, 2, 4, 2, 1, 1, 1, 2, 4, 
            1, 4, 5, 4, 3, 6, 2, 1, 3, 6, 3, 6, 1, 4, 6, 5, 5, 2, 6, 3, 1, 6, 
            1, 4, 5, 5, 6, 1, 2, 3, 4, 3, 5, 3, 6, 6, 2, 3, 2, 1, 5, 4, 4, 3, 
            3, 5, 2, 2}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZ4CAk1Pf7wdSB54ZvQPRDQ6XHoNoh4zI2yAlCRzMN0H8
B3YQcYV/Z36A6ITHEPULSns+g+knEL5Ds/wRkD6H5bJXQPSDjO2XwebC1JdB
1B9YshRsXgKUzwC1lwHKf6CYeQis7zTEfQx3ZM6A3VNY8BBEN6hA5B1OQeV1
oOph/nEz3gRSpwB1nwPUHAeoPxzsofRTiLsOQPU9+OV/A+z+lSWbwO6DmV8h
/hJsv/D/p2BzoeYwLIzbD9bPmfcYJL7gf9F3sDug4bHgB8Q8mD8bsiHh+mAl
RJ8ClN8A088GoR+ceX8O7L7fEP0PoO5USNcBx0fCZoh+eHiVQOgEmHmZEHrB
XKg6qP4FJ4DmAgDemblg
           "], "Children" -> 
          RawArray["Integer16",{{2, 41}, {3, 7}, {-1, 4}, {5, 
            6}, {-2, -3}, {-4, -5}, {8, 9}, {-6, -7}, {10, 20}, {11, 13}, {-8,
             12}, {-9, -10}, {14, 18}, {15, -15}, {-11, 16}, {
            17, -14}, {-12, -13}, {19, -18}, {-16, -17}, {21, 28}, {22, 
            24}, {-19, 23}, {-20, -21}, {25, -26}, {26, 
            27}, {-22, -23}, {-24, -25}, {29, 38}, {30, 34}, {31, 33}, {
            32, -29}, {-27, -28}, {-30, -31}, {35, -36}, {36, -35}, {-32, 
            37}, {-33, -34}, {-37, 39}, {40, -40}, {-38, -39}, {42, 58}, {
            43, -57}, {44, 46}, {-41, 45}, {-42, -43}, {47, 49}, {-44, 
            48}, {-45, -46}, {50, 55}, {51, -52}, {52, 54}, {
            53, -49}, {-47, -48}, {-50, -51}, {56, 
            57}, {-53, -54}, {-55, -56}, {59, 63}, {60, 62}, {
            61, -60}, {-58, -59}, {-61, -62}, {-63, -64}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 
            1, 2, 1, 1, 2, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 1, 4, 6, 1, 4, 1, 4, 2, 1, 6, 3, 1, 2, 5, 
            2, 4, 2, 1, 6, 2, 5, 6, 6, 4, 6, 6, 1, 6, 4, 2, 3, 1, 5, 5, 1, 1, 
            4, 4, 5, 1, 6, 6, 4, 1, 6, 3, 1, 6, 2, 3, 4, 6, 6, 6, 4, 5, 5, 4, 
            3, 3, 2, 3, 4, 6}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZACDBWmRt+2BdMLc5ef2g2jh/09BfIWTU9+D+A8Unn4G
0Q0CEPEHD9Veg/kf8h6C1T2VOQOmg+dDxKH6GuQyD4FohgnxYHUHbkHULbC7
9BgkfuARlA81Z8EdKP//559g9acg5hy4DxF/ANXHcBYiDnffR6g7OPIeg+gG
KP2g9dRRZH84lPaA/fHgmdE7MJ0J8bdDyIrL+5HcxeAAoRds2wa2tyF37WYw
XQbRrwClYeoXcCWB/e1wGmrPGQjNALXvgMDcZ+BwhcrD7FWIUrwJVscGdfdT
iLsU0iHyDVD9DOxQ/0DVLYDyHWDuWBi3H2zuMgjNABV3yIKakw2NX6i/E2D+
hprvAAovAKdWu0U=
           "], "Children" -> 
          RawArray["Integer16",{{2, 29}, {3, 11}, {4, -9}, {5, 8}, {-1, 6}, {
            7, -4}, {-2, -3}, {9, -8}, {10, -7}, {-5, -6}, {12, 24}, {13, 
            23}, {14, 16}, {-10, 15}, {-11, -12}, {17, 22}, {18, 
            19}, {-13, -14}, {20, -18}, {
            21, -17}, {-15, -16}, {-19, -20}, {-21, -22}, {25, 
            26}, {-23, -24}, {-25, 27}, {-26, 28}, {-27, -28}, {30, 49}, {31, 
            44}, {-29, 32}, {33, 36}, {34, -33}, {35, -32}, {-30, -31}, {
            37, -42}, {38, -41}, {-34, 39}, {40, 42}, {-35, 41}, {-36, -37}, {
            43, -40}, {-38, -39}, {45, -48}, {-43, 46}, {47, -47}, {-44, 
            48}, {-45, -46}, {50, 51}, {-49, -50}, {-51, 52}, {53, 62}, {54, 
            55}, {-52, -53}, {56, 57}, {-54, -55}, {58, -61}, {59, -60}, {
            60, -59}, {-56, 61}, {-57, -58}, {63, 64}, {-62, -63}, {
            65, -66}, {-64, -65}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 
            2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 
            2, 1, 2, 1, 2, 2, 1, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 1, 3, 2, 1, 5, 2, 1, 1, 1, 4, 1, 6, 5, 3, 
            4, 2, 1, 2, 2, 5, 1, 3, 1, 3, 5, 6, 4, 1, 1, 1, 2, 3, 5, 6, 4, 1, 
            5, 1, 1, 2, 2, 1, 4, 1, 2, 1, 3, 4, 2, 5, 3, 6, 3, 3, 3, 6, 1, 3, 
            1, 4, 3, 3, 5, 5}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZAADhZNT3+8H0gnTmL+C6Ia0yNv2QPrBE6N3YPGIg39B
9AK7S4/B9FOZMyD5Bd3FH0E0w3X7cyD6wHqnIyC6QeD/U7B+r09nQeoVzkDM
Z7CH6HfIhJjvUNrzGWwe1J4DO4wegu17DOE7QMVh+hZM3n8RzFfJPAQ29w7r
JrB9UPMSHCDqYPYtgJp/IPHkVpC8wq1FYHcnTNc9C+bfgfjjgDrUPKh+B6h+
hw95D8HqEj9/BttjC3XHDuffYPHjK3+Aaah7FZ5B6eoVV8D+gNqv4KFwBWzv
U2h4LgoG+1MhC+LuBWVQd8L8vSVuP1gdVP4BW95jcDjD+ND4SciB0uwQ+Qcz
TzEcAJknB/FPwi89BgeQedD4cPjlfwPs378QOmEhxJ4H64E0AEW0tlI=
           "], "Children" -> 
          RawArray["Integer16",{{2, 41}, {3, 7}, {-1, 4}, {5, -5}, {
            6, -4}, {-2, -3}, {8, -40}, {9, 36}, {10, 32}, {11, 30}, {
            12, -25}, {13, 24}, {14, 16}, {-6, 15}, {-7, -8}, {17, 22}, {18, 
            19}, {-9, -10}, {20, -14}, {21, -13}, {-11, -12}, {
            23, -17}, {-15, -16}, {25, 29}, {-18, 26}, {-19, 27}, {
            28, -22}, {-20, -21}, {-23, -24}, {-26, 31}, {-27, -28}, {-29, 
            33}, {34, 35}, {-30, -31}, {-32, -33}, {37, 39}, {-34, 
            38}, {-35, -36}, {40, -39}, {-37, -38}, {42, 58}, {43, 45}, {
            44, -43}, {-41, -42}, {46, -57}, {47, 49}, {
            48, -46}, {-44, -45}, {50, 51}, {-47, -48}, {-49, 52}, {53, 
            56}, {-50, 54}, {55, -53}, {-51, -52}, {-54, 
            57}, {-55, -56}, {-58, 59}, {60, 61}, {-59, -60}, {62, 
            63}, {-61, -62}, {64, -66}, {65, -65}, {-63, -64}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 
            1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 
            1, 2, 2, 1, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0|>]}, "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|
          "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
           "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "OOBConfusionMatrix" -> {{0.7918367316325505, 0.20816326836744944`}, {
       0.20816326836744944`, 0.7918367316325505}}, "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 1.3212087870574467`|>], "Method" -> 
      "RandomForest", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "FeatureFraction" -> <|
         "Value" -> 6^Rational[-1, 2], "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
        "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "Implementation" -> <|"Value" -> "DAAL", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Configurations" -> 
      Dataset[<|<|
          "Value" -> "RandomForest", 
           "Options" -> <|
            "FeatureFraction" -> <|"Value" -> Automatic|>, 
             "LeafSize" -> <|"Value" -> Automatic|>, 
             "TreeNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "Implementation" -> <|"Value" -> Automatic|>|>, "NaiveImputer" -> 
           Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
           TypeSystem`UnknownType, TypeSystem`UnknownType}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
      Dataset[<|"Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "ModelUtility" -> Missing[]|>, 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
      "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
    "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, "ID" -> 
           7168142382301173801|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, "ID" -> 
           1978735388468315165|>, 
         "f3" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
           9071588231046195481|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.8854806, 
      "MaxTrainingMemory" -> 2183400, "DataMemory" -> 227152, 
      "FunctionMemory" -> 285440, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 10, 11, 15, 6, 19.863676`9.050634560085587}, 
        "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9376227407096615`*^9, 3.937622742607731*^9}, 
   3.9376227799235554`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"bf3456c5-0cb6-0744-9efb-86d33784d44b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["916", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 916, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal"|>, "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 3|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f2(f1f3))" -> <|
            "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
             "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 916, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{0.9924763087166281, 
                   0.06962246892396884, -0.10071488696884714`}, \
{-0.12176028349302224`, 0.6475982344553933, -0.7521907737362618}, {
                   0.012853404215050985`, 0.7587945957577639, 
                   0.6512031568173609}}, 
                  "Precisions" -> {1.1096705122951698`, 11.071379162604247`, 
                   14.504654820468707`}, "NoisePrecision" -> None, 
                  "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001752264873371586, 0.09643725350844203, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                   "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                   "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   8708448484904811398|>], "InputDimension" -> 0, 
                "OutputDimension" -> 3, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.1972185, "MaxTrainingMemory" -> 2051000,
                   "DataMemory" -> 106416, "FunctionMemory" -> 64512, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 10, 11, 15, 6, 20.1145877`9.056086069629984}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146168`, -1.997829760914916, -1.976574768503185, \
-1.9695170466598357`, -1.9059724997243812`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714302`, -1.7810711623410056`}, 
                   "LeftBoundary" -> -2.0628669170146168`, "LeftScale" -> 
                   0.12459852713774523`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[5.892604950680779, 0.13867820062256261`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 616651398117295976|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {29.018970775438927`}, 
             "StandardDeviation" -> {12.892103992603547`}, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
               "female" -> 1, "male" -> 2|>}, 
             "Output" -> <|
              "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 0.}, {
                0.21963098645210266`, -0.1438339650630951, 
                0.544792890548706}, {-0.2416929453611374, 0.3798814117908478, 
                0.6873865127563477}, {-0.9437126517295837, 
                0.4273325502872467, -1.2217921018600464`}}], 
               RawArray["Real32",{{0., 0.}, {-0.12253803759813309`, 
                0.6071814894676208}, {-0.6194148659706116, \
-0.98703533411026}}]}, "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "Spans" -> {
               Span[1, 1], 
               Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
             7619735631186802745|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
             0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "died" -> 0.6176470588235294, "survived" -> 0.3823529411764706|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
          "NumericalThresholds" -> {-0.6194138824939727, -0.9437117278575896},
           "LeafValues" -> 
          RawArray[
            "Real32",{-0.5628561973571777, -0.4405399262905121, \
-0.2471834123134613}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
          "NumericalThresholds" -> {-0.6194138824939727, -0.9437117278575896},
           "LeafValues" -> 
          RawArray["Real32",{-0.07562831789255142, 0.03576415404677391, 
            0.20096533000469208`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
          "NumericalThresholds" -> {-0.6194138824939727, -0.9437117278575896},
           "LeafValues" -> 
          RawArray["Real32",{-0.06966611742973328, 0.031935498118400574`, 
            0.17804935574531555`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 2}], 
          "NumericalThresholds" -> {-0.9870343506336211, -0.9437117278575896},
           "LeafValues" -> 
          RawArray["Real32",{-0.06479296088218689, 0.03283056244254112, 
            0.1575036644935608}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
          "NumericalThresholds" -> {-0.6194138824939727, -0.9437117278575896},
           "LeafValues" -> 
          RawArray["Real32",{-0.059291958808898926`, 0.025252167135477066`, 
            0.1478646844625473}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 1}], 
          "NumericalThresholds" -> {-0.9870343506336211, \
-1.1559262871742246`}, "LeafValues" -> 
          RawArray["Real32",{0.10650458931922913`, 
            0.08358298242092133, -0.06817365437746048}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
          "NumericalThresholds" -> {-0.3709764443337917, \
-0.24169342964887616`}, "LeafValues" -> 
          RawArray["Real32",{-0.05000479146838188, 0.0229928158223629, 
            0.13774782419204712`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 1}], 
          "NumericalThresholds" -> {-0.9870343506336211, \
-1.5454616546630857`}, "LeafValues" -> 
          RawArray["Real32",{0.12483570724725723`, 
            0.06948645412921906, -0.0577348917722702}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
          "NumericalThresholds" -> {-0.6194139420986174, \
-0.24169257283210752`}, "LeafValues" -> 
          RawArray["Real32",{-0.04462643712759018, 0.018255863338708878`, 
            0.147220641374588}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 3}], 
          "NumericalThresholds" -> {-0.9870343506336211, 0.3798817843198777}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.039964329451322556`, 0.11732804775238037`, 
            0.014229444786906242`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
          "NumericalThresholds" -> {-0.6194139420986174, \
-0.24169257283210752`}, "LeafValues" -> 
          RawArray["Real32",{-0.03789850324392319, 0.013727221637964249`, 
            0.13595598936080933`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 6}], 
          "NumericalThresholds" -> {0.3798807114362717, -0.9870343506336211}, 
          "LeafValues" -> 
          RawArray["Real32",{0.073035329580307, -0.057666435837745667`, 
            0.02474776655435562}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 6}], 
          "NumericalThresholds" -> {0.3798807114362717, 0.6071805655956269}, 
          "LeafValues" -> 
          RawArray["Real32",{0.06542342156171799, -0.05172543227672577, 
            0.025420403108000755`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
          "NumericalThresholds" -> {-0.6194139420986174, \
-0.24169342964887616`}, "LeafValues" -> 
          RawArray["Real32",{-0.031043292954564095`, -0.0016394905978813767`, 
            0.1087941899895668}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -0.6194142997264861}, "LeafValues" -> 
          RawArray["Real32",{-0.01889302022755146, -0.002432873472571373, 
            0.13034820556640625`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 1}], 
          "NumericalThresholds" -> {0.6071805655956269, -1.1559262871742246`},
           "LeafValues" -> 
          RawArray["Real32",{0.11227266490459442`, 
            0.04290912300348282, -0.03833886608481407}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -0.6194143593311309}, "LeafValues" -> 
          RawArray["Real32",{-0.017510192468762398`, -0.004031539428979158, 
            0.11900977790355682`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 6}], 
          "NumericalThresholds" -> {0.3798807114362717, -0.9870343506336211}, 
          "LeafValues" -> 
          RawArray["Real32",{0.05119683966040611, -0.04318311810493469, 
            0.01859913021326065}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 1}], 
          "NumericalThresholds" -> {-0.12253886833786963`, \
-1.1559262871742246`}, "LeafValues" -> 
          RawArray["Real32",{0.0846753716468811, 
            0.039477430284023285`, -0.030357690528035164`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -0.6194142997264861}, "LeafValues" -> 
          RawArray["Real32",{-0.014995970763266087`, -0.0016988357529044151`, 
            0.11484383046627045`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -1.7823597788810728`}, "LeafValues" -> 
          RawArray["Real32",{0.10305319726467133`, 
            0.0488920696079731, -0.021423714235424995`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 3}], 
          "NumericalThresholds" -> {0.6071805655956269, 0.42733161151409155`},
           "LeafValues" -> 
          RawArray["Real32",{-0.019899947568774223`, 
            0.08728215843439102, -0.009148811921477318}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 1}], 
          "NumericalThresholds" -> {0.6071805655956269, -1.1559262871742246`},
           "LeafValues" -> 
          RawArray["Real32",{0.0883764922618866, 
            0.03110836260020733, -0.029372286051511765`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -0.6194142997264861}, "LeafValues" -> 
          RawArray["Real32",{-0.012533112429082394`, -0.0017871982418000698`, 
            0.10607954114675522`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 5}], 
          "NumericalThresholds" -> {-0.6194158494472503, \
-0.12253886833786963`}, "LeafValues" -> 
          RawArray["Real32",{0.36643096804618835`, -0.01725507341325283, 
            0.030557598918676376`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -1.7823597788810728`}, "LeafValues" -> 
          RawArray["Real32",{0.08553784340620041, 
            0.04272153973579407, -0.018413979560136795`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 3}], 
          "NumericalThresholds" -> {0.6071805655956269, 0.42733161151409155`},
           "LeafValues" -> 
          RawArray["Real32",{-0.015338504686951637`, 
            0.07884068787097931, -0.011189967393875122`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -0.6194142997264861}, "LeafValues" -> 
          RawArray["Real32",{-0.010326098650693893`, -0.0030235720332711935`, 
            0.09757386893033981}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 6}], 
          "NumericalThresholds" -> {-1.7823597788810728`, \
-0.9870343506336211}, "LeafValues" -> 
          RawArray["Real32",{0.07882683724164963, -0.022229233756661415`, 
            0.02198720909655094}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
          "NumericalThresholds" -> {-0.6194158494472503, 
           0.21963008493185046`}, "LeafValues" -> 
          RawArray["Real32",{0.2917635440826416, -0.01071217842400074, 
            0.03470345214009285}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4, 5}], 
          "NumericalThresholds" -> {-1.2217925190925596`, \
-0.12253886833786963`}, "LeafValues" -> 
          RawArray["Real32",{-0.04170740768313408, -0.008755126036703587, 
            0.04511519521474838}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 4}], 
          "NumericalThresholds" -> {-0.9414446353912352, 0.5447924435138704}, 
          "LeafValues" -> 
          RawArray["Real32",{0.0027812542393803596`, -0.007138974964618683, 
            0.16874344646930695`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -0.6194141209125518}, "LeafValues" -> 
          RawArray["Real32",{-0.00883788987994194, 0.002237652661278844, 
            0.10447357594966888`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 4}], 
          "NumericalThresholds" -> {-0.9414446353912352, 0.5447924435138704}, 
          "LeafValues" -> 
          RawArray["Real32",{0.003270969958975911, -0.006542771589010954, 
            0.1575198769569397}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4, 1}], 
          "NumericalThresholds" -> {-1.2217925190925596`, \
-0.4749798625707626}, "LeafValues" -> 
          RawArray["Real32",{-0.03647451475262642, 
            0.04357663914561272, -0.006998565047979355}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
          "NumericalThresholds" -> {0.21963008493185046`, 0.7673393189907075},
           "LeafValues" -> 
          RawArray["Real32",{0.0001414331200066954, 
            0.031045548617839813`, -0.07420989125967026}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 6}], 
          "NumericalThresholds" -> {-0.9870358407497405, -0.9870362579822539},
           "LeafValues" -> 
          RawArray["Real32",{0.11555942893028259`, 
            0.0066485218703746796`, -0.05264180898666382}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 6}], 
          "NumericalThresholds" -> {-1.7823597788810728`, \
-0.9870343506336211}, "LeafValues" -> 
          RawArray["Real32",{0.059138186275959015`, -0.0179966501891613, 
            0.01827036775648594}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -0.6194141209125518}, "LeafValues" -> 
          RawArray["Real32",{-0.007800576277077198, 0.0018008486367762089`, 
            0.09924207627773285}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4, 5}], 
          "NumericalThresholds" -> {-1.2217925190925596`, \
-0.12253886833786963`}, "LeafValues" -> 
          RawArray["Real32",{-0.0329132042825222, -0.007342319469898939, 
            0.03721977770328522}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 1}], 
          "NumericalThresholds" -> {-0.6194157302379607, -2.133302569389343}, 
          "LeafValues" -> 
          RawArray["Real32",{0.06984780728816986, 
            0.10468945652246475`, -0.005712478421628475}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 3}], 
          "NumericalThresholds" -> {
           0.21963008493185046`, -0.14383383840322492`}, "LeafValues" -> 
          RawArray["Real32",{-0.007165656890720129, -0.012230036780238152`, 
            0.07722867280244827}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 6}], 
          "NumericalThresholds" -> {-0.9437135756015776, -0.9870358407497405},
           "LeafValues" -> 
          RawArray["Real32",{0.08311925083398819, -0.0393308624625206, 
            0.0041056363843381405`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
          "NumericalThresholds" -> {1.625065624713898, -0.9437117278575896}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.009687960147857666, -0.053242027759552, 
            0.023557249456644058`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
          "NumericalThresholds" -> {-0.2388282939791679, 
           0.21963008493185046`}, "LeafValues" -> 
          RawArray["Real32",{0.014215047471225262`, -0.030871547758579254`, 
            0.021562740206718445`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 1}], 
          "NumericalThresholds" -> {-0.6194157302379607, -2.133302569389343}, 
          "LeafValues" -> 
          RawArray["Real32",{0.06122979149222374, 
            0.0941050574183464, -0.0051827398128807545`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{5, 6}], 
          "NumericalThresholds" -> {-0.1225372515618801, 0.6071812212467195}, 
          "LeafValues" -> 
          RawArray["Real32",{-0.006334241479635239, -0.07167304307222366, 
            0.03391573205590248}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 6}], 
          "NumericalThresholds" -> {-0.9437135159969329, -0.9870354831218718},
           "LeafValues" -> 
          RawArray["Real32",{0.15602052211761475`, -0.0030380382668226957`, 
            0.005158334504812956}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4, 5}], 
          "NumericalThresholds" -> {-1.2217925190925596`, \
-0.12253886833786963`}, "LeafValues" -> 
          RawArray["Real32",{-0.02906171977519989, -0.006713171489536762, 
            0.033422235399484634`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 5}], 
          "NumericalThresholds" -> {2.1285036802291875`, -0.6194157302379607},
           "LeafValues" -> 
          RawArray["Real32",{
            0.06869038194417953, -0.06673994660377502, \
-0.0006804348668083549}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0|>]}, "ClassNumber" -> 2, "IterationsNumber" -> 50, "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f2(f1f3))" -> <|
            "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
             "NumericalVector"|>|>, 
         "Output" -> <|
          "(f2(f1f3))" -> <|
            "Type" -> "NumericalVector", "Weight" -> 2.9999999999999996`|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "DensifyNumericalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
             1029909776677290127, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Type" -> "NumericalVector", "Weight" -> 
                 2.9999999999999996`|>|>|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Type" -> "NumericalVector", "Weight" -> 2.9999999999999996`|>, 
             "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "GradientBoostedTrees", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "BoostingMethod" -> <|"Value" -> "Gradient", "Options" -> <||>|>, 
        MaxTrainingRounds -> <|"Value" -> 50, "Options" -> <||>|>, 
        "LeavesNumber" -> <|"Value" -> 3, "Options" -> <||>|>, 
        "LearningRate" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "MaxBinNumber" -> <|"Value" -> 255, "Options" -> <||>|>, 
        "ThreadNumber" -> <|"Value" -> 6, "Options" -> <||>|>, 
        "MaxDepth" -> <|"Value" -> 6, "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 15, "Options" -> <||>|>, 
        "FeatureFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "BaggingFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "BaggingFrequency" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "MinGainToSplit" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.404757`7.058739361817207, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.5632726895592431, 0.06487961999444827], "Accuracy" -> 
         Around[0.7245894532060074, 0.04656731185550783], "EvaluationTime" -> 
         0.00014125099412355812`, "TestSize" -> 183, "ModelMemory" -> 116264, 
         "ModelUtility" -> -0.14195631906534933`, "Round" -> 4, "Iteration" -> 
         17, "Time" -> {
          3.2611775`7.964919430809331, 3.3644929`7.978464609655476}, 
         "TrainingSize" -> 733, "TrainingTime" -> 0.07943282347242814, 
         "TrainingMemory" -> 423448, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.5632726895592431, 0.04587681925888069]}, 
         "AccuracyHistory" -> {
           Around[0.7245894532060074, 0.032928061994658295`]}, 
         "IterationHistory" -> {17}, 
         "TimeHistory" -> {{
           3.2611775`7.964919430809331, 3.3644929`7.978464609655476}}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 3, "LearningRate" -> 
           0.1, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 15, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 916|>, 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
      "Configurations" -> 
      Dataset[<|<|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 13|>, 
             "LearningRate" -> <|"Value" -> 0.002|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8011897599810363, 0.06107820350853756], "Accuracy" -> 
              Around[0.5001402820845321, 0.07053382818600773], 
              "EvaluationTime" -> 0.00019952623149688788`, "TestSize" -> 100, 
              "ModelMemory" -> 20408, "ModelUtility" -> -0.4866356629889558, 
              "Round" -> 1, "Iteration" -> 1, 
              "Time" -> {
               0.4371783`7.092203590451254, 0.5193916`7.1670399151020225}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 88824, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8011897599810363, 0.043188811883578884`]}, 
              "AccuracyHistory" -> {
                Around[0.5001402820845321, 0.049874948213372905`]}, 
              "IterationHistory" -> {1}, 
              "TimeHistory" -> {{
                0.4371783`7.092203590451254, 
                 0.5193916`7.1670399151020225}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7478722471573469, 0.034430581577565456`], "Accuracy" -> 
              Around[0.5001402820845321, 0.0498749482133729], 
              "EvaluationTime" -> 0.00017900777537149963`, "TestSize" -> 200, 
              "ModelMemory" -> 116264, 
              "ModelUtility" -> -0.41181481812933174`, "Round" -> 3, 
              "Iteration" -> 14, 
              "Time" -> {
               2.2906345`7.811500790980205, 2.390571`7.83004664027294}, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 341952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7478722471573469, 0.02434609771369315]}, 
              "AccuracyHistory" -> {
                Around[0.5001402820845321, 0.03526691409300386]}, 
              "IterationHistory" -> {14}, 
              "TimeHistory" -> {{
                2.2906345`7.811500790980205, 2.390571`7.83004664027294}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00017900777537149963`, "MeanCrossEntropy" -> 
             Around[0.7478722471573469, 0.034430581577565456`], "ModelMemory" -> 
             116264, "TrainingMemory" -> 341952, "TrainingTime" -> 
             0.44840035281059054`|>, "Index" -> 1|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 13|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 90|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           2|>, <|"Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 250|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           3|>, <|"Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 1023|>, 
             "LearningRate" -> <|"Value" -> 0.2|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 7|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7292212000857379, 0.0267820527255058], "Accuracy" -> 
              Around[0.5817453136035826, 0.03073654457077169], 
              "EvaluationTime" -> 0.00003065879977778177, "TestSize" -> 500, 
              "ModelMemory" -> 20408, "ModelUtility" -> -0.3847015156384803, 
              "Round" -> 1, "Iteration" -> 2, 
              "Time" -> {
               0.5263879`7.172850891154248, 0.5811563`7.21583794361199}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 71792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7292212000857379, 0.018937771096300807`]}, 
              "AccuracyHistory" -> {
                Around[0.5817453136035826, 0.02173401909623522]}, 
              "IterationHistory" -> {2}, 
              "TimeHistory" -> {{
                0.5263879`7.172850891154248, 0.5811563`7.21583794361199}}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2271858974007994`, 0.30204228276689044`], "Accuracy" -> 
              Around[0.6585561236686911, 0.06689343977259987], 
              "EvaluationTime" -> 0.0005011872336272722, "TestSize" -> 100, 
              "ModelMemory" -> 118864, "ModelUtility" -> -0.9459487078236414, 
              "Round" -> 2, "Iteration" -> 9, 
              "Time" -> {
               0.9056894`7.408524278376362, 1.054831`7.474727878109123}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              384000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2271858974007994`, 0.2135761463495329]}, 
              "AccuracyHistory" -> {
                Around[0.6585561236686911, 0.04730080488009927]}, 
              "IterationHistory" -> {9}, 
              "TimeHistory" -> {{
                0.9056894`7.408524278376362, 1.054831`7.474727878109123}}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2124774237678313`, 0.31511570787505544`], "Accuracy" -> 
              Around[0.6981600840647306, 0.06475798272464], "EvaluationTime" -> 
              0.00039810717055349714`, "TestSize" -> 100, "ModelMemory" -> 
              132616, "ModelUtility" -> -0.9365132720238779, "Round" -> 3, 
              "Iteration" -> 15, 
              "Time" -> {
               2.3950866`7.8308662144708485, 2.7270094`7.8872316284530335}, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 754104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2124774237678313`, 0.22282045389685085`]}, 
              "AccuracyHistory" -> {
                Around[0.6981600840647306, 0.045790808720554244`]}, 
              "IterationHistory" -> {15}, 
              "TimeHistory" -> {{
                2.3950866`7.8308662144708485, 
                 2.7270094`7.8872316284530335}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00039810717055349714`, "MeanCrossEntropy" -> 
             Around[1.2124774237678313`, 0.31511570787505544`], "ModelMemory" -> 
             132616, "TrainingMemory" -> 754104, "TrainingTime" -> 
             1.5655480907768673`|>, "Index" -> 4|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 25|>, 
             "LearningRate" -> <|"Value" -> 0.2|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7501674494578778, 0.030161489776127655`], "Accuracy" -> 
              Around[0.5581071261011948, 0.03467385154357829], 
              "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 400,
               "ModelMemory" -> 20408, 
              "ModelUtility" -> -0.41371141943044065`, "Round" -> 1, 
              "Iteration" -> 7, 
              "Time" -> {
               0.8156764`7.3630628905241755, 0.8551531`7.383588867911691}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71496, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7501674494578778, 0.021327393951388586`]}, 
              "AccuracyHistory" -> {
                Around[0.5581071261011948, 0.024518115556319848`]}, 
              "IterationHistory" -> {7}, 
              "TimeHistory" -> {{
                0.8156764`7.3630628905241755, 
                 0.8551531`7.383588867911691}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7325436477203284, 0.026046119950073023`], "Accuracy" -> 
              Around[0.5581071261011948, 0.03467385154357829], 
              "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 400,
               "ModelMemory" -> 20408, "ModelUtility" -> -0.389014768335456, 
              "Round" -> 2, "Iteration" -> 8, 
              "Time" -> {
               0.8602575`7.386173461123625, 0.9016896`7.406602054089646}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 75016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7325436477203284, 0.018417388040294854`]}, 
              "AccuracyHistory" -> {
                Around[0.5581071261011948, 0.024518115556319848`]}, 
              "IterationHistory" -> {8}, 
              "TimeHistory" -> {{
                0.8602575`7.386173461123625, 
                 0.9016896`7.406602054089646}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5811640552381859, 0.07644949891103252], "Accuracy" -> 
              Around[0.7328718377865611, 0.04413256240284363], 
              "EvaluationTime" -> 0.00007943282347242814, "TestSize" -> 200, 
              "ModelMemory" -> 116456, 
              "ModelUtility" -> -0.17641913790347674`, "Round" -> 3, 
              "Iteration" -> 10, 
              "Time" -> {
               1.4617951`7.616431495272595, 1.5375504`7.638374354095061}, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 344232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5811640552381859, 0.05405795909830467]}, 
              "AccuracyHistory" -> {
                Around[0.7328718377865611, 0.031206434146189198`]}, 
              "IterationHistory" -> {10}, 
              "TimeHistory" -> {{
                1.4617951`7.616431495272595, 
                 1.5375504`7.638374354095061}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6619114316364313, 0.0983222308445512], "Accuracy" -> 
              Around[0.7151135056570725, 0.04697732736287493], 
              "EvaluationTime" -> 0.00019563691297431654`, "TestSize" -> 183, 
              "ModelMemory" -> 126744, 
              "ModelUtility" -> -0.30982598949378803`, "Round" -> 4, 
              "Iteration" -> 16, 
              "Time" -> {
               2.760975`7.892607467715383, 3.0294067`7.93290257508537}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 647656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6619114316364313, 0.06952431617157127]}, 
              "AccuracyHistory" -> {
                Around[0.7151135056570725, 0.033217986740309215`]}, 
              "IterationHistory" -> {16}, 
              "TimeHistory" -> {{
                2.760975`7.892607467715383, 3.0294067`7.93290257508537}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00019563691297431654`, "MeanCrossEntropy" -> 
             Around[0.6619114316364313, 0.0983222308445512], "ModelMemory" -> 
             126744, "TrainingMemory" -> 647656, "TrainingTime" -> 
             0.3338527556548422|>, "Index" -> 5|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 250|>, 
             "LearningRate" -> <|"Value" -> 0.02|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7501674494578778, 0.030161489776127655`], "Accuracy" -> 
              Around[0.5581071261011948, 0.03467385154357829], 
              "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 400,
               "ModelMemory" -> 20408, 
              "ModelUtility" -> -0.41371141943044065`, "Round" -> 1, 
              "Iteration" -> 4, 
              "Time" -> {
               0.6275358`7.249183500221088, 0.6679413`7.276283290992104}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71560, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7501674494578778, 0.021327393951388586`]}, 
              "AccuracyHistory" -> {
                Around[0.5581071261011948, 0.024518115556319848`]}, 
              "IterationHistory" -> {4}, 
              "TimeHistory" -> {{
                0.6275358`7.249183500221088, 
                 0.6679413`7.276283290992104}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7144770034472671, 0.023128380941041672`], "Accuracy" -> 
              Around[0.5817453136035826, 0.03073654457077169], 
              "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 500,
               "ModelMemory" -> 20408, 
              "ModelUtility" -> -0.36341001847036114`, "Round" -> 2, 
              "Iteration" -> 6, 
              "Time" -> {
               0.7610455`7.332955615848956, 0.8106776`7.360393166598611}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 74952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7144770034472671, 0.01635423500127627]}, 
              "AccuracyHistory" -> {
                Around[0.5817453136035826, 0.02173401909623522]}, 
              "IterationHistory" -> {6}, 
              "TimeHistory" -> {{
                0.7610455`7.332955615848956, 
                 0.8106776`7.360393166598611}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6219882040122822, 0.03416539511339028], "Accuracy" -> 
              Around[0.7580392335776497, 0.03465098599375243], 
              "EvaluationTime" -> 0.00008628854898161877, "TestSize" -> 300, 
              "ModelMemory" -> 116264, 
              "ModelUtility" -> -0.22926416337578592`, "Round" -> 3, 
              "Iteration" -> 11, 
              "Time" -> {
               1.541631`7.639525428273607, 1.6467425`7.668170687643206}, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 340624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6219882040122822, 0.024158582566595997`]}, 
              "AccuracyHistory" -> {
                Around[0.7580392335776497, 0.024501947170982422`]}, 
              "IterationHistory" -> {11}, 
              "TimeHistory" -> {{
                1.541631`7.639525428273607, 1.6467425`7.668170687643206}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5710632922634249, 0.0457030904868237], "Accuracy" -> 
              Around[0.7137430526312046, 0.047120435442990764`], 
              "EvaluationTime" -> 0.00028183278552662615`, "TestSize" -> 183, 
              "ModelMemory" -> 131000, 
              "ModelUtility" -> -0.14879859815015772`, "Round" -> 4, 
              "Iteration" -> 18, 
              "Time" -> {
               3.3696147`7.979125237622371, 3.786906`8.029829518530196}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 750696, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5710632922634249, 0.032316965204415425`]}, 
              "AccuracyHistory" -> {
                Around[0.7137430526312046, 0.03331917943420171]}, 
              "IterationHistory" -> {18}, 
              "TimeHistory" -> {{
                3.3696147`7.979125237622371, 3.786906`8.029829518530196}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00028183278552662615`, "MeanCrossEntropy" -> 
             Around[0.5710632922634249, 0.0457030904868237], "ModelMemory" -> 
             131000, "TrainingMemory" -> 750696, "TrainingTime" -> 
             0.517450806269748|>, "Index" -> 6|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 13|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           7|>, <|"Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 500|>, 
             "LearningRate" -> <|"Value" -> 0.04|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 35|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           8|>, <|"Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 13|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 3|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.644142368662859, 0.388073456749626], "Accuracy" -> 
              Around[0.7377640444607705, 0.06204864904812289], 
              "EvaluationTime" -> 0.0006309573444801931, "TestSize" -> 100, 
              "ModelMemory" -> 115184, "ModelUtility" -> -1.236518089611049, 
              "Round" -> 1, "Iteration" -> 13, 
              "Time" -> {
               1.7579557`7.69655292027015, 2.0639464`7.766243408114665}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 310664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.644142368662859, 0.2744093728661649]}, 
              "AccuracyHistory" -> {
                Around[0.7377640444607705, 0.04387502050539191]}, 
              "IterationHistory" -> {13}, 
              "TimeHistory" -> {{
                1.7579557`7.69655292027015, 2.0639464`7.766243408114665}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006309573444801931, "MeanCrossEntropy" -> 
             Around[1.644142368662859, 0.388073456749626], "ModelMemory" -> 
             115184, "TrainingMemory" -> 310664, "TrainingTime" -> 
             2.5520766144137323`|>, "Index" -> 9|>, <|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 3|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7292212000857379, 0.0267820527255058], "Accuracy" -> 
              Around[0.5817453136035826, 0.03073654457077169], 
              "EvaluationTime" -> 0.000026419646772413396`, "TestSize" -> 500,
               "ModelMemory" -> 20408, "ModelUtility" -> -0.3847015113993273, 
              "Round" -> 1, "Iteration" -> 3, 
              "Time" -> {
               0.5851582`7.218818288806876, 0.6245352`7.2471019145647295}, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 71560, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7292212000857379, 0.018937771096300807`]}, 
              "AccuracyHistory" -> {
                Around[0.5817453136035826, 0.02173401909623522]}, 
              "IterationHistory" -> {3}, 
              "TimeHistory" -> {{
                0.5851582`7.218818288806876, 
                 0.6245352`7.2471019145647295}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7072613236167629, 0.0776220462310408], "Accuracy" -> 
              Around[0.6585561236686911, 0.047300804880099266`], 
              "EvaluationTime" -> 0.0001, "TestSize" -> 200, "ModelMemory" -> 
              115208, "ModelUtility" -> -0.3685297863614859, "Round" -> 2, 
              "Iteration" -> 5, 
              "Time" -> {
               0.6710439`7.27829592633874, 0.7559393`7.330031917656687}, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 302720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7072613236167629, 0.054887075259544636`]}, 
              "AccuracyHistory" -> {
                Around[0.6585561236686911, 0.03344671988629993]}, 
              "IterationHistory" -> {5}, 
              "TimeHistory" -> {{
                0.6710439`7.27829592633874, 0.7559393`7.330031917656687}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5691119844858452, 0.05434206074258742], "Accuracy" -> 
              Around[0.7334427199216971, 0.035794666847866724`], 
              "EvaluationTime" -> 0.00010177512155061496`, "TestSize" -> 300, 
              "ModelMemory" -> 116264, 
              "ModelUtility" -> -0.14841139531738223`, "Round" -> 3, 
              "Iteration" -> 12, 
              "Time" -> {
               1.6508251`7.669246056989828, 1.7539576`7.695564084060425}, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 339712, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5691119844858452, 0.03842563965473483]}, 
              "AccuracyHistory" -> {
                Around[0.7334427199216971, 0.02531065165843986]}, 
              "IterationHistory" -> {12}, 
              "TimeHistory" -> {{
                1.6508251`7.669246056989828, 
                 1.7539576`7.695564084060425}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5632726895592431, 0.06487961999444827], "Accuracy" -> 
              Around[0.7245894532060074, 0.04656731185550783], 
              "EvaluationTime" -> 0.00014125099412355812`, "TestSize" -> 183, 
              "ModelMemory" -> 116264, 
              "ModelUtility" -> -0.14195631906534933`, "Round" -> 4, 
              "Iteration" -> 17, 
              "Time" -> {
               3.2611775`7.964919430809331, 3.3644929`7.978464609655476}, 
              "TrainingSize" -> 733, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 423448, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5632726895592431, 0.04587681925888069]}, 
              "AccuracyHistory" -> {
                Around[0.7245894532060074, 0.032928061994658295`]}, 
              "IterationHistory" -> {17}, 
              "TimeHistory" -> {{
                3.2611775`7.964919430809331, 3.3644929`7.978464609655476}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00014125099412355812`, "MeanCrossEntropy" -> 
             Around[0.5632726895592431, 0.06487961999444827], "ModelMemory" -> 
             116264, "TrainingMemory" -> 423448, "TrainingTime" -> 
             0.11921656080418289`|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["GradientBoostedTrees"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 16]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "Round", "Iteration", "Time", 
              "TrainingSize", "TrainingTime", "TrainingMemory", 
              "ExperimentCount", "MeanCrossEntropyHistory", "AccuracyHistory",
               "IterationHistory", "TimeHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType}], TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], 
      "TrainingSizes" -> {10, 40, 150, 733}, "MaxTrainingSize" -> 916, 
      "PreprocessorEvaluationTime" -> 5.521875*^-6, "PreprocessorMemory" -> 
      99192, "InputDimension" -> 6, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.6652042646399302, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.3412576088571056, 
          "ElapsedTimes" -> 0.7909872, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.4875108697958651, 
          "ElapsedTimes" -> 0.7320677, "ExperimentCounts" -> 4|>, <|
         "TrainingSizes" -> 150, "TimeBudgets" -> 0.6964440997083794, 
          "ElapsedTimes" -> 0.7198219, "ExperimentCounts" -> 5|>, <|
         "TrainingSizes" -> 733, "TimeBudgets" -> 0.9949201424405412, 
          "ElapsedTimes" -> 1.2668333, "ExperimentCounts" -> 3|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, "ID" -> 
           7168142382301173801|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, "ID" -> 
           1978735388468315165|>, 
         "f3" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
           9071588231046195481|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 4.1799992, 
      "MaxTrainingMemory" -> 2189072, "DataMemory" -> 227152, 
      "FunctionMemory" -> 428104, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 10, 11, 15, 6, 24.085697`9.134334142291314}, 
        "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9376227407096615`*^9, 3.937622742607731*^9}, 
   3.9376227842060757`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"8dfcea00-d86b-6045-9d0a-dbb3ad748d45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"classifierDT", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"dt", ",", " ", "dftrain"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"classifierLR", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"lr", ",", " ", "dftrain"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"classifierRF", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"rf", ",", " ", "dftrain"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"classifierGB", " ", "=", " ", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"gb", ",", " ", "dftrain"}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"TableForm", "[", 
  RowBox[{"{", "\n", "  ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<Decision Tree\>\"", ",", " ", "\"\<Logistic Regression\>\"", ",", 
      " ", "\"\<Random Forest\>\"", ",", " ", "\"\<Gradient Boosting\>\""}], 
     "}"}], ",", "\n", "  ", 
    RowBox[{"{", 
     RowBox[{
     "classifierDT", ",", " ", "classifierLR", ",", " ", "classifierRF", ",", 
      " ", "classifierGB"}], "}"}]}], "\n", "}"}], "]"}], "\n"}], "Code",
 CellChangeTimes->{
  3.9376230164349785`*^9, {3.9376230714626713`*^9, 3.9376230781960793`*^9}, {
   3.937623307839573*^9, 3.9376233603509693`*^9}, {3.937623436599468*^9, 
   3.9376234420984516`*^9}, {3.9376236360005035`*^9, 3.937623637110302*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"9b65ca3e-86f6-7a45-af24-81184dd9b1d8"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Decision Tree\"\>", "\<\"Logistic Regression\"\>", "\<\"Random \
Forest\"\>", "\<\"Gradient Boosting\"\>"},
    {
     InterpretationBox[
      TagBox[
       StyleBox[
        FrameBox[GridBox[{
           {
            ItemBox[
             FrameBox[
              StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
               StripOnInput->False,
               FontSize->12],
              FrameMargins->{{10, 5}, {-4, 2}},
              FrameStyle->None,
              StripOnInput->False],
             Alignment->{Left, Bottom},
             Background->RGBColor[0.96, 0.96, 0.96],
             Frame->{{False, False}, {True, False}},
             FrameStyle->Opacity[0.1],
             ItemSize->{Automatic, 1},
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              FrameBox[
               TagBox[GridBox[{
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   
                   InterpretationBox[Cell[
                    "DecisionTree",ExpressionUUID->
                    "90e5afe5-ccef-7d47-81db-26ff4e2d4f29"],
                    TextCell["DecisionTree"]]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], "916"},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"79.3", "1.3"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    79.2576419213973792921`3., 1.3404144164653422067`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"61.8", "1.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    61.7903930131004415216`3., 1.6063353509365643212`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.6171710214693831853`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0098326469807825112`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.5975057275078181629`3.", "\", \"", 
                    "0.6368363154309482077`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.5975057275078181629`3., ", ", 0.6368363154309482077`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.4826091112004098904`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0159311288584178534`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4507468534835741836`3.", "\", \"", 
                    "0.5144713689172455418`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.4507468534835741836`3., ", ", 0.5144713689172455418`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"6.08`", 
                    
                    RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                    "milliseconds per example", 
                    FractionBox["\"Milliseconds\"", "\"Examples\""]},
                    "Quantity"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"8.13`", 
                    
                    RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                    "examples per millisecond", 
                    FractionBox["\"Examples\"", "\"Milliseconds\""]},
                    "Quantity"]},
                  {
                   ItemBox[
                    
                    GraphicsBox[
                    RasterBox[{{{0.9016472556684925, 0.7398969987509968, 
                    0.3630358725578406}, {0.8806058933951824, 
                    0.6478804846611745, 0.182079565567622}}, {{1., 0.42, 
                    0.}, {0.938515828648024, 0.8861115106073624, 
                    0.7111510228257585}}}, {{0, 0}, {2, 2}}, {0, 1}],
                    Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["547", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "547", "\" examples of \"", "\"died\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7618384401114207`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9664310954063604`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.85202492211838`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{547, " examples of ", "died", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7618384401114207}], 
                    Row[{"Recall = ", 0.9664310954063604}], 
                    Row[{"FScore = ", 0.85202492211838}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["171", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "171", "\" examples of \"", "\"survived\"", 
                    "\" misclassified as \"", "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.2381615598885794`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.48857142857142855`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{171, " examples of ", "survived", 
                    " misclassified as ", "died"}], 
                    Row[{"Column fraction = ", 0.2381615598885794}], 
                    Row[{"Row fraction = ", 0.48857142857142855`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["19", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "19", "\" examples of \"", "\"died\"", 
                    "\" misclassified as \"", "\"survived\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.09595959595959595`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.03356890459363958`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{19, " examples of ", "died", " misclassified as ", 
                    "survived"}], 
                    Row[{"Column fraction = ", 0.09595959595959595}], 
                    Row[{"Row fraction = ", 0.03356890459363958}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["179", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "179", "\" examples of \"", "\"survived\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9040404040404041`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5114285714285715`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6532846715328468`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{179, " examples of ", "survived", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9040404040404041}], 
                    Row[{"Recall = ", 0.5114285714285715}], 
                    Row[{"FScore = ", 0.6532846715328468}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "566", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9664310954063604`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{566, " example", "s", " of class ", "died"}], 
                    Row[{"Recall = ", 0.9664310954063604}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "350", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5114285714285715`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{350, " example", "s", " of class ", "survived"}], 
                    Row[{"Recall = ", 0.5114285714285715}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "718", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7618384401114207`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{718, " example", "s", " classified as ", "died"}], 
                    Row[{"Precision = ", 0.7618384401114207}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "198", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9040404040404041`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{198, " example", "s", " classified as ", 
                    "survived"}], 
                    Row[{"Precision = ", 0.9040404040404041}]}], 
                    "Tooltip"]& ]},
                    Frame->True,
                    FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                    FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"died\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"survived\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["566", TraditionalForm]}, {0.5, 
                    FormBox["350", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["718", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["198", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"died\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"survived\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                    FrameTicksStyle->13,
                    GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                    ImageSize->181.2,
                    
                    Method->{
                    "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02],
                     "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                    PlotRangePadding->None],
                    Alignment->Center,
                    StripOnInput->False], "\[SpanFromLeft]"}
                 },
                 AutoDelete->False,
                 ColumnsEqual->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
                 GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], 
                    Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}],
                "Grid"],
               FrameMargins->{{10, 10}, {10, 5}},
               FrameStyle->None,
               StripOnInput->False],
              Deploy,
              DefaultBaseStyle->"Deploy"],
             Alignment->Center,
             
             BaseStyle->{
              FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI",
                NumberMarks -> False, Deployed -> False},
             StripOnInput->False]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], 
              Offset[0.8], {
               Offset[0.4]}, 
              Offset[0.2]}}],
         Background->GrayLevel[1],
         FrameMargins->{{0, 0}, {0, 0}},
         FrameStyle->GrayLevel[0.85],
         RoundingRadius->5,
         StripOnInput->False],
        StripOnInput->False,
        LineBreakWithin->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      ClassifierMeasurementsObject[<|
       "Model" -> ClassifierFunction[<|
          "ExampleNumber" -> 916, "ClassNumber" -> 2, 
           "Input" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal"|>, 
                  "f2" -> <|"Type" -> "Numerical"|>, 
                  "f3" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor[
                    "Transpose", <|"FeatureNumber" -> 3|>], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "SynthesizeMissingValues", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Distribution" -> 
                    LearnedDistribution[<|
                    "ExampleNumber" -> 916, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|"f2" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|"(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9924763087166281, 
                    0.06962246892396884, -0.10071488696884714`}, \
{-0.12176028349302224`, 0.6475982344553933, -0.7521907737362618}, {
                    0.012853404215050985`, 0.7587945957577639, 
                    0.6512031568173609}}, 
                    "Precisions" -> {1.1096705122951698`, 11.071379162604247`,
                     14.504654820468707`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001752264873371586, 0.09643725350844203, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.1851587, "MaxTrainingMemory" -> 
                    2049992, "DataMemory" -> 106416, "FunctionMemory" -> 
                    64512, "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 10, 11, 15, 6, 12.0230906`8.832591076175953}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146168`, -1.997829760914916, -1.976574768503185, \
-1.9695170466598357`, -1.9059724997243812`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714302`, -1.7810711623410056`}, 
                    "LeftBoundary" -> -2.0628669170146168`, "LeftScale" -> 
                    0.12459852713774523`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[5.892604950680779, 0.13867820062256261`], 
                    "EntropySampleSize" -> 10|>], 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "EvaluationStrategy" -> "ModeFinding", 
                    "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
                  MachineLearning`MLProcessor[
                  "Threads", <|
                   "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                  MachineLearning`MLProcessor[
                  "Standardize", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.018970775438927`}, 
                    "StandardDeviation" -> {12.892103992603547`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 0, 
                    "Version" -> {14.1, 0}, "ID" -> 3653976628138478392, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Imputed"|>]|>, 
           "Output" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"died" -> 1, "survived" -> 2|>}, 
                    "MissingCode" -> 0, "Version" -> {14.1, 0}, "ID" -> 
                    2833981340056725226, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FromVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
             "Marginal" -> <|
              "died" -> 0.6176470588235294, "survived" -> 
               0.3823529411764706|>|>, "LabelSplitter" -> 
           MachineLearning`MLProcessor[
            "FeatureLabelSplit", <|
             "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
              "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
           "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic,
            "Prior" -> Automatic, "Utility" -> 
           SparseArray[
            Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
           "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
           Automatic, "BatchProcessing" -> Automatic, 
           "Model" -> <|
            "Tree" -> MachineLearning`DecisionTree[<|
               "FeatureIndices" -> 
                RawArray["Integer16",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                  1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
                  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 
                  4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
                  6, 6, 6, 6}], "NumericalThresholds" -> CompressedData["
1:eJwdyH0s1HEcwPFTZ/7oNBPH2CFGdyKHlofUT+LatbFmNku4o+7caHkaJRVD
HppW1rCbxpGshKPDHNq3kEaOhbujhTh33FB3caRwfb798d5rex9PTI3kmZBI
pATIJs6qiD1Kev80tjVtous3+jHKevV3T4+GU8luQmsdUvHHKPThDaSW9nNf
V60hp6WLkkdNq8hswdeMJlWhlBBvJ23ZDNKTiyvtjipQCr+G3c4dRJboFLPQ
cYjgM5KvVnvKiOi1S3RjpIyIldxjWFQsEu8mOcuLAxpia1tJBHnpiEqyjXvC
5iYx3i9+aZ9EDt5n6RhBzVo0cahqLBA86TpRgBW19HpjC8Oz6Nh+ce+EP5i8
f4KNveHpMPOlaIioZSXpJ0FxqCl9CtyI9QrAGuMZgmkw23u+TQ5GuIxsY++0
XP6mAGXGAd9ZkErN2fsKMu8ehM+DBVTbVmyG+y5nAfThyA9/B8+72Q4ONy4R
mSraxn//CMNGwLfILHQUfMxwK2tkDqKztrkW2LxbiaoXYKOwuAmbL/CaagCH
Uos+1oNJTKtwETjGXL/yHBTKG+JqwNvpJseEoOUin1uJf++cNZaijolRj3Sg
cpK75zT4zCiRToL3g+2ov7pUxIc+iQO23Fnrh3ViigOxWfHm41sgz7nviAH8
5OJDU+rWkaGnxB4rF8z6KcASmmu3HDyo7hRhza9HFCznKAhKXnonNneTt4AN
qml3UoPXunemsSrNrrsGXPkcRVoFS3nl7HWww+dm2x6lGT0cFRQbQIbSv0oL
8nmKDI/kdkKT7aE9De5JVuwugKvTc6W1D5YJBfeJDCszZUTVgS1nWHXYzHzD
CrZndrhaBFoYc/rqQWWa47kG0FTLCWje1xM/o2lh2JnOOil2v6Ku6w1YFtK0
g/0Hbsaw7Q==
                 "], "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVkfdTDgAAhh8hZWTvkUj2yMgIlawi4wsZHT534SfuPu6cfyZ7ZWaTkJmZ
vcnK3ruMx9cP7/vce8+Pb9yCpYGFEcCyqHAFgivSQqHgyuzo8MhYsjxvUV4o
MWlxtQ+GU83vzmUcY1nrGmuy0d+24brXPORBT3nSC7bmjKeN56IbXG8aL23A
NFJ5YJmXHUUTrtiMEfz1vLkk04JSW1LkYYdyz+MOYwy//GA7KpxKb974xwCX
jKIu8+jPLOKYyGtfecIS99iVAw6gwC1mUuVzn9mdXmTxyIY89YmPbU9n/tmN
PsSw2U0mUosdbverX1xnEqudwy532pemNKI5+93nOUeTzU1rkMJw7vrNHtwy
kpGUG81Vc2hFsUecwWdrMwntwF5nM54uTKEtgyh0AoO54237MZOOxPLJj87n
oQOpdDqdeGFPzprBW9O5b2N++sP67HabW11lvsc8agRDeO8765DA5PALN6zH
fyEmzI4=
                 "], "LeafValues" -> 
                RawArray["UnsignedInteger8",{{1, 10}, {1, 8}, {2, 1}, {1, 
                  3}, {1, 3}, {9, 1}, {12, 1}, {1, 3}, {1, 4}, {6, 1}, {2, 
                  2}, {3, 1}, {1, 3}, {3, 1}, {1, 3}, {4, 4}, {1, 8}, {7, 
                  1}, {2, 2}, {1, 90}, {12, 1}, {17, 1}, {3, 1}, {1, 5}, {1, 
                  3}, {66, 1}, {1, 6}, {1, 5}, {3, 1}, {2, 2}, {1, 4}, {4, 
                  1}, {1, 2}, {1, 2}, {8, 1}, {2, 2}, {1, 5}, {17, 1}, {38, 
                  1}, {14, 1}, {2, 2}, {1, 29}, {1, 3}, {1, 10}, {1, 3}, {2, 
                  1}, {1, 2}, {1, 6}, {1, 4}, {2, 1}, {5, 1}, {6, 1}, {2, 
                  2}, {1, 3}, {10, 1}, {1, 3}, {2, 2}, {1, 6}, {2, 1}, {2, 
                  2}, {1, 8}, {1, 6}, {2, 1}, {14, 1}, {9, 1}, {1, 2}, {3, 
                  1}, {1, 2}, {4, 1}, {1, 2}, {4, 1}, {2, 4}, {20, 1}, {3, 
                  1}, {1, 2}, {20, 1}, {60, 1}, {1, 5}, {1, 3}, {39, 1}, {4, 
                  2}, {3, 1}, {1, 2}, {1, 4}, {2, 1}, {2, 2}, {9, 1}, {4, 
                  1}, {2, 4}, {27, 1}, {4, 1}, {1, 3}, {9, 1}, {3, 1}, {1, 
                  2}, {1, 3}, {10, 1}, {1, 2}}], "RootIndex" -> 93, 
                "NominalDimension" -> 0|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "(f1f3)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>, 
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                  MachineLearning`MLProcessor[
                  "EmbedNominalVector", <|
                   "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Index" -> {<|1 -> 1, 2 -> 2, 3 -> 3|>, <|
                    1 -> 1, 2 -> 2|>}, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                    "EmbeddingVectors" -> {
                    RawArray["Real32",{{0., 0., 
                    0.}, {-0.8020297288894653, -0.06948617100715637, \
-0.9043995141983032}, {0.5826151371002197, 0.6159605979919434, 
                    0.28722482919692993`}, {
                    0.16030417382717133`, -0.14992104470729828`, 
                    0.3511906564235687}}], 
                    RawArray["Real32",{{0., 0.}, {-0.05088059604167938, 
                    1.1244308948516846`}, {0.06412075459957123, 
                    0.6404573917388916}}]}, "Version" -> {14.1, 0}, "ID" -> 
                    5204932255505181998|>], 
                  MachineLearning`MLProcessor[
                  "MergeVectors", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    1497333623259361766|>], 
                  MachineLearning`MLProcessor[
                  "Values", <|
                   "Info" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Impossible", 
                "StructurePreserving" -> False, "Missing" -> "Imputed"|>], 
             "Calibrator" -> 
             MachineLearning`CalibratorFunction[
              "TemperatureScaling", <|"Theta" -> 0.3742958061838055|>], 
             "Method" -> "DecisionTree", "PostProcessor" -> 
             MachineLearning`MLProcessor["Identity"], 
             "Options" -> <|
              "DistributionSmoothing" -> <|"Value" -> 1, "Options" -> <||>|>, 
               "FeatureFraction" -> <|"Value" -> 1, "Options" -> <||>|>|>|>, 
           "TrainingInformation" -> <|
            "Configurations" -> 
             Dataset[<|<|
                 "Value" -> "DecisionTree", 
                  "Options" -> <|
                   "DistributionSmoothing" -> <|"Value" -> 1|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>|>, "NaiveImputer" -> 
                  Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
                  Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
               TypeSystem`Assoc[
                TypeSystem`Struct[{
                 "Value", "Options", "NaiveImputer", "EMIterations"}, {
                  TypeSystem`Atom[String], 
                  TypeSystem`Assoc[
                   TypeSystem`Atom[String], 
                   TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[Integer]}], 2], TypeSystem`UnknownType, 
                  TypeSystem`UnknownType}], 
                TypeSystem`Assoc[
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
             Dataset[<|
               "Configuration" -> {
                 "DecisionTree", "DistributionSmoothing" -> 1, 
                  "FeatureFraction" -> 1}, "ModelUtility" -> Missing[]|>, 
               TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                 TypeSystem`Tuple[{
                   TypeSystem`Atom[String], TypeSystem`AnyType, 
                   TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
             "InputDimension" -> 3, "OutputDimension" -> 1|>, 
           "AnomalyDetector" -> None, 
           "Log" -> <|
            "Example" -> 
             MachineLearning`MLDataset[<|
               "f1" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                  "ID" -> 7168142382301173801|>, 
                "f2" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                  "ID" -> 1978735388468315165|>, 
                "f3" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, 
                  "ID" -> 9071588231046195481|>|>, <|
               "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                "LogDensityRatios" -> 0, "RawExample" -> False|>], 
             "TrainingTime" -> 0.3903428, "MaxTrainingMemory" -> 2181752, 
             "DataMemory" -> 227152, "FunctionMemory" -> 158840, 
             "LanguageVersion" -> {14.1, 0}, "Date" -> 
             DateObject[{2024, 10, 11, 15, 6, 12.2178033`8.839568085376493}, 
               "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
             "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
             "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
        "TestSet" -> <|
         "Input" -> {{"1st", 29., "female"}, {"1st", 0.9167, "male"}, {
            "1st", 2., "female"}, {"1st", 30., "male"}, {
            "1st", 48., "male"}, {"1st", 63., "female"}, {
            "1st", 71., "male"}, {"1st", 47., "male"}, {
            "1st", 18., "female"}, {"1st", 24., "female"}, {
            "1st", 26., "female"}, {"1st", 80., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 50., "female"}, {
            "1st", 32., "female"}, {"1st", 36., "male"}, {
            "1st", 47., "female"}, {"1st", 26., "male"}, {
            "1st", 42., "female"}, {"1st", 25., "male"}, {
            "1st", 35., "female"}, {"1st", 45., "male"}, {
            "1st", 40., "male"}, {"1st", 30., "female"}, {
            "1st", 22., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 41., "male"}, {"1st", 48., "male"}, {
            "1st", 
             Missing[], "male"}, {"1st", 44., "female"}, {
            "1st", 59., "female"}, {"1st", 45., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 42., "male"}, {
            "1st", 53., "female"}, {"1st", 36., "male"}, {
            "1st", 58., "female"}, {"1st", 28., "male"}, {
            "1st", 17., "male"}, {"1st", 14., "female"}, {
            "1st", 36., "female"}, {"1st", 49., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 36., "male"}, {
            "1st", 46., "male"}, {"1st", 33., "female"}, {
            "1st", 36., "female"}, {"1st", 30., "female"}, {
            "1st", 45., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 
             Missing[], "male"}, {"1st", 27., "male"}, {
            "1st", 26., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 47., "male"}, {"1st", 37., "male"}, {
            "1st", 39., "male"}, {"1st", 38., "female"}, {
            "1st", 51., "male"}, {"1st", 27., "male"}, {"1st", 31., "male"}, {
            "1st", 31., "male"}, {"1st", 17., "female"}, {
            "1st", 4., "male"}, {"1st", 54., "female"}, {
            "1st", 50., "male"}, {"1st", 48., "female"}, {
            "1st", 48., "female"}, {"1st", 49., "male"}, {
            "1st", 39., "male"}, {"1st", 54., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "female"}, {"1st", 36., "male"}, {
            "1st", 28., "female"}, {"1st", 23., "female"}, {
            "1st", 19., "male"}, {"1st", 64., "male"}, {"1st", 50., "male"}, {
            "1st", 43., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 22., "female"}, {
            "1st", 60., "male"}, {"1st", 48., "female"}, {
            "1st", 37., "male"}, {"1st", 35., "female"}, {
            "1st", 35., "female"}, {"1st", 22., "female"}, {
            "1st", 45., "female"}, {"1st", 24., "male"}, {
            "1st", 49., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 71., "male"}, {
            "1st", 19., "female"}, {"1st", 38., "male"}, {
            "1st", 58., "female"}, {"1st", 46., "male"}, {
            "1st", 25., "male"}, {"1st", 25., "female"}, {
            "1st", 48., "male"}, {"1st", 49., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 45., "male"}, {
            "1st", 35., "female"}, {"1st", 40., "male"}, {
            "1st", 27., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 24., "female"}, {
            "1st", 55., "male"}, {"1st", 52., "female"}, {
            "1st", 42., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 55., "male"}, {
            "1st", 16., "female"}, {"1st", 44., "female"}, {
            "1st", 51., "female"}, {"1st", 42., "male"}, {
            "1st", 35., "female"}, {"1st", 35., "male"}, {
            "1st", 38., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 38., "female"}, {
            "1st", 32.5, "male"}, {"1st", 58., "male"}, {
            "1st", 41., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 42., "male"}, {
            "1st", 45., "female"}, {"1st", 39., "female"}, {
            "1st", 49., "female"}, {"1st", 30., "female"}, {
            "1st", 35., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 42., "male"}, {
            "1st", 55., "female"}, {"1st", 16., "female"}, {
            "1st", 21., "female"}, {"1st", 30., "male"}, {
            "1st", 58., "female"}, {"1st", 30., "male"}, {
            "1st", 18., "female"}, {"1st", 24., "female"}, {
            "1st", 46., "male"}, {"1st", 54., "male"}, {"1st", 36., "male"}, {
            "1st", 
             Missing[], "female"}, {"1st", 30., "male"}, {
            "1st", 55., "male"}, {"1st", 47., "male"}, {"1st", 37., "male"}, {
            "1st", 31., "female"}, {"1st", 23., "female"}, {
            "1st", 58., "male"}, {"1st", 19., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 65., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 45.5, "male"}, {
            "1st", 23., "male"}, {"1st", 29., "male"}, {"1st", 18., "male"}, {
            "1st", 17., "female"}, {"1st", 30., "female"}, {
            "1st", 47., "male"}, {"1st", 56., "female"}, {
            "1st", 38., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "male"}, {"1st", 31., "male"}, {"1st", 45., "male"}, {
            "1st", 
             Missing[], "male"}, {"1st", 36., "male"}, {
            "1st", 33., "female"}, {"1st", 55., "male"}, {
            "1st", 54., "female"}, {"1st", 33., "male"}, {
            "1st", 13., "male"}, {"1st", 18., "female"}, {
            "1st", 21., "female"}, {"1st", 48., "female"}, {
            "1st", 24., "female"}, {"1st", 35., "female"}, {
            "1st", 40., "female"}, {"1st", 50., "male"}, {
            "1st", 39., "female"}, {"1st", 56., "male"}, {
            "1st", 28., "male"}, {"1st", 24., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 18., "female"}, {
            "1st", 24., "male"}, {"1st", 23., "female"}, {
            "1st", 6., "male"}, {"1st", 45., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 32., "male"}, {
            "1st", 62., "male"}, {"1st", 43., "female"}, {
            "1st", 62., "female"}, {"1st", 67., "male"}, {
            "1st", 63., "female"}, {"1st", 48., "female"}, {
            "1st", 18., "female"}, {"1st", 52., "male"}, {
            "1st", 39., "female"}, {"1st", 49., "male"}, {
            "1st", 17., "male"}, {"1st", 39., "female"}, {"1st", 
             Missing[], "female"}, {"1st", 31., "male"}, {
            "1st", 40., "male"}, {"1st", 61., "male"}, {
            "1st", 35., "female"}, {"1st", 64., "male"}, {
            "1st", 60., "female"}, {"1st", 55., "female"}, {
            "1st", 31., "female"}, {"1st", 57., "male"}, {
            "1st", 50., "male"}, {"1st", 27., "male"}, {
            "1st", 21., "female"}, {"1st", 51., "male"}, {
            "1st", 31., "female"}, {"1st", 36., "female"}, {
            "2nd", 30., "male"}, {"2nd", 28., "female"}, {
            "2nd", 25., "male"}, {"2nd", 36., "female"}, {
            "2nd", 57., "male"}, {"2nd", 18., "male"}, {"2nd", 23., "male"}, {
            "2nd", 36., "female"}, {"2nd", 51., "male"}, {
            "2nd", 32., "male"}, {"2nd", 19., "female"}, {
            "2nd", 28., "male"}, {"2nd", 1., "male"}, {
            "2nd", 12., "female"}, {"2nd", 36., "female"}, {
            "2nd", 19., "female"}, {"2nd", 26., "male"}, {
            "2nd", 42., "male"}, {"2nd", 27., "male"}, {
            "2nd", 24., "female"}, {"2nd", 15., "female"}, {
            "2nd", 60., "male"}, {"2nd", 20., "female"}, {
            "2nd", 25., "male"}, {"2nd", 36., "female"}, {
            "2nd", 25., "male"}, {"2nd", 42., "female"}, {
            "2nd", 0.8333, "male"}, {"2nd", 26., "male"}, {
            "2nd", 35., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 44., "female"}, {
            "2nd", 52., "male"}, {"2nd", 29., "female"}, {
            "2nd", 25., "female"}, {"2nd", 45., "female"}, {
            "2nd", 29., "male"}, {"2nd", 28., "female"}, {
            "2nd", 29., "male"}, {"2nd", 28., "male"}, {
            "2nd", 8., "female"}, {"2nd", 31., "female"}, {
            "2nd", 30., "female"}, {"2nd", 
             Missing[], "female"}, {"2nd", 21., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 8., "male"}, {"2nd", 18., "male"}, {
            "2nd", 28., "female"}, {"2nd", 29., "male"}, {
            "2nd", 24., "female"}, {"2nd", 18., "female"}, {
            "2nd", 8., "male"}, {"2nd", 42., "male"}, {
            "2nd", 34., "female"}, {"2nd", 27., "female"}, {
            "2nd", 23., "male"}, {"2nd", 21., "male"}, {"2nd", 18., "male"}, {
            "2nd", 29., "female"}, {"2nd", 18., "male"}, {
            "2nd", 36., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 38., "female"}, {
            "2nd", 38., "male"}, {"2nd", 34., "male"}, {
            "2nd", 34., "female"}, {"2nd", 16., "male"}, {
            "2nd", 26., "male"}, {"2nd", 21., "male"}, {"2nd", 21., "male"}, {
            "2nd", 24., "male"}, {"2nd", 24., "male"}, {"2nd", 34., "male"}, {
            "2nd", 30., "male"}, {"2nd", 52., "male"}, {"2nd", 30., "male"}, {
            "2nd", 6., "female"}, {"2nd", 28., "male"}, {
            "2nd", 30., "male"}, {"2nd", 7., "female"}, {
            "2nd", 45., "female"}, {"2nd", 24., "female"}, {
            "2nd", 24., "female"}, {"2nd", 49., "male"}, {
            "2nd", 55., "female"}, {"2nd", 24., "male"}, {
            "2nd", 32., "male"}, {"2nd", 21., "male"}, {
            "2nd", 18., "female"}, {"2nd", 20., "female"}, {
            "2nd", 23., "male"}, {"2nd", 44., "male"}, {"2nd", 21., "male"}, {
            "2nd", 42., "male"}, {"2nd", 63., "male"}, {"2nd", 33., "male"}, {
            "2nd", 42., "male"}, {"2nd", 24., "female"}, {
            "2nd", 22., "male"}, {"2nd", 23., "female"}, {
            "2nd", 24., "female"}, {"2nd", 
             Missing[], "female"}, {"2nd", 45., "female"}, {
            "2nd", 57., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 26., "female"}, {
            "2nd", 30., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 1., "female"}, {
            "2nd", 25., "male"}, {"2nd", 22., "female"}, {
            "2nd", 17., "female"}, {"2nd", 24., "male"}, {
            "2nd", 50., "male"}, {"2nd", 57., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 1., "male"}, {"2nd", 31., "male"}, {
            "2nd", 24., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 40., "male"}, {"2nd", 32., "male"}, {
            "2nd", 30., "male"}, {"2nd", 13., "female"}, {
            "2nd", 48., "male"}, {"2nd", 70., "male"}, {"2nd", 27., "male"}, {
            "2nd", 54., "male"}, {"2nd", 39., "male"}, {"2nd", 16., "male"}, {
            "2nd", 62., "male"}, {"2nd", 14., "female"}, {
            "2nd", 2., "male"}, {"2nd", 3., "male"}, {"2nd", 26., "male"}, {
            "2nd", 28., "male"}, {"2nd", 39., "male"}, {"2nd", 22., "male"}, {
            "2nd", 
             Missing[], "male"}, {"2nd", 23., "male"}, {"2nd", 29., "male"}, {
            "2nd", 28., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 50., "female"}, {
            "2nd", 19., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 41., "male"}, {
            "2nd", 21., "female"}, {"2nd", 43., "male"}, {
            "2nd", 32., "female"}, {"2nd", 34., "male"}, {
            "2nd", 30., "male"}, {"2nd", 27., "male"}, {
            "2nd", 2., "female"}, {"2nd", 33., "female"}, {
            "2nd", 34., "male"}, {"2nd", 30., "female"}, {
            "2nd", 28., "female"}, {"2nd", 23., "male"}, {
            "2nd", 3., "male"}, {"2nd", 24., "female"}, {
            "2nd", 19., "male"}, {"2nd", 21., "female"}, {
            "2nd", 27., "male"}, {"2nd", 25., "female"}, {
            "2nd", 18., "female"}, {"2nd", 20., "female"}, {
            "2nd", 30., "female"}, {"2nd", 30., "female"}, {
            "2nd", 35., "male"}, {"2nd", 41., "male"}, {"2nd", 25., "male"}, {
            "2nd", 50., "female"}, {"2nd", 23., "male"}, {
            "2nd", 28., "female"}, {"2nd", 27., "female"}, {
            "2nd", 29., "male"}, {"2nd", 27., "female"}, {
            "2nd", 40., "male"}, {"2nd", 23., "male"}, {
            "2nd", 12., "female"}, {"2nd", 40., "female"}, {
            "2nd", 32.5, "female"}, {"2nd", 27., "male"}, {
            "2nd", 29., "female"}, {"2nd", 2., "male"}, {
            "2nd", 0.9167, "female"}, {"2nd", 5., "female"}, {
            "2nd", 33., "female"}, {"2nd", 66., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 26., "female"}, {
            "2nd", 24., "female"}, {"3rd", 16., "male"}, {
            "3rd", 35., "female"}, {"3rd", 16., "female"}, {
            "3rd", 25., "male"}, {"3rd", 20., "male"}, {
            "3rd", 18., "female"}, {"3rd", 30., "male"}, {
            "3rd", 26., "male"}, {"3rd", 0.8333, "male"}, {
            "3rd", 18., "female"}, {"3rd", 26., "male"}, {
            "3rd", 26., "male"}, {"3rd", 20., "male"}, {"3rd", 24., "male"}, {
            "3rd", 25., "male"}, {"3rd", 35., "male"}, {"3rd", 18., "male"}, {
            "3rd", 32., "male"}, {"3rd", 4., "male"}, {"3rd", 2., "female"}, {
            "3rd", 9., "female"}, {"3rd", 27., "male"}, {
            "3rd", 39., "female"}, {"3rd", 20., "male"}, {
            "3rd", 26., "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 24., "male"}, {
            "3rd", 35., "male"}, {"3rd", 5., "male"}, {"3rd", 3., "male"}, {
            "3rd", 13., "male"}, {"3rd", 5., "female"}, {
            "3rd", 23., "male"}, {"3rd", 38., "female"}, {
            "3rd", 45., "female"}, {"3rd", 21., "male"}, {
            "3rd", 23., "male"}, {"3rd", 17., "female"}, {
            "3rd", 30., "male"}, {"3rd", 23., "male"}, {
            "3rd", 13., "female"}, {"3rd", 32., "male"}, {
            "3rd", 33., "female"}, {"3rd", 0.75, "female"}, {
            "3rd", 0.75, "female"}, {"3rd", 24., "female"}, {
            "3rd", 18., "female"}, {"3rd", 40., "male"}, {
            "3rd", 26., "male"}, {"3rd", 20., "male"}, {
            "3rd", 45., "female"}, {"3rd", 27., "female"}, {
            "3rd", 22., "male"}, {"3rd", 19., "male"}, {"3rd", 22., "male"}, {
            "3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 32., "male"}, {
            "3rd", 21., "male"}, {"3rd", 18., "male"}, {"3rd", 6., "male"}, {
            "3rd", 9., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 40., "male"}, {
            "3rd", 32., "female"}, {"3rd", 21., "male"}, {
            "3rd", 22., "female"}, {"3rd", 20., "female"}, {
            "3rd", 29., "male"}, {"3rd", 35., "male"}, {"3rd", 19., "male"}, {
            "3rd", 21., "female"}, {"3rd", 30., "female"}, {
            "3rd", 18., "male"}, {"3rd", 38., "male"}, {"3rd", 17., "male"}, {
            "3rd", 17., "male"}, {"3rd", 21., "female"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 28., "male"}, {
            "3rd", 24., "male"}, {"3rd", 16., "female"}, {
            "3rd", 28., "male"}, {"3rd", 24., "male"}, {"3rd", 18., "male"}, {
            "3rd", 24., "male"}, {"3rd", 36., "male"}, {"3rd", 24., "male"}, {
            "3rd", 31., "male"}, {"3rd", 22., "female"}, {
            "3rd", 30., "female"}, {"3rd", 70.5, "male"}, {
            "3rd", 35., "male"}, {"3rd", 27., "male"}, {"3rd", 19., "male"}, {
            "3rd", 30., "male"}, {"3rd", 9., "male"}, {"3rd", 3., "male"}, {
            "3rd", 59., "male"}, {"3rd", 17., "female"}, {
            "3rd", 22.5, "male"}, {"3rd", 45., "male"}, {
            "3rd", 30., "female"}, {"3rd", 0.3333, "male"}, {
            "3rd", 28., "female"}, {"3rd", 25., "male"}, {
            "3rd", 24., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 36., "female"}, {
            "3rd", 16., "male"}, {"3rd", 1., "male"}, {"3rd", 26., "male"}, {
            "3rd", 33., "female"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 36., "male"}, {
            "3rd", 19., "female"}, {"3rd", 17., "male"}, {
            "3rd", 42., "male"}, {"3rd", 43., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32., "male"}, {"3rd", 19., "male"}, {
            "3rd", 30., "female"}, {"3rd", 24., "female"}, {
            "3rd", 23., "female"}, {"3rd", 33., "male"}, {
            "3rd", 65., "male"}, {"3rd", 18., "male"}, {"3rd", 45., "male"}, {
            "3rd", 
             Missing[], "male"}, {"3rd", 17., "male"}, {"3rd", 15., "male"}, {
            "3rd", 47., "male"}, {"3rd", 5., "female"}, {
            "3rd", 40.5, "male"}, {"3rd", 40.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 26., "male"}, {
            "3rd", 21., "female"}, {"3rd", 9., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {"3rd", 16., "male"}, {
            "3rd", 48., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 9., "male"}, {
            "3rd", 41., "male"}, {"3rd", 31., "female"}, {
            "3rd", 9., "male"}, {"3rd", 1., "male"}, {"3rd", 11., "male"}, {
            "3rd", 10., "female"}, {"3rd", 14., "male"}, {
            "3rd", 43., "female"}, {"3rd", 32., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 28., "male"}, {
            "3rd", 19., "male"}, {"3rd", 24., "female"}, {
            "3rd", 17., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28., "male"}, {"3rd", 20., "male"}, {
            "3rd", 23.5, "male"}, {"3rd", 41., "male"}, {
            "3rd", 26., "male"}, {"3rd", 21., "male"}, {
            "3rd", 45., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 11., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 27., "male"}, {
            "3rd", 26., "female"}, {"3rd", 22., "female"}, {
            "3rd", 28., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "female"}, {
            "3rd", 43., "male"}, {"3rd", 27., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 42., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "female"}, {
            "3rd", 29., "male"}, {"3rd", 21., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 48., "male"}, {
            "3rd", 17., "male"}, {"3rd", 34., "male"}, {"3rd", 26., "male"}, {
            "3rd", 29., "male"}, {"3rd", 1., "female"}, {
            "3rd", 19., "male"}, {"3rd", 27., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 23., "male"}, {"3rd", 32., "male"}, {
            "3rd", 27., "male"}, {"3rd", 20., "female"}, {
            "3rd", 21., "female"}, {"3rd", 17., "male"}, {
            "3rd", 30., "male"}, {"3rd", 21., "male"}, {"3rd", 33., "male"}, {
            "3rd", 22., "male"}, {"3rd", 4., "female"}, {
            "3rd", 39., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 44., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "female"}, {
            "3rd", 29., "male"}, {"3rd", 1., "female"}, {
            "3rd", 18., "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 26., "male"}, {"3rd", 29., "male"}, {
            "3rd", 29., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 32., "male"}, {
            "3rd", 34.5, "male"}, {"3rd", 39., "male"}, {
            "3rd", 24., "male"}, {"3rd", 25., "female"}, {
            "3rd", 45., "female"}, {"3rd", 36., "male"}, {
            "3rd", 20., "male"}, {"3rd", 26., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 27., "male"}, {"3rd", 51., "male"}, {
            "3rd", 32., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 29., "male"}, {
            "3rd", 30.5, "female"}, {"3rd", 35., "male"}, {
            "3rd", 33., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 15., "female"}, {
            "3rd", 35., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "male"}, {
            "3rd", 19., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 55.5, "male"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "male"}, {"3rd", 21., "male"}, {
            "3rd", 28., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 6., "male"}, {
            "3rd", 27., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 34., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "male"}, {
            "3rd", 1., "female"}, {"3rd", 20., "male"}, {
            "3rd", 19., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 12., "male"}, {
            "3rd", 14., "female"}, {"3rd", 29., "female"}, {
            "3rd", 28., "male"}, {"3rd", 18., "female"}, {
            "3rd", 26., "female"}, {"3rd", 21., "male"}, {
            "3rd", 39., "male"}, {"3rd", 21., "male"}, {
            "3rd", 28.5, "male"}, {"3rd", 22., "female"}, {
            "3rd", 61., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 23., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 9., "male"}, {
            "3rd", 28., "male"}, {"3rd", 42., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 31., "female"}, {
            "3rd", 28., "male"}, {"3rd", 20., "male"}, {
            "3rd", 23., "female"}, {"3rd", 20., "female"}, {
            "3rd", 20., "male"}, {"3rd", 31., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 2., "male"}, {"3rd", 6., "male"}, {
            "3rd", 8., "female"}, {"3rd", 29., "female"}, {
            "3rd", 1., "male"}, {"3rd", 7., "male"}, {"3rd", 2., "male"}, {
            "3rd", 41., "female"}, {"3rd", 19., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32., "male"}, {
            "3rd", 3., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 22., "male"}, {
            "3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 19., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 38., "male"}, {"3rd", 21., "male"}, {
            "3rd", 10., "male"}, {"3rd", 7., "male"}, {"3rd", 8., "male"}, {
            "3rd", 39., "female"}, {"3rd", 35., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 47., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {
            "3rd", 41., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 50., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 14.5, "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "male"}, {
            "3rd", 21., "female"}, {"3rd", 39., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "female"}, {
            "3rd", 4., "female"}, {"3rd", 25., "male"}, {
            "3rd", 20., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 29., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 40., "male"}, {
            "3rd", 21., "male"}, {"3rd", 18., "female"}, {
            "3rd", 10., "male"}, {"3rd", 9., "female"}, {
            "3rd", 40., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 19., "male"}, {
            "3rd", 30., "male"}, {"3rd", 21., "male"}, {
            "3rd", 60.5, "male"}, {"3rd", 19., "male"}, {
            "3rd", 22., "female"}, {"3rd", 31., "male"}, {
            "3rd", 27., "male"}, {"3rd", 2., "female"}, {
            "3rd", 16., "male"}, {"3rd", 44., "male"}, {"3rd", 25., "male"}, {
            "3rd", 74., "male"}, {"3rd", 14., "male"}, {"3rd", 24., "male"}, {
            "3rd", 34., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 16., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 63., "female"}, {
            "3rd", 11.5, "male"}, {"3rd", 10., "female"}, {
            "3rd", 36., "male"}, {"3rd", 30., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28., "male"}, {"3rd", 28., "male"}, {
            "3rd", 47., "male"}, {"3rd", 31., "male"}, {"3rd", 16., "male"}, {
            "3rd", 31., "female"}, {"3rd", 22., "male"}, {
            "3rd", 20., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28.5, "male"}, {
            "3rd", 27., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 36., "male"}, {"3rd", 27., "male"}, {
            "3rd", 15., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 14.5, "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 26.5, "male"}, {
            "3rd", 29., "male"}}, 
          "Output" -> {
           "survived", "survived", "died", "died", "survived", "survived", 
            "died", "died", "survived", "survived", "survived", "survived", 
            "died", "survived", "survived", "died", "survived", "survived", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "survived", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "survived", "survived", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "survived", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "survived", "died", "died", "survived", "died", "died", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "survived", "survived", "survived", "survived", "survived", 
            "died", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "survived", "died", "survived", "survived", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "died", "survived", "survived", "survived", "died", 
            "died", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "survived", "died", "died", "died", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "survived", "survived", "survived", "died", "died", "died", 
            "survived", "survived", "died", "survived", "died", "survived", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "died", "survived", 
            "survived", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "survived", "died", "died", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "survived", "died", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "died", "survived", "died", "died", "died", "survived", "died", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "survived", "survived", "survived", "died", "survived", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "died", "died", "survived", "survived", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "survived", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "died", "died", "survived", "died", "died", 
            "died", "died", "survived", "died", "died", "died", "died", 
            "died", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "died", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "died", "survived", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "died", "died", "died", "survived", "died", "survived", 
            "died", "survived", "died", "died", "died", "survived", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "survived", "survived", "died", "died", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "survived", 
            "died", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "survived", "died", "died", "survived", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "died", "died", 
            "died", "died", "survived", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "survived", "died", "survived", "survived", "died", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "died", "died", 
            "survived", "died", "died", "died", "died", "survived", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "survived", "died", "died", "died", "died", 
            "survived", "survived", "survived", "died", "died", "died", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "died", "died", "died", 
            "survived", "survived", "survived", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died"}|>, 
        "Predictions" -> {
         "survived", "survived", "survived", "died", "died", "died", "died", 
          "died", "survived", "survived", "survived", "died", "died", 
          "survived", "survived", "died", "survived", "died", "survived", 
          "died", "survived", "survived", "died", "survived", "survived", 
          "died", "died", "died", "died", "survived", "survived", "survived", 
          "died", "died", "survived", "died", "survived", "died", "survived", 
          "survived", "survived", "died", "survived", "died", "died", 
          "survived", "survived", "survived", "survived", "survived", "died", 
          "died", "survived", "died", "died", "died", "died", "survived", 
          "died", "died", "died", "died", "survived", "survived", "survived", 
          "died", "survived", "survived", "died", "died", "survived", "died", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "survived", "survived", "survived", "survived", "survived", "died", 
          "survived", "died", "survived", "died", "survived", "died", "died", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "died", "died", "died", "survived", "died", "survived", "died", 
          "died", "died", "survived", "survived", "survived", "died", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "died", "survived", "died", "survived", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "survived", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "survived", "survived", "died", "survived", "died", "died", "died", 
          "died", "survived", "died", "survived", "survived", "survived", 
          "died", "survived", "died", "died", "died", "died", "survived", 
          "died", "died", "survived", "died", "survived", "died", "survived", 
          "survived", "survived", "survived", "survived", "survived", 
          "survived", "died", "survived", "died", "died", "survived", "died", 
          "survived", "survived", "survived", "survived", "survived", 
          "survived", "died", "died", "survived", "died", "died", "died", 
          "survived", "survived", "died", "survived", "died", "survived", 
          "survived", "survived", "died", "died", "died", "survived", "died", 
          "survived", "survived", "survived", "died", "died", "died", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "died", "survived", "died", "died", "died", "survived", "died", 
          "died", "survived", "died", "survived", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "survived", "died", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "died", "survived", "died", "survived", "died", "survived", 
          "survived", "died", "died", "survived", "died", "died", "survived", 
          "survived", "survived", "survived", "died", "died", "survived", 
          "died", "survived", "died", "survived", "survived", "survived", 
          "died", "survived", "survived", "died", "died", "died", "survived", 
          "died", "died", "died", "survived", "died", "died", "survived", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "survived", "survived", 
          "survived", "survived", "died", "survived", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "survived", "survived", "died", "died", 
          "survived", "died", "survived", "died", "survived", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "survived", "survived", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "survived", "died", 
          "died", "died", "survived", "survived", "died", "survived", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "died", "survived", "survived", "survived", "survived", "survived", 
          "died", "died", "died", "survived", "died", "survived", "survived", 
          "died", "survived", "died", "died", "survived", "survived", 
          "survived", "died", "survived", "survived", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "survived", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died"}, 
        "LogProbabilities" -> CompressedData["
1:eJzVWE1IlFEUnQosKaVFizYpbUKCCcIIImghBSKBJNFiLIJMaJND0CKaFkH2
R1HQDzYURbsyWxRFQcFbGVGGEFmYENmiUJC0kUqZItq0uLM4HM59T1oNl/fe
/e4795x775uVe/JtnfMzmcylBZnM39/qzQe2z+v7FYrtl3vXv+gP4y0/apv3
l0Lr1Mvpq2ffBru+ulS4dbLpTai6eW/g2ofpsGLdaPeq1ndhYc+F2o7yt3B9
0bPStq2fwrmqXP5Ocbxi3drWP7LteRsPOo/2q+udxezFhzumwv2h4cOTXe/l
+BDerH8Unzc+i3P1Y0e7JsKSpf2FL1s+0vll+cfyyeLB5oONj/XHnkf+kL5Z
PFk+quvW/rph9nfTms//flG9QflW+cjyj72Pd3xs/tjvqfryjse7frB8jl1P
YvNTvU/s/oz4oeKn+vPud2jd1hO73657x8va6nzCxsfOJ6rN1nOUL4QHyq+d
B9h6je6D3gN23Rs/Nr9qv/B+33j3Z2sP9jScGml8FY7tbTnRlp8JT4/vbJ9s
+Bl6C7mO0dIgXN89u+xxcePzMLbvzHBfXbliP3ve2igey1+7H9nWH7oP8sfG
j9atfu19VX8oXmvb8+z3WTzV/Kl4oe9b/yyeCB82XsRflH+Wv942ip/VJ4un
xYfVO9KHWl9UvFhb1QfC15t/arwIPxQ/W2/YfKj+WH6g/ageIjxYPnvbrF7R
/dl1tT+q/QbNT976Ym2Wn+x84j3vsv0EnVfnW2++ZXsPXakrDYS7tzc9qDk/
Ex6dPrK2ueZ1KOcnRuoPfq+w7X50Hu3Plna1F5qHwpMby6v7G6f586Rt8YPr
ID4Ur3ofdB7FW2GT/lPzwe6390PxsDbigzce3nxV9cTireKB7uPtT+W7e71z
zjfLb5pPgF/WZvkD90fuD7SexXqq8oHFk+53JD4q31Q+InxU/nv379jzgLvN
6jvy/CHXr/+sn8eev9R5Vp3XUutRfg8kxjv2/OT9PVWfqfUem1+p67X3e4jt
n6reVT1480/lq/d85d0PYr+X3fUjvgfmup57/3+Uej5N/T73rheqHlh+qv00
ef7A/K6e99Zv8vdQZP6p+9X/C1F+2Ple5W/qfuPdL2PPp97zTmw9pX6PpMYv
9X286wOLx1zP27H1zfInNh/m+n0Zux5765vF5w/pDPh9
         "], "CountMatrix" -> {{547, 19, 0}, {171, 179, 0}}, 
        "IndicesMatrix" -> {{CompressedData["
1:eJwl1Hl0CAQcB/CZO2GOvJhhM9fMkWMHJkYxmWmMmGsSpmZz5pqWGWVzHy+v
aJXkKMmdUiTlyntFKUeFzBORI5UcfXr98Xnf/3/v+/2FDs1MHl0sICCgbmBA
QAlZmjKUJ4iqBFOTEEKpTwSRNKElrYgimhhiiSOex+lKIj1IYSCDSWM46WSQ
SRZjmMBkpjKNbPKYxRwKmM8ClrCUZSznNVawkkJWsZo1rGU977KBjexgF/vY
zwEOc4SjHOM7TnCSU/zIGc5xniIucJHLXOM6N7jFX9zmPsUcvSSlKUN5KhBE
ZapRnRoEE0ItahNKGOHUoz4NaEgjImhMJE1oRnNaE00MsbQjjvZ0oCPxdCaB
bnQnkSSS6UUKfelHf1IZwCAGM4Q0hvI0wxhJOqPIIJMsxjKO8UxkElPIJodc
8singLnMZxFLWMpyXqeQVaxjPe+zkQ/YxGa2sJVtbGcHO/mIj9nFJ3zKbvaw
l/0c4CCHOMwRjvEtx/meHzjBSU5xmp/4mTOc5Ry/cJ4iLnCRX7nEZX7jClf5
nWtc5wY3+YNb/Mnf3OYOd7nHfYrZdCDF/9s2JSlFWcpRgYoEUYnKVKEaD1OD
YGoSQi3qEEpY4P8/I5wGNCKCxkTShKY0ozktaElroogmhlja0JZ2xNGeR+lA
R+LpRGceowsJdOMJupNID5LoyZMk04vepNCHvjxFP/qTygAGMpghpDGcEaTz
HKPJZCzjGM8EJjKJKUwjm+nk8CIzyGUms5jNHPIpYB4LWMgiFrOUZbzCq6xg
JYW8wZu8xSreZjXvsIa1rGM977GBjWxiM1vYyja2s4MP2clu9vAZe/mcfXzB
lxzgIIc4zFd8zTcc5RjHOcFpznCW8xRxkUtc5gpXucZ1bnCT2/zDHe5yj/sE
FNdnAilBSUpRmjKU5QHK8SDlqUBFgqhEZapQlYeoTg2CqUkItahNHUIJoy7h
1KM+DWhIIyJoTCRNac4jtKAlrWhNFNHEEEsb2tKOONrTgY7E04kudCWB7iTS
gyR6kkwvepNCH/rSj/6kMoCBDGIIaQzjGUYwknRG8SwZjCaLMYxlIs8ziclM
YSrTyGY6L5DDDHKZSR6zmM1LvMwc8ilgLvNYwEIWsZgl/Avhyv/G
           "], {3, 22, 32, 39, 90, 103, 159, 161, 188, 256, 258, 267, 268, 
           288, 314, 331, 340, 403, 419}, {}}, {CompressedData["
1:eJwV0D1IlAEAgOHPzn4IW6Q6cwmjoiVEaDNy6eQ4B0kXIUg4r4g77RINk4Yj
SNBBRBQiFaIhf9AKx9QK4tIWfzKSpDChQBGCFk2RoOeGZ395S+Lpmjt5QRCM
c5BDFFBImGLOcJZyLnOFCDGqqeU6cRIkSdHGfTI8opc+BhlhimmyzLHMFv/I
F1VBlBSN5EKbaecZzxlmhFHGmOAFL3nNe7J8YJY55llkiU8s85kV1thkl/3c
mANBcJgjHKWAYxznBGFOcZpznOcCZVyikig3iNNAgpvcJkmKJu7STBvtPCBD
B5100U0P/TzmCQMM8ZQJXjHJNDO84S3v+MgCiyzxhRW+sso3vrPGD9b5yS82
2GSL3/xhmx3+ssseoVAQnCRMERcppYKrRKgkRhXXqKOeOA3copE0LbRyj4f0
8B8JMFrp
           "], CompressedData["
1:eJwt0TtIFQAAheFrgaBCFzFRIYoQwRBMTRt0sLCUUERFzMBCFNMhFCoNVCxv
kY9I0kFFzUFxCSJ8VLRkJjQoUg2RDlKEQxCZQyGSSJ/Q8PHv5xyvaSprDAsE
ArPs9wARRBLFIYJEE0Ms8SRwlGMkkkQyJ0ghlZOkkU4GWWSTyxnOksc5CrhA
IUWUUEoZ5VRwkUouUcUVqqmljgau0ch1bnCTFlrp4A6dhLhLF9308ICH9DHA
EMOMMMEkUzzhKc+YZub/fnM85wUvecVr5nnDAm9Z5B1LLLPCez7wkU98ZpU1
1vnCV76xwXd+8JNNfrHFb/6wzQ5/2WWPgw4OJ4JIgkQTw2FiiSOeIySSSjoZ
nCKT0+SQx3nyKaCYEkqpoJLL1HGVepq5RRvtdHCbTkLc4z5ddNNDL308op9B
hhhmhFHGeMw4E/wDerFU0g==
           "], {}}}, "ExtendedClasses" -> {"died", "survived"}, "Weights" -> 
        SparseArray[Automatic, {916}, 1., {1, {{0, 0}, {}}, {}}], 
        "BatchEvaluationTime" -> 0.00012308515283842794`, 
        "SingleEvaluationTime" -> 0.0060801, "Version" -> {14.1, 0}|>]], 
     InterpretationBox[
      TagBox[
       StyleBox[
        FrameBox[GridBox[{
           {
            ItemBox[
             FrameBox[
              StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
               StripOnInput->False,
               FontSize->12],
              FrameMargins->{{10, 5}, {-4, 2}},
              FrameStyle->None,
              StripOnInput->False],
             Alignment->{Left, Bottom},
             Background->RGBColor[0.96, 0.96, 0.96],
             Frame->{{False, False}, {True, False}},
             FrameStyle->Opacity[0.1],
             ItemSize->{Automatic, 1},
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              FrameBox[
               TagBox[GridBox[{
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   
                   InterpretationBox[Cell[
                    "LogisticRegression",ExpressionUUID->
                    "3f544d1e-25e9-274b-8f1e-9d3853bedb48"],
                    TextCell["LogisticRegression"]]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], "916"},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"78.8", "1.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    78.82096069868995869`3., 1.3507141298407625563`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"61.8", "1.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    61.7903930131004415216`3., 1.6063353509365643212`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.6251545140305532211`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0109204359803406481`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.6033136420698719249`3.", "\", \"", 
                    "0.6469953859912345173`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.6033136420698719249`3., ", ", 0.6469953859912345173`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.4697564373512843616`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.017467490719136447`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4348214559130114676`3.", "\", \"", 
                    "0.5046914187895572557`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.4348214559130114676`3., ", ", 0.5046914187895572557`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"5.6`", 
                    
                    RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                    "milliseconds per example", 
                    FractionBox["\"Milliseconds\"", "\"Examples\""]},
                    "Quantity"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"10.`", 
                    
                    RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                    "examples per millisecond", 
                    FractionBox["\"Examples\"", "\"Milliseconds\""]},
                    "Quantity"]},
                  {
                   ItemBox[
                    
                    GraphicsBox[
                    RasterBox[{{{0.9079785091508407, 0.7675843636514958, 
                    0.41748483046765855`}, {0.8677707485775303, 
                    0.5917507878945123, 0.07169695935998854}}, {{1., 0.42, 
                    0.}, {0.9297661733248582, 0.8530488135513573, 
                    0.6251520975676894}}}, {{0, 0}, {2, 2}}, {0, 1}],
                    Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["485", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "485", "\" examples of \"", "\"died\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8110367892976589`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8568904593639576`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8333333333333334`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{485, " examples of ", "died", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8110367892976589}], 
                    Row[{"Recall = ", 0.8568904593639576}], 
                    Row[{"FScore = ", 0.8333333333333334}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["113", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "113", "\" examples of \"", "\"survived\"", 
                    "\" misclassified as \"", "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.18896321070234115`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.32285714285714284`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{113, " examples of ", "survived", 
                    " misclassified as ", "died"}], 
                    Row[{"Column fraction = ", 0.18896321070234115`}], 
                    Row[{"Row fraction = ", 0.32285714285714284`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["81", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" examples of \"", "\"died\"", 
                    "\" misclassified as \"", "\"survived\""}, 
                    "RowDefault"]}, {
                    TemplateBox[{
                    "\"Column fraction = \"", "0.25471698113207547`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.1431095406360424`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " examples of ", "died", " misclassified as ", 
                    "survived"}], 
                    Row[{"Column fraction = ", 0.25471698113207547`}], 
                    Row[{"Row fraction = ", 0.1431095406360424}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["237", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "237", "\" examples of \"", "\"survived\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7452830188679245`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6771428571428572`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.7095808383233533`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{237, " examples of ", "survived", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7452830188679245}], 
                    Row[{"Recall = ", 0.6771428571428572}], 
                    Row[{"FScore = ", 0.7095808383233533}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "566", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8568904593639576`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{566, " example", "s", " of class ", "died"}], 
                    Row[{"Recall = ", 0.8568904593639576}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "350", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6771428571428572`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{350, " example", "s", " of class ", "survived"}], 
                    Row[{"Recall = ", 0.6771428571428572}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "598", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8110367892976589`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{598, " example", "s", " classified as ", "died"}], 
                    Row[{"Precision = ", 0.8110367892976589}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "318", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7452830188679245`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{318, " example", "s", " classified as ", 
                    "survived"}], 
                    Row[{"Precision = ", 0.7452830188679245}]}], 
                    "Tooltip"]& ]},
                    Frame->True,
                    FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                    FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"died\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"survived\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["566", TraditionalForm]}, {0.5, 
                    FormBox["350", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["598", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["318", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"died\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"survived\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                    FrameTicksStyle->13,
                    GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                    ImageSize->181.2,
                    
                    Method->{
                    "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02],
                     "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                    PlotRangePadding->None],
                    Alignment->Center,
                    StripOnInput->False], "\[SpanFromLeft]"}
                 },
                 AutoDelete->False,
                 ColumnsEqual->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
                 GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], 
                    Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}],
                "Grid"],
               FrameMargins->{{10, 10}, {10, 5}},
               FrameStyle->None,
               StripOnInput->False],
              Deploy,
              DefaultBaseStyle->"Deploy"],
             Alignment->Center,
             
             BaseStyle->{
              FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI",
                NumberMarks -> False, Deployed -> False},
             StripOnInput->False]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], 
              Offset[0.8], {
               Offset[0.4]}, 
              Offset[0.2]}}],
         Background->GrayLevel[1],
         FrameMargins->{{0, 0}, {0, 0}},
         FrameStyle->GrayLevel[0.85],
         RoundingRadius->5,
         StripOnInput->False],
        StripOnInput->False,
        LineBreakWithin->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      ClassifierMeasurementsObject[<|
       "Model" -> ClassifierFunction[<|
          "ExampleNumber" -> 916, "ClassNumber" -> 2, 
           "Input" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal"|>, 
                  "f2" -> <|"Type" -> "Numerical"|>, 
                  "f3" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor[
                    "Transpose", <|"FeatureNumber" -> 3|>], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                  MachineLearning`MLProcessor[
                  "SynthesizeMissingValues", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Distribution" -> 
                    LearnedDistribution[<|
                    "ExampleNumber" -> 916, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|"f2" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|"(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9924763087166281, 
                    0.06962246892396884, -0.10071488696884714`}, \
{-0.12176028349302224`, 0.6475982344553933, -0.7521907737362618}, {
                    0.012853404215050985`, 0.7587945957577639, 
                    0.6512031568173609}}, 
                    "Precisions" -> {1.1096705122951698`, 11.071379162604247`,
                     14.504654820468707`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001752264873371586, 0.09643725350844203, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.2126862, "MaxTrainingMemory" -> 
                    2050056, "DataMemory" -> 106416, "FunctionMemory" -> 
                    64512, "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 10, 11, 15, 6, 12.4644016`8.848246389846508}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146168`, -1.997829760914916, -1.976574768503185, \
-1.9695170466598357`, -1.9059724997243812`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714302`, -1.7810711623410056`}, 
                    "LeftBoundary" -> -2.0628669170146168`, "LeftScale" -> 
                    0.12459852713774523`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[5.892604950680779, 0.13867820062256261`], 
                    "EntropySampleSize" -> 10|>], 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "EvaluationStrategy" -> "ModeFinding", 
                    "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
                  MachineLearning`MLProcessor[
                  "Threads", <|
                   "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                  MachineLearning`MLProcessor[
                  "Standardize", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.018970775438927`}, 
                    "StandardDeviation" -> {12.892103992603547`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
                  MachineLearning`MLProcessor[
                  "EmbedNominalVector", <|
                   "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                    "EmbeddingVectors" -> {
                    RawArray["Real32",{{0., 0., 0.}, {
                    0.21963098645210266`, -0.1438339650630951, 
                    0.544792890548706}, {-0.2416929453611374, 
                    0.3798814117908478, 
                    0.6873865127563477}, {-0.9437126517295837, 
                    0.4273325502872467, -1.2217921018600464`}}], 
                    RawArray["Real32",{{0., 0.}, {-0.12253803759813309`, 
                    0.6071814894676208}, {-0.6194148659706116, \
-0.98703533411026}}]}, "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
                  MachineLearning`MLProcessor[
                  "MergeVectors", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    7619735631186802745|>]}, "Invertibility" -> "Impossible", 
                "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
           "Output" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"died" -> 1, "survived" -> 2|>}, 
                    "MissingCode" -> 0, "Version" -> {14.1, 0}, "ID" -> 
                    2833981340056725226, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FromVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
             "Marginal" -> <|
              "died" -> 0.6176470588235294, "survived" -> 
               0.3823529411764706|>|>, "LabelSplitter" -> 
           MachineLearning`MLProcessor[
            "FeatureLabelSplit", <|
             "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
              "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
           "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic,
            "Prior" -> Automatic, "Utility" -> 
           SparseArray[
            Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
           "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
           Automatic, "BatchProcessing" -> Automatic, 
           "Model" -> <|
            "LogProbabilitiesFunction" -> 
             LinearLayer[<|
               "Type" -> "Linear", 
                "Arrays" -> <|
                 "Weights" -> 
                  RawArray["Real32",{{0.3871692717075348, -0.786674439907074, 
                    
                    0.794525682926178, -0.26716524362564087`, \
-0.1982635259628296, -1.372771143913269}}], "Biases" -> 
                  RawArray["Real32",{-0.7363905310630798}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
                  6, "$InputDimensions" -> {6}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
               "Version" -> "14.1.2", "Unstable" -> False|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Weight" -> {0.3333333333333333, 0.9444444444444444, 
                   0.34444444444444444`, 0.34444444444444444`, 
                   0.34444444444444444`, 0.34444444444444444`, 
                   0.34444444444444444`}, "Type" -> "NumericalVector"|>, 
                "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "Calibrator" -> None, "Method" -> "LogisticRegression", 
             "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
             "Options" -> <|
              "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
               "L2Regularization" -> <|"Value" -> 10., "Options" -> <||>|>, 
               "OptimizationMethod" -> <|
                "Value" -> "LBFGS", "Options" -> <||>|>, 
               MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
           "TrainingInformation" -> <|
            "Reporting" -> None, "TrainingFunction" -> Classify, 
             "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
             "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
             0.9355994`7.422634928120078, "LossName" -> "MeanCrossEntropy", 
             "BestModelInformation" -> 
             Dataset[<|
               "MeanCrossEntropy" -> 
                Around[0.5069915913412173, 0.023164486835799566`], "Accuracy" -> 
                Around[0.7923608891741653, 0.020574191906295176`], 
                "EvaluationTime" -> 5.573156776402112*^-6, "TestSize" -> 766, 
                "ModelMemory" -> 9232, 
                "ModelUtility" -> -0.022995469098241017`, "Round" -> 3, 
                "Iteration" -> 11, 
                "Time" -> {
                 1.6283053`7.663280829967164, 1.6695687`7.674149287756113}, 
                "TrainingSize" -> 150, "TrainingTime" -> 0.03162277660168379, 
                "TrainingMemory" -> 104648, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5069915913412173, 0.016379765724300385`]}, 
                "AccuracyHistory" -> {
                  Around[0.7923608891741653, 0.0145481506143747]}, 
                "IterationHistory" -> {11}, 
                "TimeHistory" -> {{
                  1.6283053`7.663280829967164, 1.6695687`7.674149287756113}}, 
                "Configuration" -> {
                 "LogisticRegression", "L1Regularization" -> 0, 
                  "L2Regularization" -> 10., "OptimizationMethod" -> 
                  Automatic, MaxIterations -> 30}, "FinalTrainingSize" -> 
                916|>, 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
             "Configurations" -> 
             Dataset[<|<|
                 "Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 100000.|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.6928323624498461, 0.0034666143328233416`], 
                    "Accuracy" -> 
                    Around[0.6932541238289601, 0.04599631536810039], 
                    "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                    200, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.3271928294755607, "Round" -> 1, 
                    "Iteration" -> 1, 
                    "Time" -> {
                    1.1659474`7.518223951804881, 
                    1.2348001`7.5431416494772705}, "TrainingSize" -> 10, 
                    "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                    300688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6928323624498461, 0.0024512665024978638`]}, 
                    "AccuracyHistory" -> {
                    Around[0.6932541238289601, 0.032524306506378796`]}, 
                    "IterationHistory" -> {1}, 
                    "TimeHistory" -> {{
                    1.1659474`7.518223951804881, 
                    1.2348001`7.5431416494772705}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.6927591298420762, 0.002451281872346834], 
                    "Accuracy" -> 
                    Around[0.7424683440333636, 0.03069574485101578], 
                    "EvaluationTime" -> 5.660722890537325*^-6, "TestSize" -> 
                    400, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.3267943328466181, "Round" -> 2, 
                    "Iteration" -> 5, 
                    "Time" -> {
                    1.4158478`7.602561563818094, 1.4353891`7.608514637476825},
                     "TrainingSize" -> 40, "TrainingTime" -> 
                    0.012589254117941668`, "TrainingMemory" -> 78040, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6927591298420762, 0.0017333180345361031`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7424683440333636, 0.021705169337725306`]}, 
                    "IterationHistory" -> {5}, 
                    "TimeHistory" -> {{
                    1.4158478`7.602561563818094, 
                    1.4353891`7.608514637476825}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.6912888964654801, 0.001938893893437251], 
                    "Accuracy" -> 
                    Around[0.7624286960085747, 0.053373296516817846`], 
                    "EvaluationTime" -> 6.659333253239047*^-6, "TestSize" -> 
                    183., "ModelMemory" -> 9232., 
                    "ModelUtility" -> -0.32452314884527267`, "Round" -> 4, 
                    "Iteration" -> 40, 
                    "Time" -> {
                    6.5347412`8.26677338608009, 6.5587336`8.26836498475788}, 
                    "TrainingSize" -> 733, "TrainingTime" -> 
                    0.01721682899963702, "TrainingMemory" -> 
                    286418.6666666666, "ExperimentCount" -> 2, 
                    "MeanCrossEntropyHistory" -> {
                    Around[0.6916690719894623, 0.0026923645096793274`], 
                    Around[0.6909087209414979, 0.0026852150713985766`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7137152389874902, 0.03332143128175911], 
                    Around[0.8111421530296591, 0.02884964032073664]}, 
                    "IterationHistory" -> {33, 40}, 
                    "TimeHistory" -> {{
                    5.5174606`8.193284234058494, 
                    5.5378615`8.194887083486622}, {
                    6.5347412`8.26677338608009, 
                    6.5587336`8.26836498475788}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 6.659333253239047*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.6912888964654801, 0.001938893893437251], 
                    "ModelMemory" -> 9232., "TrainingMemory" -> 
                    286418.6666666666, "TrainingTime" -> 
                    0.04146778735660217|>, "Index" -> 1|>, <|
                 "Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0.0001|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[2.122733343458516, 0.18652333116759956`], 
                    "Accuracy" -> 
                    Around[0.7770815796770789, 0.01950988670082878], 
                    "EvaluationTime" -> 4.035291342194522*^-6, "TestSize" -> 
                    906, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -1.4632856296997336`, "Round" -> 1, 
                    "Iteration" -> 4, 
                    "Time" -> {
                    1.3683973`7.587757202098547, 1.4136089`7.601874264296265},
                     "TrainingSize" -> 10, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 81944, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[2.122733343458516, 0.13189191231811376`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7770815796770789, 0.01379557318633727]}, 
                    "IterationHistory" -> {4}, 
                    "TimeHistory" -> {{
                    1.3683973`7.587757202098547, 
                    1.4136089`7.601874264296265}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5147360496046184, 0.02861441497460611], 
                    "Accuracy" -> 
                    Around[0.7418739346183433, 0.020854046248822356`], 
                    "EvaluationTime" -> 3.6013547059371745`*^-6, "TestSize" -> 
                    876, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.040115516700205966`, "Round" -> 2, 
                    "Iteration" -> 7, 
                    "Time" -> {
                    1.4852043`7.6233311914319755, 
                    1.5329798`7.637081425710861}, "TrainingSize" -> 40, 
                    "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                    86432, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5147360496046184, 0.02023344686822987]}, 
                    "AccuracyHistory" -> {
                    Around[0.7418739346183433, 0.01474603751772017]}, 
                    "IterationHistory" -> {7}, 
                    "TimeHistory" -> {{
                    1.4852043`7.6233311914319755, 
                    1.5329798`7.637081425710861}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5721988472021796, 0.07236132014575267], 
                    "Accuracy" -> 
                    Around[0.724510241651282, 0.04657582972427154], 
                    "EvaluationTime" -> 6.1865823940298635`*^-6, "TestSize" -> 
                    183, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.1598689095458794, "Round" -> 4, 
                    "Iteration" -> 34, 
                    "Time" -> {
                    5.7587352`8.211872102617512, 5.8170589`8.216248454718354},
                     "TrainingSize" -> 733, "TrainingTime" -> 
                    0.05011872336272722, "TrainingMemory" -> 286248, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5721988472021796, 0.05116718017067244]}, 
                    "AccuracyHistory" -> {
                    Around[0.724510241651282, 0.032934085037422366`]}, 
                    "IterationHistory" -> {34}, 
                    "TimeHistory" -> {{
                    5.7587352`8.211872102617512, 
                    5.8170589`8.216248454718354}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 6.1865823940298635`*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.5721988472021796, 0.07236132014575267], 
                    "ModelMemory" -> 9232, "TrainingMemory" -> 286248, 
                    "TrainingTime" -> 0.09425408710681085|>, "Index" -> 2|>, <|
                 "Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 10.|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.5495986953055956, 0.019806497105161178`], 
                    "Accuracy" -> 
                    Around[0.7838112744892074, 0.019560430033959346`], 
                    "EvaluationTime" -> 3.6013547059371745`*^-6, "TestSize" -> 
                    876, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.10177466949420766`, "Round" -> 2, 
                    "Iteration" -> 8, 
                    "Time" -> {
                    1.5341887`7.637423773140655, 1.5697386`7.647372331236823},
                     "TrainingSize" -> 40, "TrainingTime" -> 
                    0.025118864315095794`, "TrainingMemory" -> 85440, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5495986953055956, 0.01400530841461119]}, 
                    "AccuracyHistory" -> {
                    Around[0.7838112744892074, 0.013831312719937663`]}, 
                    "IterationHistory" -> {8}, 
                    "TimeHistory" -> {{
                    1.5341887`7.637423773140655, 
                    1.5697386`7.647372331236823}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5069915913412173, 0.023164486835799566`], 
                    "Accuracy" -> 
                    Around[0.7923608891741653, 0.020574191906295176`], 
                    "EvaluationTime" -> 5.573156776402112*^-6, "TestSize" -> 
                    766, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.022995469098241017`, "Round" -> 3, 
                    "Iteration" -> 11, 
                    "Time" -> {
                    1.6283053`7.663280829967164, 1.6695687`7.674149287756113},
                     "TrainingSize" -> 150, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 104648, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5069915913412173, 0.016379765724300385`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7923608891741653, 0.0145481506143747]}, 
                    "IterationHistory" -> {11}, 
                    "TimeHistory" -> {{
                    1.6283053`7.663280829967164, 
                    1.6695687`7.674149287756113}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.606910396043657, 0.040920458324858834`], 
                    "Accuracy" -> 
                    Around[0.7028769886637768, 0.08463631381394823], 
                    "EvaluationTime" -> 6.084499257651103*^-6, "TestSize" -> 
                    906., "ModelMemory" -> 9232., 
                    "ModelUtility" -> -0.20718042870185172`, "Round" -> 1, 
                    "Iteration" -> 19, 
                    "Time" -> {
                    4.3087669`8.085897993320701, 4.3426195`8.089296771674753},
                     "TrainingSize" -> 10, "TrainingTime" -> 
                    0.019952623149688785`, "TrainingMemory" -> 
                    78138.66666666666, "ExperimentCount" -> 2, 
                    "MeanCrossEntropyHistory" -> {
                    Around[0.5663943875360774, 0.010580582375903222`], 
                    Around[0.6474264045512366, 0.006831333538885554]}, 
                    "AccuracyHistory" -> {
                    Around[0.7868835915551807, 0.01350241031934863], 
                    Around[0.6188703857723729, 0.015948506026198912`]}, 
                    "IterationHistory" -> {12, 19}, 
                    "TimeHistory" -> {{
                    4.079651`8.062168005787544, 
                    4.1156506`8.065983491526865}, {
                    4.3087669`8.085897993320701, 
                    4.3426195`8.089296771674753}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5773743258963544, 0.06781935786946702], 
                    "Accuracy" -> 
                    Around[0.724510241651282, 0.04657582972427154], 
                    "EvaluationTime" -> 6.8957086828436396`*^-6, "TestSize" -> 
                    183, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.16711597408672219`, "Round" -> 4, 
                    "Iteration" -> 31, 
                    "Time" -> {
                    5.3981184`8.18378739944873, 5.4806466`8.190376792536226}, 
                    "TrainingSize" -> 733, "TrainingTime" -> 
                    0.07943282347242814, "TrainingMemory" -> 286312, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5773743258963544, 0.04795552784521737]}, 
                    "AccuracyHistory" -> {
                    Around[0.724510241651282, 0.032934085037422366`]}, 
                    "IterationHistory" -> {31}, 
                    "TimeHistory" -> {{
                    5.3981184`8.18378739944873, 
                    5.4806466`8.190376792536226}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 6.8957086828436396`*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.5773743258963544, 0.06781935786946702], 
                    "ModelMemory" -> 9232, "TrainingMemory" -> 286312, 
                    "TrainingTime" -> 0.1243828019695899|>, "Index" -> 3|>, <|
                 "Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 10000.|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.6916582109208202, 0.0017373860639825227`], 
                    "Accuracy" -> 
                    Around[0.7736831583579653, 0.020768185218697534`], 
                    "EvaluationTime" -> 5.498510251971174*^-6, "TestSize" -> 
                    800, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.3249987089900759, "Round" -> 2, 
                    "Iteration" -> 10, 
                    "Time" -> {
                    1.6011119`7.65596667885329, 1.6252687`7.66247016513725}, 
                    "TrainingSize" -> 40, "TrainingTime" -> 
                    0.012589254117941668`, "TrainingMemory" -> 78632, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6916582109208202, 0.0012285174673810466`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7736831583579653, 0.014685324601079247`]}, 
                    "IterationHistory" -> {10}, 
                    "TimeHistory" -> {{
                    1.6011119`7.65596667885329, 
                    1.6252687`7.66247016513725}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.6925850545861177, 0.0011942989406118912`], 
                    "Accuracy" -> 
                    Around[0.7713772628621309, 0.019625430028988654`], 
                    "EvaluationTime" -> 4.101837509049173*^-6, "TestSize" -> 
                    906, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.32618040725429565`, "Round" -> 1, 
                    "Iteration" -> 14, 
                    "Time" -> {
                    4.1460955`8.06918429478622, 4.1680814`8.071481185367483}, 
                    "TrainingSize" -> 10, "TrainingTime" -> 
                    0.012589254117941668`, "TrainingMemory" -> 73680, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6925850545861177, 0.000844496879670578]}, 
                    "AccuracyHistory" -> {
                    Around[0.7713772628621309, 0.013877274657199979`]}, 
                    "IterationHistory" -> {14}, 
                    "TimeHistory" -> {{
                    4.1460955`8.06918429478622, 
                    4.1680814`8.071481185367483}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.6789720860576749, 0.004417229935539473], 
                    "Accuracy" -> 
                    Around[0.7624286960085747, 0.053373296516817846`], 
                    "EvaluationTime" -> 7.788445788002592*^-6, "TestSize" -> 
                    183., "ModelMemory" -> 9232., 
                    "ModelUtility" -> -0.3072848585733816, "Round" -> 4, 
                    "Iteration" -> 41, 
                    "Time" -> {
                    6.5627301`8.268629537248408, 6.5903737`8.270455034986247},
                     "TrainingSize" -> 733, "TrainingTime" -> 
                    0.023396783926626794`, "TrainingMemory" -> 
                    288850.6666666666, "ExperimentCount" -> 2, 
                    "MeanCrossEntropyHistory" -> {
                    Around[0.6826060727314138, 0.003772202896718405], 
                    Around[0.675338099383936, 0.0033652464569055673`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7137152389874902, 0.03332143128175911], 
                    Around[0.8111421530296591, 0.02884964032073664]}, 
                    "IterationHistory" -> {32, 41}, 
                    "TimeHistory" -> {{
                    5.4838665`8.190631867217562, 
                    5.5144588`8.193047889835759}, {
                    6.5627301`8.268629537248408, 
                    6.5903737`8.270455034986247}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 7.788445788002592*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.6789720860576749, 0.004417229935539473], 
                    "ModelMemory" -> 9232., "TrainingMemory" -> 
                    288850.6666666666, "TrainingTime" -> 
                    0.041827254222703114`|>, "Index" -> 4|>, <|
                 "Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0.00001|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[2.6034835033304735`, 0.22850320138672567`], 
                    "Accuracy" -> 
                    Around[0.7770815796770789, 0.01950988670082878], 
                    "EvaluationTime" -> 4.395933484013701*^-6, "TestSize" -> 
                    906, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -1.66741153369914, "Round" -> 1, 
                    "Iteration" -> 15, 
                    "Time" -> {
                    4.1710806`8.071793575525223, 4.2159656`8.076442052106742},
                     "TrainingSize" -> 10, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 82128, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[2.6034835033304735`, 0.16157616322338902`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7770815796770789, 0.01379557318633727]}, 
                    "IterationHistory" -> {15}, 
                    "TimeHistory" -> {{
                    4.1710806`8.071793575525223, 
                    4.2159656`8.076442052106742}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5147422408041915, 0.028615233451249517`], 
                    "Accuracy" -> 
                    Around[0.7418739346183433, 0.020854046248822356`], 
                    "EvaluationTime" -> 3.7878511559875038`*^-6, "TestSize" -> 
                    876, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.04012772698764777, "Round" -> 2, 
                    "Iteration" -> 22, 
                    "Time" -> {
                    4.4184326`8.096813228027155, 4.4604319`8.100921906626327},
                     "TrainingSize" -> 40, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 86488, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5147422408041915, 0.020234025618614666`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7418739346183433, 0.01474603751772017]}, 
                    "IterationHistory" -> {22}, 
                    "TimeHistory" -> {{
                    4.4184326`8.096813228027155, 
                    4.4604319`8.100921906626327}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5370673106584146, 0.04795395811349101], 
                    "Accuracy" -> 
                    Around[0.7515232123085116, 0.0351058922111984], 
                    "EvaluationTime" -> 7.254491323345016*^-6, "TestSize" -> 
                    183., "ModelMemory" -> 9232., 
                    "ModelUtility" -> -0.08922810078437593, "Round" -> 4, 
                    "Iteration" -> 39, 
                    "Time" -> {
                    6.2178268`8.245183613928797, 6.3139653`8.251847184283099},
                     "TrainingSize" -> 733, "TrainingTime" -> 
                    0.06674581557515148, "TrainingMemory" -> 
                    287610.6666666666, "ExperimentCount" -> 2, 
                    "MeanCrossEntropyHistory" -> {
                    Around[0.5722013842366427, 0.051167935639610675`], 
                    Around[0.5019332370801866, 0.042376632622516286`]}, 
                    "AccuracyHistory" -> {
                    Around[0.724510241651282, 0.032934085037422366`], 
                    Around[0.7785361829657413, 0.030610774443744465`]}, 
                    "IterationHistory" -> {29, 39}, 
                    "TimeHistory" -> {{
                    5.1816545`8.16601344542138, 
                    5.2464374`8.171409488764334}, {
                    6.2178268`8.245183613928797, 
                    6.3139653`8.251847184283099}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 7.254491323345016*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.5370673106584146, 0.04795395811349101], 
                    "ModelMemory" -> 9232., "TrainingMemory" -> 
                    287610.6666666666, "TrainingTime" -> 
                    0.11503228146776669`|>, "Index" -> 5|>, <|
                 "Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.6929885176248032, 0.0005969180758191512], 
                    "Accuracy" -> 
                    Around[0.6991131693169781, 0.0730170394955145], 
                    "EvaluationTime" -> 3.7833971134659626`*^-6, "TestSize" -> 
                    906., "ModelMemory" -> 9232., 
                    "ModelUtility" -> -0.3265902205594433, "Round" -> 1, 
                    "Iteration" -> 18, 
                    "Time" -> {
                    4.2852751`8.083523700870002, 4.3047317`8.085491081959137},
                     "TrainingSize" -> 10, "TrainingTime" -> 
                    0.009999999999999998, "TrainingMemory" -> 
                    72946.66666666666, "ExperimentCount" -> 2, 
                    "MeanCrossEntropyHistory" -> {
                    Around[0.692987220420572, 0.0008441673826165286], 
                    Around[0.6929898148290342, 0.0008441679075457631]}, 
                    "AccuracyHistory" -> {
                    Around[0.7713772628621309, 0.013877274657199979`], 
                    Around[0.6268490757718252, 0.015913120951265573`]}, 
                    "IterationHistory" -> {16, 18}, 
                    "TimeHistory" -> {{
                    4.2189658`8.076750998391603, 
                    4.239416`8.078851028049584}, {
                    4.2852751`8.083523700870002, 
                    4.3047317`8.085491081959137}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.6928378778625851, 0.0016739284324991566`], 
                    "Accuracy" -> 
                    Around[0.7714832145671765, 0.01991978818645332], 
                    "EvaluationTime" -> 5.445462699031153*^-6, "TestSize" -> 
                    876, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.3266836554136201, "Round" -> 2, 
                    "Iteration" -> 20, 
                    "Time" -> {
                    4.3459592`8.089630638329526, 4.3687965`8.091906809094668},
                     "TrainingSize" -> 40, "TrainingTime" -> 0.01, 
                    "TrainingMemory" -> 77640, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[0.6928378778625851, 0.0011836461458411215`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7714832145671765, 0.01408541730644082]}, 
                    "IterationHistory" -> {20}, 
                    "TimeHistory" -> {{
                    4.3459592`8.089630638329526, 
                    4.3687965`8.091906809094668}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.692674942459773, 0.0018934556164296467`], 
                    "Accuracy" -> 
                    Around[0.7624286960085747, 0.053373296516817846`], 
                    "EvaluationTime" -> 7.254491323345016*^-6, "TestSize" -> 
                    183., "ModelMemory" -> 9232., 
                    "ModelUtility" -> -0.32651192484884417`, "Round" -> 4, 
                    "Iteration" -> 37, 
                    "Time" -> {
                    5.9978526`8.229540782062992, 6.1054853`8.237265183437069},
                     "TrainingSize" -> 733, "TrainingTime" -> 
                    0.04389928794974075, "TrainingMemory" -> 286624., 
                    "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                    Around[0.6927131786291589, 0.0026772643795382454`], 
                    Around[0.6926367062903871, 0.0026771447733780797`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7137152389874902, 0.03332143128175911], 
                    Around[0.8111421530296591, 0.02884964032073664]}, 
                    "IterationHistory" -> {26, 37}, 
                    "TimeHistory" -> {{
                    5.0585507`8.15557110062225, 
                    5.0803954`8.157442507621548}, {
                    5.9978526`8.229540782062992, 
                    6.1054853`8.237265183437069}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 7.254491323345016*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.692674942459773, 0.0018934556164296467`], 
                    "ModelMemory" -> 9232., "TrainingMemory" -> 286624., 
                    "TrainingTime" -> 0.06485913746516034|>, "Index" -> 6|>, <|
                 "Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0.001|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[1.6535553563621763`, 0.1455851206338388], 
                    "Accuracy" -> 
                    Around[0.7770815796770789, 0.01950988670082878], 
                    "EvaluationTime" -> 4.035291342194522*^-6, "TestSize" -> 
                    906, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -1.2135430433385748`, "Round" -> 1, 
                    "Iteration" -> 17, 
                    "Time" -> {
                    4.2414516`8.079059509046115, 4.2829434`8.083287328637324},
                     "TrainingSize" -> 10, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 82000, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[1.6535553563621763`, 0.10294422604004898`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7770815796770789, 0.01379557318633727]}, 
                    "IterationHistory" -> {17}, 
                    "TimeHistory" -> {{
                    4.2414516`8.079059509046115, 
                    4.2829434`8.083287328637324}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5107300218797126, 0.02952988101198171], 
                    "Accuracy" -> 
                    Around[0.7457900135162899, 0.021673769763398586`], 
                    "EvaluationTime" -> 5.660722890537325*^-6, "TestSize" -> 
                    800, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.0327430946547721, "Round" -> 2, 
                    "Iteration" -> 21, 
                    "Time" -> {
                    4.3718328`8.092208537572834, 4.4163882`8.096612234328529},
                     "TrainingSize" -> 40, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 86488, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5107300218797126, 0.020880779111204135`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7457900135162899, 0.015325669573575092`]}, 
                    "IterationHistory" -> {21}, 
                    "TimeHistory" -> {{
                    4.3718328`8.092208537572834, 
                    4.4163882`8.096612234328529}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5721954258114013, 0.0723591338904639], 
                    "Accuracy" -> 
                    Around[0.724510241651282, 0.04657582972427154], 
                    "EvaluationTime" -> 6.1865823940298635`*^-6, "TestSize" -> 
                    183, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.15986233234367553`, "Round" -> 4, 
                    "Iteration" -> 27, 
                    "Time" -> {
                    5.0823936`8.157613288938547, 5.1426892`8.162735271889854},
                     "TrainingSize" -> 733, "TrainingTime" -> 
                    0.05011872336272722, "TrainingMemory" -> 286376, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5721954258114013, 0.051165634254732355`]}, 
                    "AccuracyHistory" -> {
                    Around[0.724510241651282, 0.032934085037422366`]}, 
                    "IterationHistory" -> {27}, 
                    "TimeHistory" -> {{
                    5.0823936`8.157613288938547, 
                    5.1426892`8.162735271889854}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 6.1865823940298635`*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.5721954258114013, 0.0723591338904639], 
                    "ModelMemory" -> 9232, "TrainingMemory" -> 286376, 
                    "TrainingTime" -> 0.09425408710681085|>, "Index" -> 7|>, <|
                 "Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0.1|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.7854141893751735, 0.06814151217344809], 
                    "Accuracy" -> 
                    Around[0.7802160202088798, 0.019315646729522386`], 
                    "EvaluationTime" -> 6.277497724411115*^-6, "TestSize" -> 
                    906, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.46881865992998994`, "Round" -> 1, 
                    "Iteration" -> 3, 
                    "Time" -> {
                    1.317183`7.571191110423609, 1.3663519`7.587107558541528}, 
                    "TrainingSize" -> 10, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 81952, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7854141893751735, 0.04818332533815082]}, 
                    "AccuracyHistory" -> {
                    Around[0.7802160202088798, 0.013658224785449037`]}, 
                    "IterationHistory" -> {3}, 
                    "TimeHistory" -> {{
                    1.317183`7.571191110423609, 
                    1.3663519`7.587107558541528}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5147845052231148, 0.030848719545912527`], 
                    "Accuracy" -> 
                    Around[0.7527621084483795, 0.022981278414572186`], 
                    "EvaluationTime" -> 5.75341582686084*^-6, "TestSize" -> 
                    700, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.04106675814670968, "Round" -> 2, 
                    "Iteration" -> 6, 
                    "Time" -> {
                    1.4383891`7.609421376848011, 1.4830241`7.6226932021184}, 
                    "TrainingSize" -> 40, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 86496, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5147845052231148, 0.02181333878183674]}, 
                    "AccuracyHistory" -> {
                    Around[0.7527621084483795, 0.01625021780728002]}, 
                    "IterationHistory" -> {6}, 
                    "TimeHistory" -> {{
                    1.4383891`7.609421376848011, 
                    1.4830241`7.6226932021184}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5722284248452572, 0.07228903599665538], 
                    "Accuracy" -> 
                    Around[0.724510241651282, 0.04657582972427154], 
                    "EvaluationTime" -> 7.788445788002592*^-6, "TestSize" -> 
                    183, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.15989468473384683`, "Round" -> 4, 
                    "Iteration" -> 30, 
                    "Time" -> {
                    5.2678562`8.173178904736577, 5.3951217`8.183546239186322},
                     "TrainingSize" -> 733, "TrainingTime" -> 
                    0.12589254117941673`, "TrainingMemory" -> 286752, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5722284248452572, 0.05111606755867345]}, 
                    "AccuracyHistory" -> {
                    Around[0.724510241651282, 0.032934085037422366`]}, 
                    "IterationHistory" -> {30}, 
                    "TimeHistory" -> {{
                    5.2678562`8.173178904736577, 
                    5.3951217`8.183546239186322}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 7.788445788002592*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.5722284248452572, 0.07228903599665538], 
                    "ModelMemory" -> 9232, "TrainingMemory" -> 286752, 
                    "TrainingTime" -> 0.18894551564717593`|>, "Index" -> 
                  8|>, <|"Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 1000.|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.681639282004578, 0.002101960243143695], 
                    "Accuracy" -> 
                    Around[0.7768170107187629, 0.020654013762807056`], 
                    "EvaluationTime" -> 5.822935529103476*^-6, "TestSize" -> 
                    800, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.3105216865117696, "Round" -> 2, 
                    "Iteration" -> 9, 
                    "Time" -> {
                    1.5717388`7.647925367804962, 1.5991024`7.65542126858118}, 
                    "TrainingSize" -> 40, "TrainingTime" -> 
                    0.015848931924611134`, "TrainingMemory" -> 79800, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.681639282004578, 0.0014863103417114307`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7768170107187629, 0.014604593190401149`]}, 
                    "IterationHistory" -> {9}, 
                    "TimeHistory" -> {{
                    1.5717388`7.647925367804962, 
                    1.5991024`7.65542126858118}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.6890105290021672, 0.0012483835355718727`], 
                    "Accuracy" -> 
                    Around[0.7701724122206496, 0.019663712538288254`], 
                    "EvaluationTime" -> 5.050132571137552*^-6, "TestSize" -> 
                    906, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.32102338988338597`, "Round" -> 1, 
                    "Iteration" -> 13, 
                    "Time" -> {
                    4.1186964`8.066304773637833, 4.1428161`8.068840648848854},
                     "TrainingSize" -> 10, "TrainingTime" -> 
                    0.012589254117941668`, "TrainingMemory" -> 74672, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6890105290021672, 0.0008827404635245087]}, 
                    "AccuracyHistory" -> {
                    Around[0.7701724122206496, 0.013904344479126562`]}, 
                    "IterationHistory" -> {13}, 
                    "TimeHistory" -> {{
                    4.1186964`8.066304773637833, 
                    4.1428161`8.068840648848854}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.621426577877582, 0.02453463928744212], 
                    "Accuracy" -> 
                    Around[0.7651084284470573, 0.05091663272875066], 
                    "EvaluationTime" -> 6.186582394029863*^-6, "TestSize" -> 
                    183., "ModelMemory" -> 9232., 
                    "ModelUtility" -> -0.22528752024887966`, "Round" -> 4, 
                    "Iteration" -> 38, 
                    "Time" -> {
                    6.1094825`8.237549418646438, 6.2136076`8.2448888168379}, 
                    "TrainingSize" -> 733, "TrainingTime" -> 
                    0.050079242876730524`, "TrainingMemory" -> 
                    286477.3333333333, "ExperimentCount" -> 2, 
                    "MeanCrossEntropyHistory" -> {
                    Around[0.6440930760385891, 0.015409943547030914`], 
                    Around[0.5987600797165749, 0.011843217589012665`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7190747038644556, 0.03313343128446832], 
                    Around[0.8111421530296591, 0.02884964032073664]}, 
                    "IterationHistory" -> {28, 38}, 
                    "TimeHistory" -> {{
                    5.1459343`8.16300923061134, 
                    5.1786564`8.165762090353931}, {
                    6.1094825`8.237549418646438, 
                    6.2136076`8.2448888168379}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 6.186582394029863*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.621426577877582, 0.02453463928744212], 
                    "ModelMemory" -> 9232., "TrainingMemory" -> 
                    286477.3333333333, "TrainingTime" -> 
                    0.07843090528761953|>, "Index" -> 9|>, <|
                 "Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[3.092189384670039, 0.27121848172109886`], 
                    "Accuracy" -> 
                    Around[0.7770815796770789, 0.01950988670082878], 
                    "EvaluationTime" -> 4.101837509049173*^-6, "TestSize" -> 
                    906, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -1.8394292671507815`, "Round" -> 1, 
                    "Iteration" -> 2, 
                    "Time" -> {
                    1.2454999`7.546888690499409, 1.3152201`7.570543430897227},
                     "TrainingSize" -> 10, "TrainingTime" -> 
                    0.05011872336272722, "TrainingMemory" -> 82328, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[3.092189384670039, 0.19178042760810868`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7770815796770789, 0.01379557318633727]}, 
                    "IterationHistory" -> {2}, 
                    "TimeHistory" -> {{
                    1.2454999`7.546888690499409, 
                    1.3152201`7.570543430897227}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5147482638518698, 0.028616140168859258`], 
                    "Accuracy" -> 
                    Around[0.7418739346183433, 0.020854046248822356`], 
                    "EvaluationTime" -> 3.4532153099863514`*^-6, "TestSize" -> 
                    876, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.04013964743691201, "Round" -> 2, 
                    "Iteration" -> 23, 
                    "Time" -> {
                    4.4630164`8.101173476217392, 4.5432606`8.108912642020044},
                     "TrainingSize" -> 40, "TrainingTime" -> 
                    0.07943282347242814, "TrainingMemory" -> 245016, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5147482638518698, 0.020234666764785136`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7418739346183433, 0.01474603751772017]}, 
                    "IterationHistory" -> {23}, 
                    "TimeHistory" -> {{
                    4.4630164`8.101173476217392, 
                    4.5432606`8.108912642020044}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5722017435502916, 0.07236253575851744], 
                    "Accuracy" -> 
                    Around[0.724510241651282, 0.04657582972427154], 
                    "EvaluationTime" -> 5.477456105216087*^-6, "TestSize" -> 
                    183, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.15987426015234474`, "Round" -> 4, 
                    "Iteration" -> 36, 
                    "Time" -> {
                    5.8811533`8.221007493502727, 5.9945835`8.229304007463716},
                     "TrainingSize" -> 733, "TrainingTime" -> 0.1, 
                    "TrainingMemory" -> 350256, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[0.5722017435502916, 0.05116803973870171]}, 
                    "AccuracyHistory" -> {
                    Around[0.724510241651282, 0.032934085037422366`]}, 
                    "IterationHistory" -> {36}, 
                    "TimeHistory" -> {{
                    5.8811533`8.221007493502727, 
                    5.9945835`8.229304007463716}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 5.477456105216087*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.5722017435502916, 0.07236253575851744], 
                    "ModelMemory" -> 9232, "TrainingMemory" -> 350256, 
                    "TrainingTime" -> 0.17508461695072178`|>, "Index" -> 
                  10|>, <|"Value" -> "LogisticRegression", 
                  "Options" -> <|
                   "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 1.|>, 
                    "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                    MaxIterations -> <|"Value" -> 30|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.51204488584961, 0.026254760594163158`], 
                    "Accuracy" -> 
                    Around[0.7875959823630763, 0.01942856429454016], 
                    "EvaluationTime" -> 3.6013547059371745`*^-6, "TestSize" -> 
                    876, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.03401946295736924, "Round" -> 2, 
                    "Iteration" -> 24, 
                    "Time" -> {
                    4.5485612`8.10941903592926, 4.8131405`8.13397353281391}, 
                    "TrainingSize" -> 40, "TrainingTime" -> 
                    0.0630957344480193, "TrainingMemory" -> 101640, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.51204488584961, 0.018564919254562117`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7875959823630763, 0.013738069561388178`]}, 
                    "IterationHistory" -> {24}, 
                    "TimeHistory" -> {{
                    4.5485612`8.10941903592926, 
                    4.8131405`8.13397353281391}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5481891871041183, 0.03680681832775478], 
                    "Accuracy" -> 
                    Around[0.7770815796770789, 0.01950988670082878], 
                    "EvaluationTime" -> 4.178525460133728*^-6, "TestSize" -> 
                    906, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.10536413766478236`, "Round" -> 1, 
                    "Iteration" -> 25, 
                    "Time" -> {
                    5.016903`8.1519806976786, 5.0565174`8.15539649952748}, 
                    "TrainingSize" -> 10, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 82192, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5481891871041183, 0.026026350833456707`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7770815796770789, 0.01379557318633727]}, 
                    "IterationHistory" -> {25}, 
                    "TimeHistory" -> {{
                    5.016903`8.1519806976786, 
                    5.0565174`8.15539649952748}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5726011976885326, 0.07170524970276555], 
                    "Accuracy" -> 
                    Around[0.724510241651282, 0.04657582972427154], 
                    "EvaluationTime" -> 7.788445788002592*^-6, "TestSize" -> 
                    183, "ModelMemory" -> 9232, 
                    "ModelUtility" -> -0.16033096519737045`, "Round" -> 4, 
                    "Iteration" -> 35, 
                    "Time" -> {
                    5.8197085`8.21644622556649, 5.8781565`8.220786138039921}, 
                    "TrainingSize" -> 733, "TrainingTime" -> 
                    0.05011872336272722, "TrainingMemory" -> 286248, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5726011976885326, 0.05070326831150019]}, 
                    "AccuracyHistory" -> {
                    Around[0.724510241651282, 0.032934085037422366`]}, 
                    "IterationHistory" -> {35}, 
                    "TimeHistory" -> {{
                    5.8197085`8.21644622556649, 
                    5.8781565`8.220786138039921}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 7.788445788002592*^-6, 
                    "MeanCrossEntropy" -> 
                    Around[0.5726011976885326, 0.07170524970276555], 
                    "ModelMemory" -> 9232, "TrainingMemory" -> 286248, 
                    "TrainingTime" -> 0.12572704495314635`|>, "Index" -> 
                  11|>|>, 
               TypeSystem`Assoc[
                TypeSystem`Struct[{"Value", "Options"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["LogisticRegression"]], 
                  TypeSystem`Assoc[TypeSystem`AnyType, 
                   TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
                
                TypeSystem`Struct[{
                 "Experiments", "PredictedPerformances", "Index"}, {
                  TypeSystem`Vector[
                   
                   TypeSystem`Struct[{
                    "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                    "TestSize", "ModelMemory", "ModelUtility", "Round", 
                    "Iteration", "Time", "TrainingSize", "TrainingTime", 
                    "TrainingMemory", "ExperimentCount", 
                    "MeanCrossEntropyHistory", "AccuracyHistory", 
                    "IterationHistory", "TimeHistory"}, {
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Vector[
                    TypeSystem`AnyType, TypeSystem`AnyLength], 
                    TypeSystem`Vector[
                    TypeSystem`AnyType, TypeSystem`AnyLength], 
                    TypeSystem`Vector[
                    TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                    TypeSystem`Vector[
                    TypeSystem`Vector[
                    TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
                   TypeSystem`AnyLength], 
                  
                  TypeSystem`Struct[{
                   "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                    "TrainingMemory", "TrainingTime"}, {
                    TypeSystem`Atom[Real], TypeSystem`AnyType, 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Real]}], 
                  TypeSystem`Atom[Integer]}], 11], <||>], 
             "TrainingSizes" -> {10, 40, 150, 733}, "MaxTrainingSize" -> 916, 
             "PreprocessorEvaluationTime" -> 4.26875*^-6, 
             "PreprocessorMemory" -> 99192, "InputDimension" -> 6, 
             "OutputDimension" -> 1, 
             "BaselineLogProbability" -> -0.6652042646399302, 
             "VariableBudget" -> True, 
             "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
             False, "NaturalStop" -> True, "AbortStop" -> False, 
             "RoundPartitioning" -> 
             Dataset[{<|
                "TrainingSizes" -> 10, "TimeBudgets" -> 0.5210167716762126, 
                 "ElapsedTimes" -> 0.5218776, "ExperimentCounts" -> 13|>, <|
                "TrainingSizes" -> 40, "TimeBudgets" -> 0.7443096738231625, 
                 "ElapsedTimes" -> 0.8585877, "ExperimentCounts" -> 11|>, <|
                "TrainingSizes" -> 150, "TimeBudgets" -> 1.0632995340330806`, 
                 "ElapsedTimes" -> 2.4493458, "ExperimentCounts" -> 1|>, <|
                "TrainingSizes" -> 733, "TimeBudgets" -> 1.518999334332965, 
                 "ElapsedTimes" -> 1.4956051999999997`, "ExperimentCounts" -> 
                 16|>}, 
               TypeSystem`Vector[
                
                TypeSystem`Struct[{
                 "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                  "ExperimentCounts"}, {
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
           None, "Log" -> <|
            "Example" -> 
             MachineLearning`MLDataset[<|
               "f1" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                  "ID" -> 7168142382301173801|>, 
                "f2" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                  "ID" -> 1978735388468315165|>, 
                "f3" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, 
                  "ID" -> 9071588231046195481|>|>, <|
               "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                "LogDensityRatios" -> 0, "RawExample" -> False|>], 
             "TrainingTime" -> 6.6970557, "MaxTrainingMemory" -> 12122600, 
             "DataMemory" -> 227152, "FunctionMemory" -> 337520, 
             "LanguageVersion" -> {14.1, 0}, "Date" -> 
             DateObject[{2024, 10, 11, 15, 6, 18.9367886`9.02988127103831}, 
               "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
             "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
             "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
        "TestSet" -> <|
         "Input" -> {{"1st", 29., "female"}, {"1st", 0.9167, "male"}, {
            "1st", 2., "female"}, {"1st", 30., "male"}, {
            "1st", 48., "male"}, {"1st", 63., "female"}, {
            "1st", 71., "male"}, {"1st", 47., "male"}, {
            "1st", 18., "female"}, {"1st", 24., "female"}, {
            "1st", 26., "female"}, {"1st", 80., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 50., "female"}, {
            "1st", 32., "female"}, {"1st", 36., "male"}, {
            "1st", 47., "female"}, {"1st", 26., "male"}, {
            "1st", 42., "female"}, {"1st", 25., "male"}, {
            "1st", 35., "female"}, {"1st", 45., "male"}, {
            "1st", 40., "male"}, {"1st", 30., "female"}, {
            "1st", 22., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 41., "male"}, {"1st", 48., "male"}, {
            "1st", 
             Missing[], "male"}, {"1st", 44., "female"}, {
            "1st", 59., "female"}, {"1st", 45., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 42., "male"}, {
            "1st", 53., "female"}, {"1st", 36., "male"}, {
            "1st", 58., "female"}, {"1st", 28., "male"}, {
            "1st", 17., "male"}, {"1st", 14., "female"}, {
            "1st", 36., "female"}, {"1st", 49., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 36., "male"}, {
            "1st", 46., "male"}, {"1st", 33., "female"}, {
            "1st", 36., "female"}, {"1st", 30., "female"}, {
            "1st", 45., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 
             Missing[], "male"}, {"1st", 27., "male"}, {
            "1st", 26., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 47., "male"}, {"1st", 37., "male"}, {
            "1st", 39., "male"}, {"1st", 38., "female"}, {
            "1st", 51., "male"}, {"1st", 27., "male"}, {"1st", 31., "male"}, {
            "1st", 31., "male"}, {"1st", 17., "female"}, {
            "1st", 4., "male"}, {"1st", 54., "female"}, {
            "1st", 50., "male"}, {"1st", 48., "female"}, {
            "1st", 48., "female"}, {"1st", 49., "male"}, {
            "1st", 39., "male"}, {"1st", 54., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "female"}, {"1st", 36., "male"}, {
            "1st", 28., "female"}, {"1st", 23., "female"}, {
            "1st", 19., "male"}, {"1st", 64., "male"}, {"1st", 50., "male"}, {
            "1st", 43., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 22., "female"}, {
            "1st", 60., "male"}, {"1st", 48., "female"}, {
            "1st", 37., "male"}, {"1st", 35., "female"}, {
            "1st", 35., "female"}, {"1st", 22., "female"}, {
            "1st", 45., "female"}, {"1st", 24., "male"}, {
            "1st", 49., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 71., "male"}, {
            "1st", 19., "female"}, {"1st", 38., "male"}, {
            "1st", 58., "female"}, {"1st", 46., "male"}, {
            "1st", 25., "male"}, {"1st", 25., "female"}, {
            "1st", 48., "male"}, {"1st", 49., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 45., "male"}, {
            "1st", 35., "female"}, {"1st", 40., "male"}, {
            "1st", 27., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 24., "female"}, {
            "1st", 55., "male"}, {"1st", 52., "female"}, {
            "1st", 42., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 55., "male"}, {
            "1st", 16., "female"}, {"1st", 44., "female"}, {
            "1st", 51., "female"}, {"1st", 42., "male"}, {
            "1st", 35., "female"}, {"1st", 35., "male"}, {
            "1st", 38., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 38., "female"}, {
            "1st", 32.5, "male"}, {"1st", 58., "male"}, {
            "1st", 41., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 42., "male"}, {
            "1st", 45., "female"}, {"1st", 39., "female"}, {
            "1st", 49., "female"}, {"1st", 30., "female"}, {
            "1st", 35., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 42., "male"}, {
            "1st", 55., "female"}, {"1st", 16., "female"}, {
            "1st", 21., "female"}, {"1st", 30., "male"}, {
            "1st", 58., "female"}, {"1st", 30., "male"}, {
            "1st", 18., "female"}, {"1st", 24., "female"}, {
            "1st", 46., "male"}, {"1st", 54., "male"}, {"1st", 36., "male"}, {
            "1st", 
             Missing[], "female"}, {"1st", 30., "male"}, {
            "1st", 55., "male"}, {"1st", 47., "male"}, {"1st", 37., "male"}, {
            "1st", 31., "female"}, {"1st", 23., "female"}, {
            "1st", 58., "male"}, {"1st", 19., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 65., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 45.5, "male"}, {
            "1st", 23., "male"}, {"1st", 29., "male"}, {"1st", 18., "male"}, {
            "1st", 17., "female"}, {"1st", 30., "female"}, {
            "1st", 47., "male"}, {"1st", 56., "female"}, {
            "1st", 38., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "male"}, {"1st", 31., "male"}, {"1st", 45., "male"}, {
            "1st", 
             Missing[], "male"}, {"1st", 36., "male"}, {
            "1st", 33., "female"}, {"1st", 55., "male"}, {
            "1st", 54., "female"}, {"1st", 33., "male"}, {
            "1st", 13., "male"}, {"1st", 18., "female"}, {
            "1st", 21., "female"}, {"1st", 48., "female"}, {
            "1st", 24., "female"}, {"1st", 35., "female"}, {
            "1st", 40., "female"}, {"1st", 50., "male"}, {
            "1st", 39., "female"}, {"1st", 56., "male"}, {
            "1st", 28., "male"}, {"1st", 24., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 18., "female"}, {
            "1st", 24., "male"}, {"1st", 23., "female"}, {
            "1st", 6., "male"}, {"1st", 45., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 32., "male"}, {
            "1st", 62., "male"}, {"1st", 43., "female"}, {
            "1st", 62., "female"}, {"1st", 67., "male"}, {
            "1st", 63., "female"}, {"1st", 48., "female"}, {
            "1st", 18., "female"}, {"1st", 52., "male"}, {
            "1st", 39., "female"}, {"1st", 49., "male"}, {
            "1st", 17., "male"}, {"1st", 39., "female"}, {"1st", 
             Missing[], "female"}, {"1st", 31., "male"}, {
            "1st", 40., "male"}, {"1st", 61., "male"}, {
            "1st", 35., "female"}, {"1st", 64., "male"}, {
            "1st", 60., "female"}, {"1st", 55., "female"}, {
            "1st", 31., "female"}, {"1st", 57., "male"}, {
            "1st", 50., "male"}, {"1st", 27., "male"}, {
            "1st", 21., "female"}, {"1st", 51., "male"}, {
            "1st", 31., "female"}, {"1st", 36., "female"}, {
            "2nd", 30., "male"}, {"2nd", 28., "female"}, {
            "2nd", 25., "male"}, {"2nd", 36., "female"}, {
            "2nd", 57., "male"}, {"2nd", 18., "male"}, {"2nd", 23., "male"}, {
            "2nd", 36., "female"}, {"2nd", 51., "male"}, {
            "2nd", 32., "male"}, {"2nd", 19., "female"}, {
            "2nd", 28., "male"}, {"2nd", 1., "male"}, {
            "2nd", 12., "female"}, {"2nd", 36., "female"}, {
            "2nd", 19., "female"}, {"2nd", 26., "male"}, {
            "2nd", 42., "male"}, {"2nd", 27., "male"}, {
            "2nd", 24., "female"}, {"2nd", 15., "female"}, {
            "2nd", 60., "male"}, {"2nd", 20., "female"}, {
            "2nd", 25., "male"}, {"2nd", 36., "female"}, {
            "2nd", 25., "male"}, {"2nd", 42., "female"}, {
            "2nd", 0.8333, "male"}, {"2nd", 26., "male"}, {
            "2nd", 35., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 44., "female"}, {
            "2nd", 52., "male"}, {"2nd", 29., "female"}, {
            "2nd", 25., "female"}, {"2nd", 45., "female"}, {
            "2nd", 29., "male"}, {"2nd", 28., "female"}, {
            "2nd", 29., "male"}, {"2nd", 28., "male"}, {
            "2nd", 8., "female"}, {"2nd", 31., "female"}, {
            "2nd", 30., "female"}, {"2nd", 
             Missing[], "female"}, {"2nd", 21., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 8., "male"}, {"2nd", 18., "male"}, {
            "2nd", 28., "female"}, {"2nd", 29., "male"}, {
            "2nd", 24., "female"}, {"2nd", 18., "female"}, {
            "2nd", 8., "male"}, {"2nd", 42., "male"}, {
            "2nd", 34., "female"}, {"2nd", 27., "female"}, {
            "2nd", 23., "male"}, {"2nd", 21., "male"}, {"2nd", 18., "male"}, {
            "2nd", 29., "female"}, {"2nd", 18., "male"}, {
            "2nd", 36., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 38., "female"}, {
            "2nd", 38., "male"}, {"2nd", 34., "male"}, {
            "2nd", 34., "female"}, {"2nd", 16., "male"}, {
            "2nd", 26., "male"}, {"2nd", 21., "male"}, {"2nd", 21., "male"}, {
            "2nd", 24., "male"}, {"2nd", 24., "male"}, {"2nd", 34., "male"}, {
            "2nd", 30., "male"}, {"2nd", 52., "male"}, {"2nd", 30., "male"}, {
            "2nd", 6., "female"}, {"2nd", 28., "male"}, {
            "2nd", 30., "male"}, {"2nd", 7., "female"}, {
            "2nd", 45., "female"}, {"2nd", 24., "female"}, {
            "2nd", 24., "female"}, {"2nd", 49., "male"}, {
            "2nd", 55., "female"}, {"2nd", 24., "male"}, {
            "2nd", 32., "male"}, {"2nd", 21., "male"}, {
            "2nd", 18., "female"}, {"2nd", 20., "female"}, {
            "2nd", 23., "male"}, {"2nd", 44., "male"}, {"2nd", 21., "male"}, {
            "2nd", 42., "male"}, {"2nd", 63., "male"}, {"2nd", 33., "male"}, {
            "2nd", 42., "male"}, {"2nd", 24., "female"}, {
            "2nd", 22., "male"}, {"2nd", 23., "female"}, {
            "2nd", 24., "female"}, {"2nd", 
             Missing[], "female"}, {"2nd", 45., "female"}, {
            "2nd", 57., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 26., "female"}, {
            "2nd", 30., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 1., "female"}, {
            "2nd", 25., "male"}, {"2nd", 22., "female"}, {
            "2nd", 17., "female"}, {"2nd", 24., "male"}, {
            "2nd", 50., "male"}, {"2nd", 57., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 1., "male"}, {"2nd", 31., "male"}, {
            "2nd", 24., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 40., "male"}, {"2nd", 32., "male"}, {
            "2nd", 30., "male"}, {"2nd", 13., "female"}, {
            "2nd", 48., "male"}, {"2nd", 70., "male"}, {"2nd", 27., "male"}, {
            "2nd", 54., "male"}, {"2nd", 39., "male"}, {"2nd", 16., "male"}, {
            "2nd", 62., "male"}, {"2nd", 14., "female"}, {
            "2nd", 2., "male"}, {"2nd", 3., "male"}, {"2nd", 26., "male"}, {
            "2nd", 28., "male"}, {"2nd", 39., "male"}, {"2nd", 22., "male"}, {
            "2nd", 
             Missing[], "male"}, {"2nd", 23., "male"}, {"2nd", 29., "male"}, {
            "2nd", 28., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 50., "female"}, {
            "2nd", 19., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 41., "male"}, {
            "2nd", 21., "female"}, {"2nd", 43., "male"}, {
            "2nd", 32., "female"}, {"2nd", 34., "male"}, {
            "2nd", 30., "male"}, {"2nd", 27., "male"}, {
            "2nd", 2., "female"}, {"2nd", 33., "female"}, {
            "2nd", 34., "male"}, {"2nd", 30., "female"}, {
            "2nd", 28., "female"}, {"2nd", 23., "male"}, {
            "2nd", 3., "male"}, {"2nd", 24., "female"}, {
            "2nd", 19., "male"}, {"2nd", 21., "female"}, {
            "2nd", 27., "male"}, {"2nd", 25., "female"}, {
            "2nd", 18., "female"}, {"2nd", 20., "female"}, {
            "2nd", 30., "female"}, {"2nd", 30., "female"}, {
            "2nd", 35., "male"}, {"2nd", 41., "male"}, {"2nd", 25., "male"}, {
            "2nd", 50., "female"}, {"2nd", 23., "male"}, {
            "2nd", 28., "female"}, {"2nd", 27., "female"}, {
            "2nd", 29., "male"}, {"2nd", 27., "female"}, {
            "2nd", 40., "male"}, {"2nd", 23., "male"}, {
            "2nd", 12., "female"}, {"2nd", 40., "female"}, {
            "2nd", 32.5, "female"}, {"2nd", 27., "male"}, {
            "2nd", 29., "female"}, {"2nd", 2., "male"}, {
            "2nd", 0.9167, "female"}, {"2nd", 5., "female"}, {
            "2nd", 33., "female"}, {"2nd", 66., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 26., "female"}, {
            "2nd", 24., "female"}, {"3rd", 16., "male"}, {
            "3rd", 35., "female"}, {"3rd", 16., "female"}, {
            "3rd", 25., "male"}, {"3rd", 20., "male"}, {
            "3rd", 18., "female"}, {"3rd", 30., "male"}, {
            "3rd", 26., "male"}, {"3rd", 0.8333, "male"}, {
            "3rd", 18., "female"}, {"3rd", 26., "male"}, {
            "3rd", 26., "male"}, {"3rd", 20., "male"}, {"3rd", 24., "male"}, {
            "3rd", 25., "male"}, {"3rd", 35., "male"}, {"3rd", 18., "male"}, {
            "3rd", 32., "male"}, {"3rd", 4., "male"}, {"3rd", 2., "female"}, {
            "3rd", 9., "female"}, {"3rd", 27., "male"}, {
            "3rd", 39., "female"}, {"3rd", 20., "male"}, {
            "3rd", 26., "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 24., "male"}, {
            "3rd", 35., "male"}, {"3rd", 5., "male"}, {"3rd", 3., "male"}, {
            "3rd", 13., "male"}, {"3rd", 5., "female"}, {
            "3rd", 23., "male"}, {"3rd", 38., "female"}, {
            "3rd", 45., "female"}, {"3rd", 21., "male"}, {
            "3rd", 23., "male"}, {"3rd", 17., "female"}, {
            "3rd", 30., "male"}, {"3rd", 23., "male"}, {
            "3rd", 13., "female"}, {"3rd", 32., "male"}, {
            "3rd", 33., "female"}, {"3rd", 0.75, "female"}, {
            "3rd", 0.75, "female"}, {"3rd", 24., "female"}, {
            "3rd", 18., "female"}, {"3rd", 40., "male"}, {
            "3rd", 26., "male"}, {"3rd", 20., "male"}, {
            "3rd", 45., "female"}, {"3rd", 27., "female"}, {
            "3rd", 22., "male"}, {"3rd", 19., "male"}, {"3rd", 22., "male"}, {
            "3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 32., "male"}, {
            "3rd", 21., "male"}, {"3rd", 18., "male"}, {"3rd", 6., "male"}, {
            "3rd", 9., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 40., "male"}, {
            "3rd", 32., "female"}, {"3rd", 21., "male"}, {
            "3rd", 22., "female"}, {"3rd", 20., "female"}, {
            "3rd", 29., "male"}, {"3rd", 35., "male"}, {"3rd", 19., "male"}, {
            "3rd", 21., "female"}, {"3rd", 30., "female"}, {
            "3rd", 18., "male"}, {"3rd", 38., "male"}, {"3rd", 17., "male"}, {
            "3rd", 17., "male"}, {"3rd", 21., "female"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 28., "male"}, {
            "3rd", 24., "male"}, {"3rd", 16., "female"}, {
            "3rd", 28., "male"}, {"3rd", 24., "male"}, {"3rd", 18., "male"}, {
            "3rd", 24., "male"}, {"3rd", 36., "male"}, {"3rd", 24., "male"}, {
            "3rd", 31., "male"}, {"3rd", 22., "female"}, {
            "3rd", 30., "female"}, {"3rd", 70.5, "male"}, {
            "3rd", 35., "male"}, {"3rd", 27., "male"}, {"3rd", 19., "male"}, {
            "3rd", 30., "male"}, {"3rd", 9., "male"}, {"3rd", 3., "male"}, {
            "3rd", 59., "male"}, {"3rd", 17., "female"}, {
            "3rd", 22.5, "male"}, {"3rd", 45., "male"}, {
            "3rd", 30., "female"}, {"3rd", 0.3333, "male"}, {
            "3rd", 28., "female"}, {"3rd", 25., "male"}, {
            "3rd", 24., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 36., "female"}, {
            "3rd", 16., "male"}, {"3rd", 1., "male"}, {"3rd", 26., "male"}, {
            "3rd", 33., "female"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 36., "male"}, {
            "3rd", 19., "female"}, {"3rd", 17., "male"}, {
            "3rd", 42., "male"}, {"3rd", 43., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32., "male"}, {"3rd", 19., "male"}, {
            "3rd", 30., "female"}, {"3rd", 24., "female"}, {
            "3rd", 23., "female"}, {"3rd", 33., "male"}, {
            "3rd", 65., "male"}, {"3rd", 18., "male"}, {"3rd", 45., "male"}, {
            "3rd", 
             Missing[], "male"}, {"3rd", 17., "male"}, {"3rd", 15., "male"}, {
            "3rd", 47., "male"}, {"3rd", 5., "female"}, {
            "3rd", 40.5, "male"}, {"3rd", 40.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 26., "male"}, {
            "3rd", 21., "female"}, {"3rd", 9., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {"3rd", 16., "male"}, {
            "3rd", 48., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 9., "male"}, {
            "3rd", 41., "male"}, {"3rd", 31., "female"}, {
            "3rd", 9., "male"}, {"3rd", 1., "male"}, {"3rd", 11., "male"}, {
            "3rd", 10., "female"}, {"3rd", 14., "male"}, {
            "3rd", 43., "female"}, {"3rd", 32., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 28., "male"}, {
            "3rd", 19., "male"}, {"3rd", 24., "female"}, {
            "3rd", 17., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28., "male"}, {"3rd", 20., "male"}, {
            "3rd", 23.5, "male"}, {"3rd", 41., "male"}, {
            "3rd", 26., "male"}, {"3rd", 21., "male"}, {
            "3rd", 45., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 11., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 27., "male"}, {
            "3rd", 26., "female"}, {"3rd", 22., "female"}, {
            "3rd", 28., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "female"}, {
            "3rd", 43., "male"}, {"3rd", 27., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 42., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "female"}, {
            "3rd", 29., "male"}, {"3rd", 21., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 48., "male"}, {
            "3rd", 17., "male"}, {"3rd", 34., "male"}, {"3rd", 26., "male"}, {
            "3rd", 29., "male"}, {"3rd", 1., "female"}, {
            "3rd", 19., "male"}, {"3rd", 27., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 23., "male"}, {"3rd", 32., "male"}, {
            "3rd", 27., "male"}, {"3rd", 20., "female"}, {
            "3rd", 21., "female"}, {"3rd", 17., "male"}, {
            "3rd", 30., "male"}, {"3rd", 21., "male"}, {"3rd", 33., "male"}, {
            "3rd", 22., "male"}, {"3rd", 4., "female"}, {
            "3rd", 39., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 44., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "female"}, {
            "3rd", 29., "male"}, {"3rd", 1., "female"}, {
            "3rd", 18., "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 26., "male"}, {"3rd", 29., "male"}, {
            "3rd", 29., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 32., "male"}, {
            "3rd", 34.5, "male"}, {"3rd", 39., "male"}, {
            "3rd", 24., "male"}, {"3rd", 25., "female"}, {
            "3rd", 45., "female"}, {"3rd", 36., "male"}, {
            "3rd", 20., "male"}, {"3rd", 26., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 27., "male"}, {"3rd", 51., "male"}, {
            "3rd", 32., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 29., "male"}, {
            "3rd", 30.5, "female"}, {"3rd", 35., "male"}, {
            "3rd", 33., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 15., "female"}, {
            "3rd", 35., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "male"}, {
            "3rd", 19., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 55.5, "male"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "male"}, {"3rd", 21., "male"}, {
            "3rd", 28., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 6., "male"}, {
            "3rd", 27., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 34., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "male"}, {
            "3rd", 1., "female"}, {"3rd", 20., "male"}, {
            "3rd", 19., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 12., "male"}, {
            "3rd", 14., "female"}, {"3rd", 29., "female"}, {
            "3rd", 28., "male"}, {"3rd", 18., "female"}, {
            "3rd", 26., "female"}, {"3rd", 21., "male"}, {
            "3rd", 39., "male"}, {"3rd", 21., "male"}, {
            "3rd", 28.5, "male"}, {"3rd", 22., "female"}, {
            "3rd", 61., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 23., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 9., "male"}, {
            "3rd", 28., "male"}, {"3rd", 42., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 31., "female"}, {
            "3rd", 28., "male"}, {"3rd", 20., "male"}, {
            "3rd", 23., "female"}, {"3rd", 20., "female"}, {
            "3rd", 20., "male"}, {"3rd", 31., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 2., "male"}, {"3rd", 6., "male"}, {
            "3rd", 8., "female"}, {"3rd", 29., "female"}, {
            "3rd", 1., "male"}, {"3rd", 7., "male"}, {"3rd", 2., "male"}, {
            "3rd", 41., "female"}, {"3rd", 19., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32., "male"}, {
            "3rd", 3., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 22., "male"}, {
            "3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 19., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 38., "male"}, {"3rd", 21., "male"}, {
            "3rd", 10., "male"}, {"3rd", 7., "male"}, {"3rd", 8., "male"}, {
            "3rd", 39., "female"}, {"3rd", 35., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 47., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {
            "3rd", 41., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 50., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 14.5, "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "male"}, {
            "3rd", 21., "female"}, {"3rd", 39., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "female"}, {
            "3rd", 4., "female"}, {"3rd", 25., "male"}, {
            "3rd", 20., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 29., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 40., "male"}, {
            "3rd", 21., "male"}, {"3rd", 18., "female"}, {
            "3rd", 10., "male"}, {"3rd", 9., "female"}, {
            "3rd", 40., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 19., "male"}, {
            "3rd", 30., "male"}, {"3rd", 21., "male"}, {
            "3rd", 60.5, "male"}, {"3rd", 19., "male"}, {
            "3rd", 22., "female"}, {"3rd", 31., "male"}, {
            "3rd", 27., "male"}, {"3rd", 2., "female"}, {
            "3rd", 16., "male"}, {"3rd", 44., "male"}, {"3rd", 25., "male"}, {
            "3rd", 74., "male"}, {"3rd", 14., "male"}, {"3rd", 24., "male"}, {
            "3rd", 34., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 16., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 63., "female"}, {
            "3rd", 11.5, "male"}, {"3rd", 10., "female"}, {
            "3rd", 36., "male"}, {"3rd", 30., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28., "male"}, {"3rd", 28., "male"}, {
            "3rd", 47., "male"}, {"3rd", 31., "male"}, {"3rd", 16., "male"}, {
            "3rd", 31., "female"}, {"3rd", 22., "male"}, {
            "3rd", 20., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28.5, "male"}, {
            "3rd", 27., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 36., "male"}, {"3rd", 27., "male"}, {
            "3rd", 15., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 14.5, "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 26.5, "male"}, {
            "3rd", 29., "male"}}, 
          "Output" -> {
           "survived", "survived", "died", "died", "survived", "survived", 
            "died", "died", "survived", "survived", "survived", "survived", 
            "died", "survived", "survived", "died", "survived", "survived", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "survived", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "survived", "survived", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "survived", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "survived", "died", "died", "survived", "died", "died", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "survived", "survived", "survived", "survived", "survived", 
            "died", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "survived", "died", "survived", "survived", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "died", "survived", "survived", "survived", "died", 
            "died", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "survived", "died", "died", "died", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "survived", "survived", "survived", "died", "died", "died", 
            "survived", "survived", "died", "survived", "died", "survived", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "died", "survived", 
            "survived", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "survived", "died", "died", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "survived", "died", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "died", "survived", "died", "died", "died", "survived", "died", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "survived", "survived", "survived", "died", "survived", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "died", "died", "survived", "survived", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "survived", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "died", "died", "survived", "died", "died", 
            "died", "died", "survived", "died", "died", "died", "died", 
            "died", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "died", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "died", "survived", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "died", "died", "died", "survived", "died", "survived", 
            "died", "survived", "died", "died", "died", "survived", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "survived", "survived", "died", "died", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "survived", 
            "died", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "survived", "died", "died", "survived", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "died", "died", 
            "died", "died", "survived", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "survived", "died", "survived", "survived", "died", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "died", "died", 
            "survived", "died", "died", "died", "died", "survived", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "survived", "died", "died", "died", "died", 
            "survived", "survived", "survived", "died", "died", "died", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "died", "died", "died", 
            "survived", "survived", "survived", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died"}|>, 
        "Predictions" -> {
         "survived", "survived", "survived", "died", "died", "survived", 
          "died", "died", "survived", "survived", "survived", "died", "died", 
          "survived", "survived", "died", "survived", "died", "survived", 
          "died", "survived", "died", "died", "survived", "survived", "died", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "died", "survived", "died", "survived", "died", "survived", 
          "survived", "survived", "died", "survived", "died", "died", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "survived", "died", "died", "died", "died", "survived", 
          "died", "died", "died", "died", "survived", "survived", "survived", 
          "died", "survived", "survived", "died", "died", "survived", "died", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "died", "survived", "survived", "died", "survived", "died", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "survived", "died", "survived", "died", "survived", "died", "died", 
          "survived", "died", "survived", "died", "died", "survived", "died", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "died", "survived", "survived", "survived", "died", "survived", 
          "died", "died", "died", "survived", "died", "died", "died", 
          "survived", "died", "survived", "survived", "survived", "survived", 
          "died", "died", "died", "survived", "survived", "survived", "died", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "survived", "survived", 
          "died", "survived", "died", "died", "died", "died", "died", "died", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "died", "died", "died", "died", "died", "survived", "died", 
          "survived", "died", "survived", "survived", "survived", "survived", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "died", "died", "survived", "died", "survived", "survived", 
          "died", "survived", "died", "died", "survived", "survived", "died", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "survived", "survived", "survived", "died", "died", "died", 
          "survived", "died", "survived", "survived", "survived", "died", 
          "died", "died", "survived", "died", "survived", "survived", "died", 
          "survived", "died", "survived", "died", "died", "died", "survived", 
          "died", "died", "survived", "died", "died", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "survived", "died", 
          "survived", "died", "survived", "died", "survived", "died", "died", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "survived", "died", "survived", "died", "died", "survived", 
          "survived", "survived", "survived", "died", "died", "died", "died", 
          "survived", "died", "survived", "survived", "died", "died", 
          "survived", "survived", "died", "died", "died", "survived", "died", 
          "died", "died", "survived", "died", "died", "survived", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "survived", "died", "died", "survived", "survived", 
          "survived", "survived", "died", "survived", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "survived", "survived", 
          "survived", "survived", "died", "died", "survived", "died", "died", 
          "survived", "died", "survived", "survived", "died", "died", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "survived", "died", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "died", "survived", "survived", "died", "survived", "survived", 
          "died", "died", "survived", "died", "survived", "died", "survived", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "died", "survived", "died", "survived", "survived", "died", 
          "survived", "died", "died", "survived", "survived", "survived", 
          "died", "survived", "died", "survived", "survived", "survived", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "survived", "died", "died", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "survived", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "survived", 
          "died", "died", "survived", "died", "survived", "survived", 
          "survived", "survived", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "survived", "died", "survived", 
          "died", "survived", "survived", "died", "died", "died", "survived", 
          "survived", "died", "died", "died", "died", "survived", "died", 
          "survived", "died", "died", "survived", "died", "died", "died", 
          "died", "died", "died", "died", "survived", "survived", "died", 
          "died", "died", "died", "died", "died", "died", "died", "survived", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "survived", 
          "died", "died", "died", "died", "died", "died", "survived", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "survived", "survived", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "survived", "survived", "died", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "survived", 
          "died", "survived", "died", "died", "died", "died", "survived", 
          "died", "died", "died", "died", "died", "died", "survived", 
          "survived", "survived", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "died", "died", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "survived", "survived", 
          "survived", "survived", "died", "died", "died", "survived", 
          "survived", "survived", "survived", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "survived", "died", 
          "died", "died", "died", "died", "survived", "died", "survived", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "died", "survived", "died", "died", "died", "survived", "survived", 
          "died", "survived", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "survived", "died", "died", "died", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "died", "died", "survived", "died", "died", "survived", 
          "survived", "died", "survived", "survived", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "survived", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "survived", "survived", "survived", "survived", "died", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "died", "died", "survived", "survived", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "survived", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "survived", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "died", "survived", "died", 
          "died", "survived", "died", "survived", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "survived", "survived", "died", 
          "died"}, "LogProbabilities" -> CompressedData["
1:eJyFWnc81d8fvtfKrFAps0gh27eSmbSorCQNpFRChYwiMitFRpSKqDTtlXm9
P/aeWdn32te69ubn9+/5/NFfXud1zueM9/O8n/dzzrXn+n2Dm3QEAiGUnkD4
/9+uN44xeZ0ETBE62ctDMHAwWK2S6JmArW3Bvrs8OkHX30BTr5IJM017ZZH7
LAGuXXv58c4RMpiaN/PosY+CdK4ya7BSM+gpXtiv8XEaclvPD6n7zkAOk2v+
z/JGkKCaalIUykBmPPS2jsgKqCVHtLtUNcN/HUfOZJ2aBvurDRq7lOmx1Lw2
Rx31THhYLRKiPU7Egm9cjzUqyQXeRnurDA8iNnDjd6GyQx5kX2UTresqgN6e
tnmsch3GKoRP8MV2wa3dJW7rA+NwgMvsd5LmIjT7XTo+HFANohnR7P4qBCxj
7y3elk0FsL0kcftQfyf4b3ulNec3AW+1fDR1rJfgUF+c8MdjlcB3W4PzIZkC
PJETTGc7hmHqKGOD7o0VWPkew6BTUQoMCfc9Nun1wtHkQ03NhsOgRVLxdFda
h++rO/o1PhSCQq7sj6+LLSAb52yyHjEFTg5KpAzhdrjG91BPkTAJk5rp/LXf
CZjFFcdtvWz54HbXwiH4Kh3Gp0jfPySdA6nqhbFXP3dAC03vpq8eDcT0Ze0u
ubTB6IFhDhH9SVy8e9ooT2rmOyEpwZhzxmUCfgbJG3OHL0NhzmnVwN3loB66
nhYzPgulprRRHmjA7e/p17/X3t3sgl31YUGtQhNAi896od30F9z5IYb8eRLs
d6Qr+OxZgFdMtKumdHW4+E3+3XGpSHsOOLY+UQ7QbICthWMX6lko4G9qFZBA
o4JznxtvBtMgJOqzWZpf6YfEFJVLW/gZsPvS6ifdItMhd9nTU7p+DbRyO60a
xYpA9leqa0ZsE8hW79sWMDsN5yt0AnXC1iDj3UUFVdci3PozdSyh7uYtkP+C
PDQ/OQWJhpt6lDYRMN0ym8bmFwW4+dH4o/HI8tGzsX29Bl7U20JNbkWw82x/
hc2NLrhs4nPn854J8HzH35vjQAE1upRHoTepOH4+99SRPSnUDdsS/b1u+I3j
+F4S66S/JtMJXCaSDN5cNGCe+Olxt6YdYq712Iok0WD08p5DU+urUHGGi4dH
txh+uzfmcrxtBK6DRiduf5vBrc9PEzk89KcHOkSM9P9EjOLay2Uz9YIP6LGB
rHH79sAMiBBcnCewjsMuWrBCF9YNjdvY6DgK5uH9zR2tL2zrIG70i1mfUBPI
OL+JfH9uBqIFa6SkmZfA7WL4QiKxCtdG8ULPg86f3J8zUuHfAYYmCcY7L9Pg
Ufi5T9JO61DCxihEOVuIwzdQ+Hx0DzcRO5m461QzPwY7U65yG4vSYZ7mJyrJ
8zkgvz8weJFjAKiL1N3xOgMQcrLKPPlYNfBaHtm503IRd56jsqlpXgp/N3id
vG43OwkM/Qbly8zrEPOSzKPVWYjLR0ctQ5nDp+pgrz+T09P+edz5UTxRPUDb
6PxR32L9NRWWwf5QgoVIQzk8Uf8dYY31wtKWN3qHaodw8T0nYxF+IX8dmGOu
F3CNFuD0tVf7U5ASPT1GEZ4yipzOhJ1bGp96uXXAKd1584FrNFy+ovmD6pv/
Y7u1OxlETLhDX+XOexJOf5bGgqy/fF2E85FnrGyKq+DMWIZBtXwX9O2N6KrU
msDlFxoPVB9RfqthY3cGDndBWHA6d8iJCVx9uCSl8a4wqAFUStTXOrfOAf2u
FdOPngsQaeQa5CpVi9OzLfsu+N1L64Aaj5Clp6dpuO/VrzzW0Y6lx4xtvq+I
9v/G6Wmm7qZyY8oCaGgomqhcqcHNj55vWIY162RUF6TtMFyKpo3j8Ph9Z1t3
3e0uOGfNPcwoOIHLf/GZyy5raj3AMjPoS3s4BjMR1grW4vWgKS3avFlsHlcf
hvqZ5oqPr4Mci53er4BC3P5QvvXI31liDV8Fh+ax3InBYhyeqF6i57EZD9td
1N8O67kH2W2/0nDrmXi98la+MQ8qnlNCOuQ6XHy5vQlxs6/psAnDs/Xa1tk4
f4HyFe3/l39A+d3uEFy3efMfIKlFu0qnz+L0xtJ7s+nV5jW4fPHAo6I9Rbj1
UL78S995xetkue0JGPMj7O+h5/k4/ULxRPP378Cj7GL9jo19tyw8dKDBn19D
bCuuVUD3ikbSrFiEQFFmF5WPXaAYFz/1aHIcqG3nBKTiW+AVtnD9eukUeFc9
ivwq3weqVvZJ1meGgNZk/OZ3NBmkY3LvhbuNgGhE3ZS13wAIqJwg8zb24+oF
ij96Xomfrfe5GOeB5jnMlWpYj+P3mchuVc3odoio6x25V0wD8TqD18wanSAb
sGyyj42Gq1eoXjwb501SHu8E++zr7xe9JnB4ofUexQetP0fsZLXVNvfAI1a5
b/KFY3Dr/TjD+c3DEKHSXUN90YvjE8pPVP9RvqH5r+33nveT7CrkGm4/lupT
gqtHaP7tJTxj09jRALqNx2PV787h/BRaH5gHn1cy3+0GU2wgPPHMOG7/6HiU
f74ZFgbT5FFwnqP7bRXTg4v/WbPx9ypm6xDpndfaZlUIzq1SCzK2PTCvdipV
SGYM7vReVYnoqoHZ0zENQV8XgLnx5o+7q8sQz3ZSWfdBGQSlTCl6d81AELNY
QfyxRshWW7GPWakAdYVsa5OgJdx9AY0veh513mcO4pyNcMHxtzdtHR8/tF6i
/hMdLx9bXjXYvw53miWnU0kFOD6i9embgb/zamotuEW++al0YgGHN+o/asp3
KSq+ngXf9/uV76v+wekhqg9JZz67Pf5YDyFH1Vv1KuZwfEHrI8pP1C+i86N+
uFVxk/fHrAb49Km89dfULOxbkpJj1FiAvvE73xxJtaBww4j05FwTXLzLF/ZW
dgb+U/QfUzKahd98e/60v/4DTznvN0vSFYC5nff3XjUCxhmGPTln+Rcky/wb
lNomYfFon5GEVTNsSnn7nuQ5jfvex3mHqcvpYjh6+KSAN8MaXPM3X35eXA/H
75Ty/Iqdg8dMm77oZS2Dt3RiqMRgGfjI5L/sy/wDL0e3ZjurzMKUb7bOW8Ze
WLR55/M2cRhuVwv2Z71Yg4pWEfZpvyLceuh8V1KUOBILG8GT93mWqN8MOKcP
1horVULk0n2eX/eXoOpizuZGlUZQ7byibUeZAUmfj/VTxYuwldv1Q7hPFbzu
PU7xN1gF+REJjwK9ElDazx/sH4BBzY92PoEeAuZ+/Q3LecNlCPxbclbvbfk/
44n2N5QkpU9pToNChp/7VEMzbE93/7DG0wssTvZTy+HDuP0bWAjFSCXPwvdb
UdaR3H/gbtZ4+GJpA2yPcTy5e2gWvpQNW2i/m4KHfqxwg9AK3+bEYz6nFoHv
0cdOVJs10DU9vN+YPA/hY2JjW87WwUrHQFv1jUUIirl8x/tMNVjIS8yJnpiC
lbC2E+0fWuFAjIR08+E/sKNX8MGht3j+oP0ofk+slQ9k7dyI06LtcxuzAkgb
3H9oQmQeZLqexblL14PV6fsjul7z4LXcrL6QUwfOxOKsZp55+PCd44KNaj3k
cBi+En7dAg/t/TfNN03B3ECs0P1P9TDHe698tXQOPhlnblGS7oGRz8Oxl0PG
AOXnv/aL4k2dPtTTIrgCEzXBS/rKZbj5Uf58ivl9qol9Dm7QSWfKv2kAi2JN
XcNPC9Do5srdMViDyw/0POh+UXzQ/rDjvxvklmvh6H/bLmSIbvhU+nPjvmoN
0PE9y+q1zhxM7t6U4/55Bn74/fRfjWiEus+36vcY1ECJff3su4EFKA9dCtXp
qAPBrm1C127P4/b/5IC189nkNtikHDTheGgSxz90/2j7Fa1JTq+tCXQySs3L
W6dxbXR9VJ9QvqL9L82O1qd5EzDlmKdkolk+jm/o+P7JsP/4dQhYY+jj9y86
83H8RvFH23dF2b7muZWA2ntVxv0HV6FnqcLknsE4HM5qyX5s0Y07H6pvaHxQ
fqH6gfJl77j33LGKcnBIk1iNPbyMmw/lY/afCkqgVR4wfwnQ5vcmYjvv3SgO
060HLtec9zIs87jx6Hm3/sod51lthjF53iSnAxt6PsRMSxBbgtOWcmy3Cypx
4yW2te34mLAAd8X/GPZW1ODii9aPnWN6nRmh9bA1mbV7U8Mc9BlcKjlGtwh/
BF+eVuWpweFn/lnv2i75Bnj2TT6DaDwHOyq3pv0KIWKplUsLTJJ5OD1NXuZz
W3+5BDJHpGitDJWQcOsEz4DPCmx+bymT/LoUh5dte6bvfnIxmFJL7N5ErMKN
uA/acWJjEDXN6u/r0AMLKRNpfHN1MM+QzsduMI+rRzK5pavyG/nXemXsVMNG
/qHxkTNhVH7EXQ9JT4y/TB2ZB2pGrEVebhUcOL1HfOrnIo4v6Pltuye3ywqv
wfb/Lu3IECiG4v3ejoaCpSBO/HvvcM0KlLq46nwYyYSt+U8gjpEeQ+sZ+64d
usJhhRA6j7ELqa9DBqeqE6NvNTC2dWcvnFrE5XtOVJ4lnTZApoP37zdniVgk
5xOl3dmr4BZklqedXgwnxirKNMIpwLEpOOqkIhX4qg7a50lS4MvO3uHSAipO
L9D8RNdH+XZRTeJ5Xn0DMGwbkVrsmcXlw7/qzWOH+fPGrQ3Q+4Xt5r6OWdhW
pPv5axwNjrU+VGdubgf3WsFjaWWtIEZ7+8dIago4bh0ofOxUD/6373ltos4B
596QkkOLlbA1sd7Xm30J0hYq88kTS3DGaGtI65kK4EjRK9zsUQFBqXr7bvxZ
gkvbjpMUS+bg+FwJa8KX+n/qG4rPSxPmKJ6rROx60j6zchYAmpKHgsydORCc
8xUN5mvAzYfWS7S+ofFC8UH5icYDPS+6X9Qv/EvP0P2i7XdvBsJ+WNfBlHPh
hGLJPC7+aH6jeKLnReOB1mOUP2g/mp/o/Kj//NmXezZ9choCbghcpCY3AfOK
k8zHt3OAlT5yON1dj4sfWt/RfEraLf1R8S0RE9GWnarflQc7tv5q8MwiYP1k
HwfoxXD8OPjUWnx2PAfiNtuOFeynwwQchYLZjRogyp1jqFJlDgL0yMP9Txrg
yoLujLUAXm9RPmw5/jF35GIRfFN+4teSsAb9t92Yfnj1Q4Cxy4xf5wC0yZos
uOROgF32dSrLr04YPSC26dZHAGGpw1+sFImYn/nM6Dn5ArCWj3u+4wABM73U
PGT1Yhxcmyd1VgS6YfvRHyIstjlwUErF102bDrOsP6efm5sHa/sK3LruEbGL
W34uWBXUgDljsbZ3ygKg36Pj0Ta6/lsx+4qtmhhEaFhf3E9HxND9CorL2aWV
ZcDYg/IfZdfosc8rmh70aoXwULRdOMpzHTzLnj8Kp2ZBa4WpnmEWHcZLKayU
0qiC3rwFxr7BRbB+S0wMtJqBK+I3+eunGmFW9zd/1NYpYGnoiNJdb4W2kqYB
ApkElxV+VHh+JWJqzHxdZYm9QC1M0yVRhgDdL3oedL9oPNDzoeeplU5PeetR
CW2e2q//aC9BXIFktCNTNbzR4Ep64bsIrw7r7SjiLYG5+MtfDjitgmp+SuTE
jWnYTwyLsIlohjoHo+cs2RgkZm3J2V5FwJ4ryuWQ9vSBfX7vy3jTIRD3JUmZ
S5Dhol2Bhd2eUTjQZnE7LDkfvjIFiPlfI2Do968WDT+ECk/A1eTd9ievd+H4
gI6nMqiNK1fQoE/54NhgWDsOD8UbMnNizgNwbdzkM3GgHyaO05sv/Z0Bvx5x
A1utRlzbp/PVrSDBERiKirBSHyTj+OV26rT4bHga6EvGOte5MPyTX+j5Kx1G
zSY8huF+beLJuAO94Jqx11/mv3yQqOeaPvSGgA2fCJGx+V0AxOeKfgkj67j+
vpU+q3EdgLpAF9rtM/j10POj8Ub5q1IdHxxZVAHMMpFRRglLOH6K6lrEFRkA
HP0czvZYm4jtcbjbVHF8FOjLuUuvcZJx8fBL5/0sPTMAkxzX4+nu9uPwtjAb
zTRTHoWTuQdcGXeSgTDEz37ZbAyudQf4z+n2gETGwONypVxQNawyM+Cmw/EV
jY+HgVzmw6pR+PzY7++u1B7ou9ypWDg9CBXnjOheefQBel6tn6fvNdenw1qY
mVwYCwMW6hVis7+8EJqvTuoSd64D2kbnR88T0KQKj/yo0O/7nNJkTAHZsN8l
W9lI8JiJbHe+g4jTF1Qf/zUe3T/ab/hh8a4jfwbI+Ay3DobT477/0B5ukfAr
G/Ld3Vr+eNLh4o/Gi7tnNYSfEg1BRYEvHe6y4eKP6hWKB5qvFgcXHrvHloH0
afOEIx3LOH1xr3OYOJ30HazGLcfNiplx+X9mZjorfQ4D3Vh2qlAyAbs78WQ0
qyEZiMP9t/aGM2Lo/l9kjtqKStZCS/xruyNeC8BV7GefvjQETgb/LTl96MXV
IzReaL5ppDRf//wKgy8Cw5eiugmYprDpqwiTEdA6WylyJpMMPVOLYZJs/aC9
o2sv99VBXH2cJyUU2UXVgLpOzuuvBQu4+oTqE7q/3Pm6u6dIAPdSClV45IjY
qnWzkk8VCUyftwcl/sLvF+UDwycqB3FmDLQqh9rkOrtx/N4xEjw6aZsKNVxH
EkJGGTAW57RdhN4U6JxuPxUjyojV7V6qGXmDwYPto/I97Xh9QfFH8UD1tPbC
iC9n3AjY9XMO57iTIdWST+q7TBa8kDw4vkqjw0xNiadd2r9A/qjoV+79rDj+
o/h/o97ffjg6F5j5vI0vLBBx+VxfwWxnQS0Cwelw3b0n14DBl3BQqz4JNj+L
lONjY8LQeqbGusJteS4NIEngy39vGTC0bde1Nu7nBDDznOszVQOfnyt8R1br
u4fhoUvP3i9dFGiOKNlFFSSBXZD2ywMtRCzNbtUvLTMPNI7ZnWu/j/cnqN6g
evxOWEXyrH4e8OVXCZj74ddH+Td2WfrV6no3DCTX9/D/HYNoYct5ymGAZdae
o9N6ROz7kZWAnoMYcHVHRakz4/2Ed8+7uqkWgISAnp/lEkRs5Kfi8WeBeWCh
e3vb0iM8/9B8N8r8Zt1PlwbPR+f3fEplwLKlznWxPxiE6+fjT3fM9gE6Hs0X
7b3OdtTLpVBp3Fp94McKuGQYRFWQJuFzE/8oU/RfIEmkYl89iiH3K684tXMV
pBoVZTWWyPD38n3R04wjOD+Q61Kf2aCPQS7HuW9Xlgm4+onqMcpvlM+oXoUd
zWTNCAbgubV7931lIlbXdO7MUXYMlF6WCUTxEXHzo+tz1ol9F3Pf2F/xLo2d
gwQMjR/KF7QeoX6jKHW9u58wAjbE+NDAVTI8ij3yuJRKAnajyx6sX4gYGt+H
3xRqi/JH4Fs0s8ryPTLOn34tEPBbZaaCH3WxJp1EAbSeoOeb9lfgCpUYBX2+
s6EDImTceFRvUH+UWUxdC1UZBRqjvOgBHjJOrzyW1e02a5Jg7oFvZn01EYs5
rxLCbovBj6GbNT5jBEwGW7DtCqHC+fSx7SH6FJy/QOOnMK+5Ras4B7JFYtx4
FOhw+BzQjznYdyEJhOw75PKPM+H0Zse6Qnv2o0wYI3Wn1orR4/BC13cRstJ+
XzgDPH2Kp6esGgHlGxoPbSYhqQepwxDySj7Wka4X2MZbWCyCMei9VLj9Whfe
T6P8R/FE/ReqP+j50PqOxg/Vc1QfaLf2d2RkT8M9+XeGPmzN0Pn78gkVhXTg
n9Z/vucYA5ZGe7ouGp4LaoUXhZyXiNjutqE7o1dJwGd0dWJ/KREDb0dhL5U8
2MYR9yfgFRHrVOIjuFZTgX5UxzRkLwWSHRXGZo1TwCczWbDJlBEzUXx/8gdh
o37NdS5y7CFikWU3nwzFkSCQdvFBWgoR87ISVftkRwK29khacz4R2+xdasx0
YcPvGiWbTmoRcX7pX/iheozqaWyjPevBIhKo7ey6WhG3Ua8qfjxyWSOBTNfB
hW0f8euxvK9lq0shAUXx8On/kvH1At0P2kbj7zdnxhkFABG9emf8ZImY0v1k
urO1w9DAdS97YoQCu/gCK0UcqTCWpC4VaUkBIZ0OL9bHo3AljyoSS+2Bjoe1
2S5JoxC3zDl4oaQHp697PiY1RuzOBFW/soulx+kxFF/Ub6H5ieoX6mfQfET1
qI7h5uR1W4B9XKOiNzSJOL47FFz92zIRD0lix4YMp5hw+aF/ZXbaKIAEv3iS
qiCbiG1z5TZ35cXgHOvPD4vb8PUuN5qdj3xoFDZ7DWvI85GBPmzNcHc+gNae
SEFpWTw+0hc3cUqlDoJT77TEUnYfoP4azZ8fevrMAgcBevOvGX/UJ2KfpC3l
Q5+OgChPu7XgezIMeDCnHn0yCg7VvMH3hnpg6vzxa28nqWDzwYVzDwsFtr80
M+SQpEGgkDHL0dkO3HvN2D3V46Y1JEjs7Qo9/Avvh1H/uPSoYig9nAqCcrM3
tpyjQAuJoSEjexjueN0yCF6hQJ5q4CyT/whYnazdu/sNGWSWoocc1H/BDwPv
YOOFTTi9yNLzXTDfwGsHj535//FC10fHo/WlP6ij7upWEkhMv26ZaiNiTy/a
LIXpUsG/OiJowpeCu9+iesrxzWvbIAMJji3EMIx3bnwf8PPGnEQeZGKpNeMh
RAzVc+EcRf8BRwyeKNdyt1EJWFj9m81rG3wZfXh4d9gGX3jleFhto0dh7rpN
pGX9Rr6cHQkbCQAIGHjlbqRCxEzkV3XbjEfglLpddV0OGecnFimn/kiqAkQX
sOyP1yViHLVhPeEkKmw3msDSZTfwTLN0lnlAhSYTgoGwFQX3PoDqEZovKJ6l
iTfFbhZiwGz93naglIBdeJKVROwBcBQSUu4VI2Iq0eUcjZkl8EujWX9k8ypU
FBzfkelCg4FwwVqyZgcYc8aw6DsNgXv9QXkejj5c/UffT9B8RfFF9QLtX2/N
ElP6nAszTJv1q+fxeqk42xJrYvQNTLbVBC8psWBmh6PvSBYB9M8EBjnKbPgR
crOrVvsInG/lCPS/SoabP/l5r73Lg/YVw4MBzkQsuPrBAPfuPAh5sB7yPYyI
q6cC31qTByRHYPD2Spl3BxmWXBoVxEKpcOiyz8XXeng/1LNmLPMoLBfSe4WO
Si5v+O27dkViW0bhxO6yQ9cPk3H+F40f6ncs33osWQ3kgsA2YVVKPxHnp//l
L9H7F1r/0fHo/G0n50pLeanQunNpICSRAmc3HSP41lVDhd6nMxUii7h8s0gZ
8zxmMQUn5kam/pi34viC+v0e//rf4hwVcPVouoMV1zJufh9xMpdZPQWStLVK
rtKGcX7pB0GZdqI9F2L5jndUDRFx+u4uvMtMk2sGxHOCBX+6NYGHeTVN4Hke
jJfuG6923cjfV4GWezbw5277Khezgb+En/6TYwoAsfeppK0G+PsRmn9ov/hT
5/Q+DQwqRT/UJG/o2fCNWxUBQ1Rg7ImSWtpCwe1/KIJXQE4+F5ze3AyM3k73
z/ddmSevhrxGc4F1d4KPdh8R06B85RRvI4GlWOpBle9ETDH3rvLhBCo8dl3l
81ShwCeR7ctfGAGc027T7zIhYuh7GJpvkVL7D/MTy+ANxvt7QmMFh4+gE93T
fZfLoW9usxm78zKg79dofYvarnPUduM+UsjLYjS0cR+pemrcFW/eA49bD2z4
hTHQPPXVAYvPhYsSrtSCGfz9FsW/ZO7S3pGNeqRDDdcbOEsBJp9zOuENCcAk
1JFvmsmEHar9HS++oadz+sTh/+up+8SyjZMyCTLjrsSV1uLx3Hmp7E4LPwbs
0X07//9/54cS69SqpTAQCbsWscq2cT+XsWB+z4EBFh5quspLxPhFl4D1YDFk
6qtOznOuwU728zytpSMguWFkw6zI0GnY01rwdgT645ecXwSQYXty3eevllT4
QEl8dNGeAjqR3bq7jo2CqYpX1UluMmSl6Hnv4SNBjZdh277WDX9ksRKrywsQ
b29ygMeYiH0TVLpck0QC2xn6mt8bflDO33PVrWIYAj45bq2boODeB1E/j+or
S3R2ituLPOB5RseguMH/Q7Kt0ZJf8iBh7JfsXkcipjmwecpTgAQpLGcXn7cQ
MbReoX7+X7/3tJd8+vGfFwmePTujFU4iYr+WzTj2FOWAdqeNkqUC3r9yskdr
rriPwM3WQcnkKDI8q+tlYV3LA5u5X6cnTTfydazb5mRcHvDVxHQO2uPzEX2f
RvmN5hPKd/T9BZ2vS7ZJkOcSgIcKRM+fJmKq54+0cx3NBQOtn6RBTjqsw50s
tm97LhyJIJ60FaDDQrUy7g9bUMFAW+uShiM+//91v7p/S3hm9dc3qLjY4O4v
wIJ7n0DrD/r+i/ph9Pcp9P0IvU+h+NpfCaPdt/8IMscnGLersWPoewzKR9RP
nXhqo8MSDfDVQ3qZaWO+E3pVThcd8mD3l7NBSR5E7KyoNm/sB4CadY3arUfw
7+e2x79zddQAqM1qjY9LErH5m0JtTVwATjmzVwYuEbE7jdNnwoAK8X/9PsnK
UKDt0o+O+E0bfBnLUij+QMSyqsezTthgoKZLT1CbIGB8C/R5S0558MrI2Z/F
49+/r9k6vPl4TbQZFtpPj7DETgPpWaaICUspUPUvn3Vtx79XofcZ9L2UN5CT
xL8IsDPw+PKSMP69CG2j75ko3iieaD3H3Q+RfEX7NzFRXe8N5IF/bi9PosVG
vEUqpnkIueB8odlUSIQOkxeOJfPL5YHDnp1BN4OJWMLyflU3/ywo/xXOureJ
Dku5V4zd25wHTn+36XG/J2JvXkivxf+FDT8sJGguQcT5O5SvXW4tFM+Neqzs
7+1INMD//oGOR+8/PiGOCd7PAO5UDZzvVCVi0sNkh1PnafDfTReqSEQHyKXk
JwWVUqFYt9N8hzgFxivWGUV08kA40ueUxAv8fe5/flWJnA==
         "], "CountMatrix" -> {{485, 81, 0}, {113, 237, 0}}, 
        "IndicesMatrix" -> {{CompressedData["
1:eJwl021wCAQYB/Bt3hMx2mWztXltbwiL1aYZxWSmadY2skmY2ub91piceSmG
JVyusA+SrNNCKnFR10WWu6JcXqrl4mSXNp1Ksn5dH37/5/vz/J+oqSWZxYEB
AQE/i5ZmG9rSgU50JYQwuhNOJFH0IYY44hnEYB5gCENJJJlUHmU06Ywji1wm
M4UCpjODQoooYTZzWMDzLGIx5axgJaupZD1VbGQTm9nC62xlG9upZgc72cVb
1PA2e6jlAw5xmM84Rh0nOcVpvuUs5zjP99Rz8b+dconLXKGBRpq4zg3+5CbN
BLpBK9rQlg50pBPBhNCNUMIIJ4J7iaIHvehNH/pyH9HEEEsc8fRnAAkMYSiJ
JJHMMFIYTiojSWMMY0kng0wmkEU2OeSSxySeYgr5FDCVp5nGTAqZRRElzGYu
85jPQkopo5ylVLCCNVSylvVsYCOb2MJ2qtnBbmp4h1reZS/72M97HOAgH3GI
w3zMEY7yKcc4zgnqOMlpvuEM33GWc5znAj/wI/VcDPz/1y7zC1dp4Bq/0UgT
v3ODP/iLm9ziH27TTFBQQEALWtKK1rSjPR3pRGeC6UII9xBKGN0JJ4JIouhB
T3oRTQyxxBFPP/ozgIEMIoEhDCWRJJIZxsOkMJxURjCSRxhFGmN4jHTGkcF4
HieTCUwkmyfJIZc8JjGZfAqYTiHPUcxc5jGfBSyklDLKWcJSKljOSlaxmjVU
so4qXmYDm3mV19jKNqp5g528yS52U8MeatnLPvZzgPf5kIMc4Sif8DnH+YIT
1PElX/E1pzjNGc5ygXp+4hJXuEoDv3KNRpq4zk3+5ha3aSaohQ7RmnbcQXvu
pAMduYvOBNOFrtxNN0IJI5wIIomiBz3pRW/60JdoYogljn4M4H4GMojBJPAg
D5HEMFIYTiojGMVo0hhLOuPIYDyZPEEWE8kmh1zymMRk8pnGM8xgJoXM4lmK
KGY2c5jLQkopYxGLKWcJL7CMCpazgpWs4kVeYjVrqGQt66jiFTbyL6FS4Cs=

           "], CompressedData["
1:eJwlzz9KgnEAgOHf9xkoFNgBgnKyE1ganaCW/LMWtbTlKEKDegOTDmC2NDiG
Ti2WYCdolhIcbNHGwAccnumd3sxNtXgXhRAuSJCly4QgxGyzwwEFzijToceA
IW988sWUb2bMWfDLkj+iOIQ0WXIUOOGcMhWuuKXKPU1adHikyxM9nnmhzytD
RrzzwZgfVvzHm9mILZKk2GWPfQ7JccQxeU4pcck1Neo0aPPAGoCNJ9A=
           "], {}}, {CompressedData["
1:eJwVzz0ohAEAxvEXieFKqXNlI2YpGzG54RaiLIp6T6ecr0s6puuKwSRRl07J
oJMuMnKDunxtSjEy2K7MEsrP8Jv/z9MRLo0t1gVBkKGRCK3EaKeTLnrpZ4BB
hkkwwijjTBIywxxpsqyRY4MddilS4pQrKlxT5YYnanzwwy8thkYZYoIUs6SZ
5//IOnmKHHFMiRPKnHFJlVvuuOeFV75pqg+CZiJEidFNH3GmSLLAMhmy5Nhk
i232KLDPAYeUOeeCCg888swb79T45Iu2Bn16iJNgmpAkKVZYJc8fpAg5/g==

           "], CompressedData["
1:eJwt0t1rDQAAxuHD0WpHaG2ylSwtmmRsPi64GG2zaZKzxFFI49RibWGIaRjZ
GW0+LmydcDFRLpZ8pxgiimYbYcvX0sopjV0Yk5JHuXh6/4DfO7W8uqxqVCAQ
GOTfjiaJZEKMZTwTSCGViaSTwRQyyWIa2cxgJjnMZg55zGch+SxmCQUUUswy
SllOmDJWsZo1RFjLOjawkU1EqaCSKrazgxp2sZc6DnCQeg7RQIxGjtFEM6do
oZU4bZznAu1c5gpXucZ1bnCTW9ymg/s84CGPecJTntFJF9308Io39NLHez7S
zycGSPCFr3xjiO8M85Nf/OYPQTHHkEQyIVJIJY1JpDOZLHLIJY+5zGMBiyig
iKUUU8IKVhImwnqibGMnu6llH3Xsp57DHKGBGI0cpZkTnOQ0LbQS5wxnOUcb
F7lEO4/opItuenjBSxKM/D91iHGkkUEm08kmlxLK2UyUCrawlT3UEqOJOHe4
Swf3eE43r+mlj7e84wP9DPCZBIMMMcwPRggGNWEW+RRSRClhIlRSTQ3H+Qvt
y3W9
           "], {}}}, "ExtendedClasses" -> {"died", "survived"}, "Weights" -> 
        SparseArray[Automatic, {916}, 1., {1, {{0, 0}, {}}, {}}], 
        "BatchEvaluationTime" -> 0.0000991792576419214, 
        "SingleEvaluationTime" -> 0.0056069, "Version" -> {14.1, 0}|>]], 
     InterpretationBox[
      TagBox[
       StyleBox[
        FrameBox[GridBox[{
           {
            ItemBox[
             FrameBox[
              StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
               StripOnInput->False,
               FontSize->12],
              FrameMargins->{{10, 5}, {-4, 2}},
              FrameStyle->None,
              StripOnInput->False],
             Alignment->{Left, Bottom},
             Background->RGBColor[0.96, 0.96, 0.96],
             Frame->{{False, False}, {True, False}},
             FrameStyle->Opacity[0.1],
             ItemSize->{Automatic, 1},
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              FrameBox[
               TagBox[GridBox[{
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   
                   InterpretationBox[Cell[
                    "RandomForest",ExpressionUUID->
                    "02b3e091-bab7-9945-aa46-02ae68c54d8b"],
                    TextCell["RandomForest"]]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], "916"},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"79.7", "1.3"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    79.6943231441047998942`3., 1.3298782445660097817`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"61.8", "1.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    61.7903930131004415216`3., 1.6063353509365643212`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.6330816431945042178`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0090431229129657176`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.6149953973685727826`3.", "\", \"", 
                    "0.6511678890204356529`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.6149953973685727826`3., ", ", 0.6511678890204356529`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.4571558869645625522`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0142838060626874208`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4285882748391877106`3.", "\", \"", 
                    "0.4857234990899373939`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.4285882748391877106`3., ", ", 0.4857234990899373939`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"6.21`", 
                    
                    RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                    "milliseconds per example", 
                    FractionBox["\"Milliseconds\"", "\"Examples\""]},
                    "Quantity"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"6.71`", 
                    
                    RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                    "examples per millisecond", 
                    FractionBox["\"Examples\"", "\"Milliseconds\""]},
                    "Quantity"]},
                  {
                   ItemBox[
                    
                    GraphicsBox[
                    RasterBox[{{{0.909034227237258, 0.7722011511442392, 
                    0.4265640356854301}, {0.8669506818496884, 
                    0.5881645333242564, 0.06464436244975552}}, {{1., 0.42, 
                    0.}, {0.9300831940218027, 0.8542467532274277, 
                    0.6282680419351904}}}, {{0, 0}, {2, 2}}, {0, 1}],
                    Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["487", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "487", "\" examples of \"", "\"died\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8198653198653199`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8604240282685512`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.839655172413793`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{487, " examples of ", "died", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8198653198653199}], 
                    Row[{"Recall = ", 0.8604240282685512}], 
                    Row[{"FScore = ", 0.839655172413793}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["107", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "107", "\" examples of \"", "\"survived\"", 
                    "\" misclassified as \"", "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.18013468013468015`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.3057142857142857`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{107, " examples of ", "survived", 
                    " misclassified as ", "died"}], 
                    Row[{"Column fraction = ", 0.18013468013468015`}], 
                    Row[{"Row fraction = ", 0.3057142857142857}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["79", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "79", "\" examples of \"", "\"died\"", 
                    "\" misclassified as \"", "\"survived\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.2453416149068323`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.13957597173144876`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{79, " examples of ", "died", " misclassified as ", 
                    "survived"}], 
                    Row[{"Column fraction = ", 0.2453416149068323}], 
                    Row[{"Row fraction = ", 0.13957597173144876`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["243", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "243", "\" examples of \"", "\"survived\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7546583850931677`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6942857142857143`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.7232142857142857`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{243, " examples of ", "survived", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7546583850931677}], 
                    Row[{"Recall = ", 0.6942857142857143}], 
                    Row[{"FScore = ", 0.7232142857142857}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "566", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8604240282685512`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{566, " example", "s", " of class ", "died"}], 
                    Row[{"Recall = ", 0.8604240282685512}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "350", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6942857142857143`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{350, " example", "s", " of class ", "survived"}], 
                    Row[{"Recall = ", 0.6942857142857143}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "594", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8198653198653199`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{594, " example", "s", " classified as ", "died"}], 
                    Row[{"Precision = ", 0.8198653198653199}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "322", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7546583850931677`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{322, " example", "s", " classified as ", 
                    "survived"}], 
                    Row[{"Precision = ", 0.7546583850931677}]}], 
                    "Tooltip"]& ]},
                    Frame->True,
                    FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                    FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"died\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"survived\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["566", TraditionalForm]}, {0.5, 
                    FormBox["350", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["594", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["322", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"died\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"survived\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                    FrameTicksStyle->13,
                    GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                    ImageSize->181.2,
                    
                    Method->{
                    "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02],
                     "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                    PlotRangePadding->None],
                    Alignment->Center,
                    StripOnInput->False], "\[SpanFromLeft]"}
                 },
                 AutoDelete->False,
                 ColumnsEqual->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
                 GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], 
                    Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}],
                "Grid"],
               FrameMargins->{{10, 10}, {10, 5}},
               FrameStyle->None,
               StripOnInput->False],
              Deploy,
              DefaultBaseStyle->"Deploy"],
             Alignment->Center,
             
             BaseStyle->{
              FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI",
                NumberMarks -> False, Deployed -> False},
             StripOnInput->False]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], 
              Offset[0.8], {
               Offset[0.4]}, 
              Offset[0.2]}}],
         Background->GrayLevel[1],
         FrameMargins->{{0, 0}, {0, 0}},
         FrameStyle->GrayLevel[0.85],
         RoundingRadius->5,
         StripOnInput->False],
        StripOnInput->False,
        LineBreakWithin->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      ClassifierMeasurementsObject[<|
       "Model" -> ClassifierFunction[<|
          "ExampleNumber" -> 916, "ClassNumber" -> 2, 
           "Input" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal"|>, 
                  "f2" -> <|"Type" -> "Numerical"|>, 
                  "f3" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor[
                    "Transpose", <|"FeatureNumber" -> 3|>], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                  MachineLearning`MLProcessor[
                  "SynthesizeMissingValues", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Distribution" -> 
                    LearnedDistribution[<|
                    "ExampleNumber" -> 916, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|"f2" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|"(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9924763087166281, 
                    0.06962246892396884, -0.10071488696884714`}, \
{-0.12176028349302224`, 0.6475982344553933, -0.7521907737362618}, {
                    0.012853404215050985`, 0.7587945957577639, 
                    0.6512031568173609}}, 
                    "Precisions" -> {1.1096705122951698`, 11.071379162604247`,
                     14.504654820468707`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001752264873371586, 0.09643725350844203, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.2031236, "MaxTrainingMemory" -> 
                    2050104, "DataMemory" -> 106416, "FunctionMemory" -> 
                    64512, "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 10, 11, 15, 6, 19.189783`9.03564500105436}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146168`, -1.997829760914916, -1.976574768503185, \
-1.9695170466598357`, -1.9059724997243812`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714302`, -1.7810711623410056`}, 
                    "LeftBoundary" -> -2.0628669170146168`, "LeftScale" -> 
                    0.12459852713774523`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[5.892604950680779, 0.13867820062256261`], 
                    "EntropySampleSize" -> 10|>], 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "EvaluationStrategy" -> "ModeFinding", 
                    "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
                  MachineLearning`MLProcessor[
                  "Threads", <|
                   "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                  MachineLearning`MLProcessor[
                  "Standardize", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.018970775438927`}, 
                    "StandardDeviation" -> {12.892103992603547`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
                  MachineLearning`MLProcessor[
                  "EmbedNominalVector", <|
                   "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                    "EmbeddingVectors" -> {
                    RawArray["Real32",{{0., 0., 0.}, {
                    0.21963098645210266`, -0.1438339650630951, 
                    0.544792890548706}, {-0.2416929453611374, 
                    0.3798814117908478, 
                    0.6873865127563477}, {-0.9437126517295837, 
                    0.4273325502872467, -1.2217921018600464`}}], 
                    RawArray["Real32",{{0., 0.}, {-0.12253803759813309`, 
                    0.6071814894676208}, {-0.6194148659706116, \
-0.98703533411026}}]}, "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
                  MachineLearning`MLProcessor[
                  "MergeVectors", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    7619735631186802745|>]}, "Invertibility" -> "Impossible", 
                "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
           "Output" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"died" -> 1, "survived" -> 2|>}, 
                    "MissingCode" -> 0, "Version" -> {14.1, 0}, "ID" -> 
                    2833981340056725226, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FromVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
             "Marginal" -> <|
              "died" -> 0.6176470588235294, "survived" -> 
               0.3823529411764706|>|>, "LabelSplitter" -> 
           MachineLearning`MLProcessor[
            "FeatureLabelSplit", <|
             "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
              "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
           "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic,
            "Prior" -> Automatic, "Utility" -> 
           SparseArray[
            Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
           "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
           Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 4, 4, 2, 4, 1, 3, 1, 1, 6, 2, 5, 
                   4, 5, 1, 5, 5, 3, 2, 2, 6, 5, 1, 5, 4, 6, 5, 1, 2, 4, 2, 6,
                    4, 4, 3, 1, 3, 1, 4, 1, 4, 4, 1, 1, 5, 5, 6, 6, 5, 2, 1, 
                   4, 6, 5, 3, 3, 4, 1, 2, 5, 2, 3}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZwADhZNT3+8H0gueypwBCS0o7fkM4h8og9AJz4zegflQ
8YQyxk0gdQqZkbdB9IFivnsgcYdzhc/A5kDNO/AEom+B/aXHYHmYfgcI/0BM
xUewuB2EvwBKM2RBzX0K0e9wDeIuh7MQcx9A1TWUTn8IVg8zT/j/U7CXTkHt
h4ov2OH8GyTecA9izoMPeQ/B5t2E8qHqHT5DxBM+QeUVMg+BxBVerAGbq6AJ
4T/Y7cfmAKJLoOGkxnEFbA48fCC0Qsq/B2B3nqsBh4vD+rj9YP3bIHQDZ95j
sHvZIPSBtRBxBqi/GTR2XQHTUHMZOCDqFiyHqHOAhn9CNoSGxRsD62EGkPsc
Tr0/B1a3EGruBQi/4bf/DXsAF8m2pA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, -39}, {4, 12}, {-1, 5}, {
                   6, 8}, {7, -4}, {-2, -3}, {-5, 9}, {10, 
                   11}, {-6, -7}, {-8, -9}, {13, 21}, {14, 16}, {-10, 
                   15}, {-11, -12}, {-13, 17}, {18, 20}, {
                   19, -16}, {-14, -15}, {-17, -18}, {22, 29}, {-19, 23}, {
                   24, -26}, {25, 26}, {-20, -21}, {27, -25}, {-22, 
                   28}, {-23, -24}, {30, 39}, {31, 36}, {32, 
                   33}, {-27, -28}, {34, 35}, {-29, -30}, {-31, -32}, {
                   37, -36}, {-33, 38}, {-34, -35}, {-37, -38}, {41, 59}, {42,
                    58}, {43, 51}, {44, 48}, {45, 46}, {-40, -41}, {
                   47, -44}, {-42, -43}, {49, -48}, {-45, 50}, {-46, -47}, {
                   52, 56}, {53, -53}, {54, -52}, {55, -51}, {-49, -50}, {-54,
                    57}, {-55, -56}, {-57, -58}, {60, -64}, {61, -63}, {
                   62, -62}, {-59, 63}, {-60, -61}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 
                   1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2,
                    2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 6, 1, 4, 3, 4, 3, 2, 3, 3, 6, 1, 
                   5, 4, 5, 3, 4, 3, 1, 1, 6, 4, 5, 4, 1, 6, 2, 6, 3, 5, 1, 1,
                    5, 3, 2, 5, 4, 3, 2, 3, 2, 5, 4, 2, 5, 2, 1, 3, 3, 1, 1, 
                   6, 4, 2, 4, 5, 5, 5, 4, 4, 2, 3}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZ4AA20uP9wOpA49kzoCEFpya+h7EXzBHleEAiC7t+Qzi
K2RF3gbJHyiD8B2yIfwFj43egfgJipmHwOpUIbTDaYg5B96+OwK2yhFiTwPU
PAcHKD8DYo6C8P+nYPN/+98A0Qnfjx0GyTNUMV4HuwdqngJU/wM7qLth+gTm
PgPzT0LtfQJxFwPUPwdyIPbA3MGwUPc3WF8x3z2wPNS8BJg/n0L0N0DDJ+FT
3kOwf+Uh/mN4CgmvhjRoOJx4fw6sbl3cfjAtBHGXwymI+IMVEPGGJxB9DKyH
GRyQ3NUADU8GjV1XwOpKJkLcyZ73GGwONNxh/oLxGbZB7dsCoQ+sgtAPYOEM
Uwf1j0Me0B4A21+2DA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 41}, {3, 38}, {4, 25}, {-1, 5}, {6,
                    10}, {-2, 7}, {-3, 8}, {-4, 9}, {-5, -6}, {11, 15}, {
                   12, -11}, {13, -10}, {-7, 14}, {-8, -9}, {-12, 16}, {-13, 
                   17}, {18, 21}, {19, 20}, {-14, -15}, {-16, -17}, {22, 
                   23}, {-18, -19}, {-20, 24}, {-21, -22}, {26, -36}, {27, 
                   29}, {-23, 28}, {-24, -25}, {-26, 30}, {31, -35}, {-27, 
                   32}, {33, -34}, {-28, 34}, {-29, 35}, {36, -33}, {-30, 
                   37}, {-31, -32}, {39, -40}, {40, -39}, {-37, -38}, {42, 
                   49}, {43, 47}, {-41, 44}, {45, -45}, {
                   46, -44}, {-42, -43}, {48, -48}, {-46, -47}, {50, 61}, {51,
                    60}, {52, 58}, {53, 56}, {54, 
                   55}, {-49, -50}, {-51, -52}, {-53, 57}, {-54, -55}, {-56, 
                   59}, {-57, -58}, {-59, -60}, {62, 
                   63}, {-61, -62}, {-63, -64}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2,
                    2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2,
                    1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 4, 5, 6, 3, 6, 1, 6, 3, 1, 2, 4, 1, 
                   2, 3, 3, 1, 4, 1, 3, 6, 6, 1, 3, 3, 1, 4, 4, 5, 5, 2, 1, 4,
                    3, 5, 4, 3, 5, 4, 6, 1, 1, 1, 1, 3, 4, 2, 5, 5, 2, 1, 6, 
                   6, 6, 2, 3, 5, 5, 3, 2, 1, 1, 1, 6, 3, 3, 2, 1, 1, 4, 1, 
                   5}], "NumericalThresholds" -> CompressedData["
1:eJxNkDFLA0EQhcdCxUYiNhYipyAIprLRRt3STrCzkSUgUdRYKYoW9wPSWgpb
CVYqCBYWtySC5IyNIahns8l5h4UoeCBEFL2dmYDbfOzsezNvZzi3ubDcAQBz
gMf8zD/MphSZ38hSTt+FXkqnevBuaUZXS8gbuov6JYiUyqe7w+/iuje2fn0/
WMU+H4WGpdrJ1iwhoLoZI72TJUJnmfolpDdOlNi626JcursQWjoVmidfh0Bb
fnJupvHreZzTT//QfUQ4XvLQd0HU8cQbzt2dusW+W0WcJ1YWn9An+P/bVHe5
LmaoLljfzuMejZex/lV8QfbsfyOv9hqoWyO/YR9EPJ/nKKbkus4cxt6//bb3
LpkmJJ27QX2Bc+kz+p9Y57zPrBt4bKJ/slXD95NTzGW6aK+K86k85+Qc0k8C
9JsR1APvQwXNc9yTSuf9AewS0JI=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 30}, {3, 22}, {4, 17}, {5, 
                   6}, {-1, -2}, {-3, 7}, {8, 16}, {9, 12}, {10, 
                   11}, {-4, -5}, {-6, -7}, {13, -12}, {-8, 14}, {-9, 
                   15}, {-10, -11}, {-13, -14}, {18, -20}, {19, 
                   20}, {-15, -16}, {-17, 21}, {-18, -19}, {23, 28}, {-21, 
                   24}, {25, 26}, {-22, -23}, {-24, 27}, {-25, -26}, {
                   29, -29}, {-27, -28}, {31, 58}, {32, 35}, {33, -33}, {
                   34, -32}, {-30, -31}, {36, 38}, {37, -36}, {-34, -35}, {39,
                    55}, {40, 50}, {41, -47}, {42, 48}, {43, 
                   44}, {-37, -38}, {-39, 45}, {46, -43}, {-40, 
                   47}, {-41, -42}, {49, -46}, {-44, -45}, {51, 
                   52}, {-48, -49}, {53, -53}, {-50, 54}, {-51, -52}, {56, 
                   57}, {-54, -55}, {-56, -57}, {59, 62}, {60, -61}, {
                   61, -60}, {-58, -59}, {63, 70}, {64, 67}, {-62, 65}, {
                   66, -65}, {-63, -64}, {-66, 68}, {69, -69}, {-67, -68}, {
                   71, 72}, {-70, -71}, {-72, -73}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1,
                    1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 
                   1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
                    2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 
                   1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 5, 2, 5, 3, 4, 6, 1, 1, 6, 3, 5, 6, 
                   5, 2, 2, 1, 6, 5, 4, 6, 5, 6, 4, 1, 6, 6, 3, 1, 4, 2, 6, 2,
                    6, 3, 4, 4, 2, 6, 5, 2, 6, 5, 4, 2, 3, 5, 5, 6, 5, 5, 4, 
                   3, 4, 5, 4, 4, 3, 2, 3, 6, 1, 5, 6, 3, 3, 5, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxNUTEvBEEYHR0dtSvmRKLRUFzHjkQrEp1GJhLFCqeinh+gVejmCtT8gLsJ
hWBPoZJcM5t1GomLKEWw33uT2Obte/O+75v3TXP7YGNnTCm1quQLN6PHXv2z
9FTVqF8X3wUz8LC3Ocj+0B8ef9bcP5yMxD993qvRdtdK8d1Djzn8Zpn97qBb
cv+C/nYINBd5X3x9+Dzn6iPMs2neCnTHOW7yZ5hJgtbtf58pgHoX94hF503O
2U+l+clXgbuJdiX9WJf8kbkjfXocPn+5Jfkjczjq8Qx62pdJ/ffR153iXHeA
gXXhCtxSj8znvtafBafALd8pfrRLuQfRzubXMrdsFOKfB4/ci134lnrD/Trm
jzPwhTmg5juFblOZX2iTyyo=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 55}, {3, 33}, {4, 13}, {5, 8}, {
                   6, -4}, {-1, 7}, {-2, -3}, {9, 10}, {-5, -6}, {11, 
                   12}, {-7, -8}, {-9, -10}, {14, -31}, {15, 30}, {16, 
                   18}, {-11, 17}, {-12, -13}, {-14, 19}, {20, 26}, {21, 
                   22}, {-15, -16}, {-17, 23}, {-18, 24}, {
                   25, -21}, {-19, -20}, {27, 29}, {
                   28, -24}, {-22, -23}, {-25, -26}, {31, -30}, {-27, 
                   32}, {-28, -29}, {34, 51}, {35, 50}, {36, 42}, {-32, 
                   37}, {-33, 38}, {39, -38}, {40, -37}, {-34, 
                   41}, {-35, -36}, {43, 49}, {44, 47}, {45, -42}, {
                   46, -41}, {-39, -40}, {
                   48, -45}, {-43, -44}, {-46, -47}, {-48, -49}, {52, 54}, {
                   53, -52}, {-50, -51}, {-53, -54}, {56, 68}, {57, 64}, {
                   58, -62}, {59, -61}, {60, 63}, {-55, 61}, {-56, 
                   62}, {-57, -58}, {-59, -60}, {-63, 65}, {66, 
                   67}, {-64, -65}, {-66, -67}, {-68, -69}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
                   1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
                    2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 6, 3, 6, 2, 6, 2, 1, 3, 1, 3, 4, 4, 
                   5, 6, 1, 4, 6, 4, 1, 3, 3, 6, 5, 1, 6, 5, 6, 6, 5, 3, 4, 1,
                    3, 4, 4, 2, 3, 2, 5, 6, 5, 5, 2, 1, 1, 2, 1, 4, 4, 2, 1, 
                   2, 1, 3, 2, 1, 6, 2, 5, 3, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYwCDhvd5D+1BjJNT3+8H0dmRt0H8A6ch/APPjN6B6AQo
fwGUf6CY7x5YfQZEfcLFvW9AtANUv0JZz2eQfEMphGawu/QYrA9qz4Kr7VfA
5kLVwcRh/AeVfofB7sqDmg81t4E97zHY/IVx+8HqNWdcBZsHFXfYAhE/wAbh
J3BA6AXLIeILoOYsgLrrgBrHFbB5WRBxhg+Q8FgADReH2zJnwOI6mYdA6h0e
QfgJDhD/KMDCzRHCf2ALoRluQtW95XkNtneT+gewuSffnwObs8/3Jpgv8P8p
2H5hCJ1wB6JvwQ7n32DxBxC+whu3u2B5VYg7Eh5Czf+lx+AAkof60+ECxHyF
+dBw+OF/AyT+YD2QDwDsPKsY
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 35}, {3, 19}, {4, 10}, {5, 
                   6}, {-1, -2}, {7, 8}, {-3, -4}, {9, -7}, {-5, -6}, {
                   11, -17}, {12, 13}, {-8, -9}, {14, 18}, {15, 
                   16}, {-10, -11}, {-12, 17}, {-13, -14}, {-15, -16}, {20, 
                   24}, {21, -22}, {22, -21}, {23, -20}, {-18, -19}, {25, 
                   33}, {26, 31}, {27, 29}, {-23, 28}, {-24, -25}, {-26, 
                   30}, {-27, -28}, {32, -31}, {-29, -30}, {
                   34, -34}, {-32, -33}, {36, 38}, {-35, 37}, {-36, -37}, {39,
                    41}, {40, -40}, {-38, -39}, {42, 56}, {-41, 43}, {
                   44, -55}, {45, 51}, {-42, 46}, {47, -48}, {48, -47}, {
                   49, -46}, {-43, 50}, {-44, -45}, {-49, 52}, {53, -54}, {54,
                    55}, {-50, -51}, {-52, -53}, {57, -63}, {58, -62}, {59, 
                   60}, {-56, -57}, {61, -61}, {-58, 62}, {-59, -60}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1,
                    1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 
                   1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 4, 4, 3, 1, 4, 4, 2, 4, 5, 6, 2, 
                   5, 6, 2, 4, 6, 1, 5, 5, 4, 1, 5, 2, 1, 3, 6, 1, 6, 4, 1, 2,
                    1, 4, 4, 2, 2, 1, 1, 4, 3, 2, 4, 6, 5, 5, 3, 5, 2, 5, 3, 
                   6, 3, 6, 4, 5, 4, 5, 4, 3, 4, 3, 6, 4, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYoAA20uP9wOpBrnMQyD6wce8h/YgPpROUIGIM9yKAfMX
fICKQ2mHGzJnQPQDKP8B1DyHU1Pfg+iEuxB5BjuIuAJU3OGZ0TuwvaU9n0H0
gtNQccmSZyD6AEw9jIaqa3hUdQUsD7VnwROIOQcE5oL1OeRE3ga74yTU/mSz
X2BxqPkNAv+fgt0v+BDiTpj+Ty8uI7snoQzqrsdQ+TPvz4Fp9Yoj4PCoYrwO
dpcwxLwDP/xvgM29AFUnCBFfwJn3GBxO0+P2g9UvhNAPMiDuVNgA4R94CrHH
YRWUnwWRP8AO0Z+QC1UP5TvA3Dcfoh7mboVZEP4CqP0P1KHxB41PBi0IX4ED
aq4QRB0DyH8A+oXBSQ==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 16}, {4, 14}, {5, 12}, {6,
                    11}, {-1, 7}, {8, 10}, {
                   9, -4}, {-2, -3}, {-5, -6}, {-7, -8}, {
                   13, -11}, {-9, -10}, {15, -14}, {-12, -13}, {17, 24}, {18, 
                   22}, {19, 20}, {-15, -16}, {-17, 21}, {-18, -19}, {
                   23, -22}, {-20, -21}, {25, -42}, {26, 29}, {27, 
                   28}, {-23, -24}, {-25, -26}, {30, 31}, {-27, -28}, {32, 
                   41}, {-29, 33}, {34, 35}, {-30, -31}, {36, 38}, {
                   37, -34}, {-32, -33}, {39, -38}, {
                   40, -37}, {-35, -36}, {-39, 42}, {-40, -41}, {44, 60}, {
                   45, -59}, {46, -58}, {47, -57}, {48, 56}, {49, 51}, {
                   50, -45}, {-43, -44}, {52, 55}, {-46, 53}, {
                   54, -49}, {-47, -48}, {-50, -51}, {-52, 57}, {-53, 
                   58}, {-54, 59}, {-55, -56}, {61, 64}, {62, -63}, {
                   63, -62}, {-60, -61}, {65, 66}, {-64, -65}, {-66, -67}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1,
                    1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 
                   1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
                    2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 6, 1, 2, 3, 3, 1, 5, 1, 4, 2, 4, 6, 
                   5, 2, 3, 2, 2, 3, 4, 2, 2, 1, 1, 2, 1, 4, 4, 2, 4, 2, 1, 4,
                    1, 3, 4, 1, 2, 1, 6, 1, 1, 1, 4, 6, 5, 5, 6, 6, 1, 2, 3, 
                   6, 5, 5, 3, 2, 4, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZoAA20uP9wMphZNT34PoBwpPP4Noh8dG70B0Q2bkbXsQ
nQGlqzvZHUD67CH6FmzbdgYkvqC0B6yv4RlE3wMoPwFqrgNU/YOnEHmFbIh5
CaffnwOLn4PQDlB7DnzKewiiH9yQAZuvcAoif6CH6QPYHZcYn4HV3YXK9338
CaY/Q/QteA+hD0Dd41AGcc8BqL8WcCW9BovD3PlC+xqYVso8BHbfB4h+hgnx
EBqm75H7RbA+9rzHIHGHD49vgP09pRQSjkd5XiPbxwBVl7Ahbj/Y/K0QWoED
It7ACaUzdkPCExo+C6DhvgCmfwtE34JZUPq3/w2wf59C/P9A4P9TMD0DKA8A
aDKq6Q==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 38}, {3, -37}, {4, 7}, {5, -4}, {
                   6, -3}, {-1, -2}, {8, -36}, {9, 27}, {10, 21}, {11, 14}, {
                   12, 13}, {-5, -6}, {-7, -8}, {15, -16}, {-9, 16}, {
                   17, -15}, {18, 20}, {19, -12}, {-10, -11}, {-13, -14}, {22,
                    24}, {-17, 23}, {-18, -19}, {-20, 25}, {-21, 
                   26}, {-22, -23}, {28, -35}, {29, 35}, {-24, 30}, {31, 
                   33}, {32, -27}, {-25, -26}, {-28, 34}, {-29, -30}, {36, 
                   37}, {-31, -32}, {-33, -34}, {39, 55}, {40, 52}, {41, 
                   46}, {42, 45}, {43, 
                   44}, {-38, -39}, {-40, -41}, {-42, -43}, {47, 
                   48}, {-44, -45}, {-46, 49}, {50, -50}, {
                   51, -49}, {-47, -48}, {53, 54}, {-51, -52}, {-53, -54}, {
                   56, 59}, {57, 58}, {-55, -56}, {-57, -58}, {-59, -60}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2,
                    2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1,
                    1, 2, 1, 1, 2, 2, 2, 2, 1, 2}], "NominalSplits" -> {}, 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 4, 3, 3, 6, 1, 4, 5, 5, 5, 5, 1, 
                   6, 6, 3, 6, 1, 5, 3, 5, 6, 3, 1, 1, 2, 6, 3, 5, 5, 2, 2, 6,
                    1, 6, 4, 2, 3, 3, 2, 6, 2, 4, 4, 6, 2, 6, 5, 1, 5, 2, 1, 
                   2, 2, 6, 5, 2, 4, 6, 1, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZQCDhO1x+/cD6Qa5zEMg+sHHvIf2IFoJwj+gDqETTk99
D6YLC8DyCz5A1CnYX3oMEl8ApRnsUGmFF2uegtWdgeh/AKUZsiJvg8XPQs2d
xvwVTEP1NWRC5BkcIXyHU6j6ErrMF4P1/w86C+affH8O7I6TEHUNuVDzofof
QN3X8MToHdi8pxD6AdTcB5mHj4PFYf4s6/kMNu8ZRN2Cv/43QOY1/ILQC57K
nAGbz5b3GBxeZyD2Jwj+B/sXpr+BAyK/AGovAzuE77AGEu4KHgpXwOZsgPAZ
oPYx+EdfQXZvA9S9DFDzGGD6ofIPSiH2PYC6h2Gv/muwPMg+AP17rzE=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 38}, {3, 15}, {4, 12}, {5, -9}, {6,
                    10}, {7, 8}, {-1, -2}, {-3, 9}, {-4, -5}, {-6, 
                   11}, {-7, -8}, {13, -13}, {-10, 14}, {-11, -12}, {16, 
                   18}, {17, -16}, {-14, -15}, {19, 23}, {20, 22}, {
                   21, -19}, {-17, -18}, {-20, -21}, {24, 28}, {-22, 25}, {26,
                    27}, {-23, -24}, {-25, -26}, {29, 37}, {-27, 30}, {-28, 
                   31}, {32, 36}, {33, 35}, {-29, 
                   34}, {-30, -31}, {-32, -33}, {-34, -35}, {-36, -37}, {39, 
                   44}, {40, 42}, {41, -40}, {-38, -39}, {
                   43, -43}, {-41, -42}, {45, 49}, {46, 48}, {
                   47, -46}, {-44, -45}, {-47, -48}, {50, 61}, {51, 54}, {52, 
                   53}, {-49, -50}, {-51, -52}, {55, 57}, {
                   56, -55}, {-53, -54}, {58, 60}, {-56, 
                   59}, {-57, -58}, {-59, -60}, {-61, -62}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1,
                    2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
                   2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
                    2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 6, 4, 3, 5, 6, 3, 6, 3, 4, 6, 6, 
                   6, 2, 2, 6, 1, 2, 5, 1, 6, 4, 5, 1, 6, 1, 4, 4, 1, 2, 6, 2,
                    6, 5, 1, 5, 1, 1, 6, 3, 2, 1, 1, 2, 5, 6, 4, 6, 1, 2, 6, 
                   1, 3, 2, 2, 5, 5, 6, 6, 3, 2, 6, 3, 3, 3, 2, 6, 6, 3, 2, 5,
                    1}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDwZACDhO1x+/cD6QXf/G/YA+mGM1Pfg/gNn/MegvnymYfA
8raXHoNoh1MQ+QPKEPEHUP4DVQi/4SNEX8JpqDknIXQCjL4lcwYsf/L9ObA5
UPsefL/xAmzfE6N3YPvsIfY1nN/6A0QrQM1LKOv5DKYdoPIzZywFy0PNOVDM
dw9Z3QIY3Rb3ECz+FGK+AtTdDlD7FKDuO2AH9We8ylFkexxCVlwGm6Pef20/
kv8YciJvg/1zDuKfhK/2a0B8hWsF38H0M4j5CVBzG2DhVQL1B3veY5C6BXan
z4LNfwxVzwYRP9CueRPsvkyIPQug5j2A0gsWQuKvYQWETuCA6GOA0g3pUH1Q
f8LkHbKh4j8h8b5ADhJ/CU8h8aMA0w8z7wdE3YMzEH8qzIfaeyH3yH4AEtbb
MA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 48}, {3, 16}, {4, 5}, {-1, -2}, {6,
                    15}, {7, -12}, {8, 13}, {9, -8}, {10, -7}, {11, -6}, {-3, 
                   12}, {-4, -5}, {-9, 14}, {-10, -11}, {-13, -14}, {
                   17, -47}, {18, 21}, {19, -18}, {20, -17}, {-15, -16}, {22, 
                   25}, {23, 24}, {-19, -20}, {-21, -22}, {26, 41}, {-23, 
                   27}, {28, 34}, {29, 30}, {-24, -25}, {31, -30}, {32, 
                   33}, {-26, -27}, {-28, -29}, {35, -38}, {36, 38}, {-31, 
                   37}, {-32, -33}, {39, 40}, {-34, -35}, {-36, -37}, {42, 
                   45}, {43, -42}, {-39, 44}, {-40, -41}, {-43, 46}, {
                   47, -46}, {-44, -45}, {49, 65}, {50, 56}, {51, 55}, {
                   52, -52}, {-48, 53}, {
                   54, -51}, {-49, -50}, {-53, -54}, {-55, 57}, {58, 63}, {
                   59, -61}, {60, 61}, {-56, -57}, {-58, 62}, {-59, -60}, {
                   64, -64}, {-62, -63}, {66, 71}, {67, 70}, {68, -68}, {-65, 
                   69}, {-66, -67}, {-69, -70}, {72, 
                   73}, {-71, -72}, {-73, -74}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
                    2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
                   1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2,
                    2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 
                   2, 1, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 3, 5, 5, 2, 1, 4, 5, 4, 1, 5, 4, 4, 
                   2, 6, 5, 5, 4, 6, 6, 6, 6, 5, 3, 6, 5, 2, 5, 3, 1, 2, 1, 3,
                    6, 4, 2, 5, 4, 1, 5, 2, 4, 6, 2, 1, 4, 6, 6, 2, 2, 5, 5, 
                   6, 1, 5, 1, 4, 4, 2, 2, 3, 4, 6, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYAADhXPvz+0H0gnf/W/Yg4TtLz0G8Q9sj9sPFn9s9A5E
P/D6dBZEN5T1fAbRDHYQdQlQvoMzzyUQvQAqrgATL4XQC55AzGE4M/U9WNwB
qh9GQ9UpwOShdMJJKH0aSsPszYm8DXIvw1mIuMJCiHsXPIO6dymE/+AXxF8N
bzffB/sL6g6HPX/+IZvTwJH3GGwezN1QdQ/WQ8yBiSuIrwb7M2EuRLwBpg7m
fqh7GZ7JnAGZ90DhKVj8wfu8h/ZI/ngAU3cToi7hNCQeFkDD4wA0HhSg6hVO
vQa77wDU/wt2OP8G6/sEMfeA0P+nIHrBCYg5Daeg9B+I/w8IQOQZ2CH+THgK
tBcAEAzGOw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 4}, {-1, -2}, {5, 26}, {6,
                    25}, {7, 19}, {8, 9}, {-3, -4}, {-5, 10}, {11, 18}, {
                   12, -13}, {-6, 13}, {14, 17}, {15, -10}, {-7, 
                   16}, {-8, -9}, {-11, -12}, {-14, -15}, {20, 
                   21}, {-16, -17}, {22, 24}, {
                   23, -20}, {-18, -19}, {-21, -22}, {-23, -24}, {27, 
                   39}, {-25, 28}, {29, 38}, {-26, 30}, {31, 35}, {32, 
                   33}, {-27, -28}, {34, -31}, {-29, -30}, {36, 
                   37}, {-32, -33}, {-34, -35}, {-36, -37}, {40, 42}, {-38, 
                   41}, {-39, -40}, {-41, -42}, {44, 59}, {45, -58}, {-43, 
                   46}, {47, 48}, {-44, -45}, {49, 55}, {50, 
                   51}, {-46, -47}, {-48, 52}, {-49, 53}, {
                   54, -52}, {-50, -51}, {56, -57}, {57, -56}, {-53, 
                   58}, {-54, -55}, {60, 63}, {61, 
                   62}, {-59, -60}, {-61, -62}, {64, -65}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2,
                    1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 
                   2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
                    1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 1, 5, 3, 5, 1, 2, 1, 3, 1, 4, 4, 1, 
                   2, 1, 2, 5, 3, 5, 2, 4, 3, 6, 2, 3, 4, 6, 5, 1, 5, 1, 5, 6,
                    3, 6, 2, 5, 6, 1, 4, 4, 2, 6, 2, 5, 1, 5, 4, 2, 4, 4, 1, 
                   3, 2, 5, 5, 2, 4, 4, 2, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZQCDByU9n/cDaYeQFZdBdIPtpcdgOjfytj1I3A7CPyBg
dgVEP3hq9A6sXrLkGVhdOkQdQxXjdbB4KdS8Mijd9hus3+ExRF/Ch0cfweZB
+Qqz4vaD+VkQcxQ2QPgMzyDyDTBzYO5hz3sMoh9A5R9kQMWh9iqcnPoebJ49
xN0Mx3uKwLQDhO8Q6nwY7I4tEHsesEHMa8iGmJNwGqJ/AdT8A1D/w8xl0Dj2
Fiz/Ke8hWN9HCO1wQ+YMmD4F1f8Qwl8AdYdC8+nPYP9B+Q4w/VB1DgL/n4L9
xQ+hE84nvAbRB/763wCbc+L9ObA586HhsxJCN5yHigtB9B0QhNALrkHMVeAA
+g8A8Gyw5g==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 38}, {3, 24}, {4, 14}, {5, -11}, {
                   6, 12}, {7, -7}, {8, 10}, {-1, 9}, {-2, -3}, {
                   11, -6}, {-4, -5}, {13, -10}, {-8, -9}, {15, 23}, {-12, 
                   16}, {17, -20}, {18, -19}, {19, 22}, {20, 
                   21}, {-13, -14}, {-15, -16}, {-17, -18}, {-21, -22}, {-23, 
                   25}, {-24, 26}, {27, 35}, {28, 31}, {29, -28}, {
                   30, -27}, {-25, -26}, {-29, 32}, {-30, 33}, {-31, 
                   34}, {-32, -33}, {36, 37}, {-34, -35}, {-36, -37}, {39, 
                   54}, {-38, 40}, {41, 50}, {42, 46}, {-39, 43}, {44, -43}, {
                   45, -42}, {-40, -41}, {47, 49}, {
                   48, -46}, {-44, -45}, {-47, -48}, {51, 53}, {
                   52, -51}, {-49, -50}, {-52, -53}, {55, 60}, {56, -59}, {57,
                    59}, {58, -56}, {-54, -55}, {-57, -58}, {
                   61, -62}, {-60, -61}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
                    1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 
                   1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1,
                    1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 3, 1, 1, 6, 5, 3, 6, 6, 3, 3, 4, 4, 
                   5, 5, 6, 5, 1, 5, 1, 6, 3, 6, 3, 4, 4, 6, 5, 1, 6, 1, 3, 6,
                    4, 1, 2, 1, 3, 1, 4, 3, 3, 1, 2, 2, 6, 1, 1, 1, 1, 1, 1, 
                   3, 1, 2, 6, 5, 5, 2, 2, 5, 2, 2, 4, 1, 3, 3, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYQADhZNT3+8H0d/9b9iDBDSOvQXxF+xw/g3iN0DlFzhc
egyiE75B1D04AxF3OAWhE7QzD4HoAzoQOuFD3kOwuo8QWsEOol/BHkI/gOp7
ABU/kMTL5ADSB+U3nN/6A2z+aYi6hrTI22DzoO5JyIbwHQT+PwXTZT2fkdUv
gNrD8H/HZTAfKn7AzXgTSP2BTKh+qDsUhCHmJPycsQpsz/n358DqP70A64ep
X7Bt2xmwOqh9D6DiDVlQ991Lfg2275nRO7C5jyE0A1veY7C+hsyLYPn/Rd/B
/tCccRWs7mneXbC6rOUvwPTnKWBzHKD+ZJDdCQm3pxDzHkDNe7Akbj9Y/VYI
3QCVX/AEQh9YABF3OAXxTwOUPiAI9W+y8BWweb8g8bpAAxJ/DKB4AwCdTs6m

                  "], "Children" -> 
                 RawArray["Integer16",{{2, 45}, {3, 19}, {-1, 4}, {5, 18}, {6,
                    17}, {-2, 7}, {8, -13}, {-3, 9}, {10, -12}, {11, 
                   12}, {-4, -5}, {-6, 13}, {-7, 14}, {15, -11}, {
                   16, -10}, {-8, -9}, {-14, -15}, {-16, -17}, {20, 41}, {21, 
                   23}, {22, -20}, {-18, -19}, {24, 36}, {25, -33}, {26, 
                   34}, {-21, 27}, {28, 32}, {29, 31}, {-22, 
                   30}, {-23, -24}, {-25, -26}, {33, -29}, {-27, -28}, {-30, 
                   35}, {-31, -32}, {37, -39}, {-34, 38}, {-35, 39}, {
                   40, -38}, {-36, -37}, {-40, 42}, {-41, 43}, {-42, 
                   44}, {-43, -44}, {46, 62}, {47, 48}, {-45, -46}, {-47, 
                   49}, {50, 57}, {51, 56}, {52, 53}, {-48, -49}, {54, 
                   55}, {-50, -51}, {-52, -53}, {-54, -55}, {58, 
                   59}, {-56, -57}, {-58, 60}, {-59, 61}, {-60, -61}, {63, 
                   67}, {64, -66}, {65, -65}, {-62, 66}, {-63, -64}, {
                   68, -69}, {-67, -68}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
                    1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1,
                    1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 1, 6, 6, 6, 6, 4, 3, 5, 6, 2, 5, 
                   1, 2, 2, 3, 3, 3, 3, 6, 1, 6, 4, 3, 6, 5, 2, 4, 5, 6, 3, 2,
                    2, 1, 3, 5, 2, 2, 2, 6, 5, 5, 6, 5, 5, 6, 5, 1, 1, 1, 3, 
                   1, 3, 2, 5, 3, 1, 2, 5, 6, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwY4CAk1Pf7wdSDtdkztgD6YRpzF/B/FMQ8QOnIbQCjD4L
oRlKez6D6AeZkbdB+hbYXXoMFofpe2b0Dsy3h4g3zJyxFEQnPIGINzyF0lkQ
/QowOhdCH8iB0A1Q9x0QMLsCNu8MhL8Aar9CNkSdA8x9UPsSoPYnfMp7CJJn
gLrvAdQ8Bp3MQ2D5uxB/H7gOoRl0/jwGh4MmRL7BFmreHYj8gltQdY+h/mPL
A6tvmB23H2z/Qgi9gBMi/mAJhN+wFSrPDhXfBuU/zbsLDu8NCYfB9PoND8Hu
TIP4i+FZ0EcwPx3Ch/lLYR5E/wN1iDsVrvh8ALsT6o8FsyDyMPcl/F73yR4A
+EqwYw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, 29}, {4, 7}, {5, -4}, {-1,
                    6}, {-2, -3}, {8, 9}, {-5, -6}, {10, 17}, {11, -14}, {12, 
                   14}, {-7, 13}, {-8, -9}, {15, -13}, {
                   16, -12}, {-10, -11}, {18, 19}, {-15, -16}, {20, 28}, {21, 
                   27}, {22, -23}, {23, 24}, {-17, -18}, {25, 
                   26}, {-19, -20}, {-21, -22}, {-24, -25}, {-26, -27}, {30, 
                   38}, {31, 37}, {32, 36}, {33, 34}, {-28, -29}, {-30, 
                   35}, {-31, -32}, {-33, -34}, {-35, -36}, {
                   39, -39}, {-37, -38}, {41, 57}, {-40, 42}, {43, -56}, {44, 
                   56}, {45, -53}, {46, -52}, {47, 50}, {48, 
                   49}, {-41, -42}, {-43, -44}, {51, -51}, {52, 54}, {-45, 
                   53}, {-46, -47}, {-48, 55}, {-49, -50}, {-54, -55}, {58, 
                   60}, {-57, 59}, {-58, -59}, {61, -63}, {-60, 
                   62}, {-61, -62}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
                   1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2,
                    1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 1, 4, 1, 6, 6, 3, 1, 1, 2, 3, 3, 4, 
                   2, 3, 2, 4, 2, 5, 6, 6, 1, 4, 2, 2, 5, 1, 4, 5, 5, 6, 6, 5,
                    2, 5, 6, 1, 3, 3, 4, 1, 4, 3, 1, 2, 1, 4, 5, 1, 2, 2, 1, 
                   5, 1, 3, 1, 5, 3, 2, 5, 3, 1, 2, 3}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYICAk1Pf7wdSDxSefgbRCqU9YDoh+9wPMP80RP4AVB2D
TuYhsHji58/2QLrBfOILMP1U5gyIVsiNvA2iGbIgtILw/6cg+sA1iHxDBkR8
waX350DmOAhA5Bc8NnoH4jc4XHoMps9A7FsAtT+hxvADSF3Cx7yHIPrBOYj+
hicQfQ72EH0Hdhg9BIuXQfzhYAcRZ4DKM8D8cwpCN0DlD9yFuO8AlO8A9e+B
Yr57YH4mxN0JORD6QQnE/AX/i76D3QezD+p/haATh8HizyDuezB/NdhdD6Dh
u2BO3H6werXjt8HiUH/A1CtUr7gCdu82iDoGjV1g/oE0iPkNbzffB+ufBZFf
8Nv/BjgcT0DCZcEyiHjDT4j4g/qgo2B7zkDlvwPFAYmBw+M=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, 6}, {4, -4}, {
                   5, -3}, {-1, -2}, {7, 33}, {8, 10}, {9, -7}, {-5, -6}, {
                   11, -31}, {12, -30}, {13, 25}, {14, 24}, {15, 20}, {16, 
                   18}, {-8, 17}, {-9, -10}, {19, -13}, {-11, -12}, {-14, 
                   21}, {22, 23}, {-15, -16}, {-17, -18}, {-19, -20}, {26, 
                   31}, {27, 28}, {-21, -22}, {-23, 29}, {
                   30, -26}, {-24, -25}, {-27, 32}, {-28, -29}, {34, 39}, {
                   35, -37}, {36, -36}, {37, -35}, {-32, 
                   38}, {-33, -34}, {-38, -39}, {41, 57}, {-40, 42}, {43, 
                   47}, {44, -45}, {45, -44}, {-41, 46}, {-42, -43}, {48, 
                   51}, {49, -49}, {-46, 50}, {-47, -48}, {52, 
                   53}, {-50, -51}, {-52, 54}, {55, -56}, {-53, 
                   56}, {-54, -55}, {58, 64}, {59, 63}, {60, -61}, {
                   61, -60}, {-57, 62}, {-58, -59}, {-62, -63}, {-64, -65}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
                    1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 
                   1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1,
                    2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 5, 5, 1, 1, 1, 2, 6, 4, 6, 2, 5, 
                   2, 1, 3, 5, 1, 1, 1, 5, 6, 5, 4, 4, 3, 6, 3, 6, 5, 1, 4, 6,
                    6, 2, 2, 3, 2, 3, 1, 6, 3, 5, 6, 6, 3, 6, 6, 1, 5, 6, 1, 
                   6, 1, 6, 1, 6, 2, 4, 6, 4, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYwADBdtLj/cD6YRv/jfsQTSUf8ABQj9Q+nQTJL5g2fyn
IFqhcM0NsPqnMmfA4ienvgfxGT7lPQTxHU5D+AkPoPL2UPNvQflzVBkOgNRn
Rd4G22cHkW84v/UH2F43401g8a/2a0D0Aaj8A5g9UHcdEP4Pds+Bsp7PYP25
EPMOQNU1QM1/cAZVn8OR6ocgekEpRB/MvQ5QdQ5Pjd6B6WcQekEaxJwF1yDu
Z/gBCScG/TdHwOHBkfcY7O9fEPEH6+P2g+1jh4gfYIPQC9Kh/oWKL+CE0jo9
h8DmbIPoa4DKM2QtfwG2H6be7vRZMB9q3wPhv9fB9sD4UHcvgIYHTF8CjD+r
8pk9AMqXrrw=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 37}, {3, 15}, {4, -13}, {5, 
                   6}, {-1, -2}, {7, 11}, {-3, 8}, {9, -7}, {
                   10, -6}, {-4, -5}, {-8, 12}, {13, -12}, {-9, 
                   14}, {-10, -11}, {-14, 16}, {17, 25}, {18, -23}, {-15, 
                   19}, {20, 24}, {21, -20}, {22, -19}, {-16, 
                   23}, {-17, -18}, {-21, -22}, {-24, 26}, {27, -36}, {28, 
                   36}, {-25, 29}, {-26, 30}, {-27, 31}, {-28, 32}, {-29, 
                   33}, {34, -33}, {-30, 35}, {-31, -32}, {-34, -35}, {38, 
                   46}, {39, 44}, {40, 41}, {-37, -38}, {-39, 42}, {-40, 
                   43}, {-41, -42}, {45, -45}, {-43, -44}, {47, 
                   48}, {-46, -47}, {49, -63}, {50, 62}, {51, 
                   52}, {-48, -49}, {53, 54}, {-50, -51}, {55, 60}, {
                   56, -57}, {57, -56}, {58, -55}, {-52, 59}, {-53, -54}, {
                   61, -60}, {-58, -59}, {-61, -62}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2,
                    1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
                   1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2,
                    2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 1, 6, 4, 3, 5, 1, 2, 3, 6, 6, 3, 4, 
                   1, 2, 2, 5, 1, 5, 3, 5, 5, 1, 5, 1, 1, 5, 6, 2, 4, 3, 3, 1,
                    5, 4, 5, 1, 1, 3, 5, 1, 1, 6, 1, 4, 5, 6, 4, 1, 3, 6, 2, 
                   2, 5, 1, 5, 2, 2, 3, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYQCDByU9n/eDGBq7roDpk1Pfg+iGMoh4Q0bkbXsg7eBw
6TGIf6CY7x5Y/KnROzCdC5FXOAPRp3AKSmdCxaHmMBTI3gDRCVB9B6D0goVx
+8HiU9MegWiH2RB+QzZE/4JNEP6BtVDxOvYnYPNsIe5hqLQ4C1LXoLnuDFg9
VPwB1D0PoPYwQN3hkAP1D9R9CxaYXwbbbw/Rt6AU6t7NEPseVPodBqk7oMZx
Bawe5i+YPQpPweoVFlbfBYufhdh7wM14E4if8CnvIYhmsIOafxoaPgL/n4LV
F64Bh0uDXOah/Ujh6PBQBuyfhAcQWgEa/g73jb4hm3fgEUTe4dT7c2B//PW/
AeaDzAcAtQ2qgw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, 24}, {4, 15}, {-1, 5}, {6,
                    7}, {-2, -3}, {8, 14}, {9, 12}, {10, -7}, {-4, 
                   11}, {-5, -6}, {-8, 13}, {-9, -10}, {-11, -12}, {16, 19}, {
                   17, -16}, {18, -15}, {-13, -14}, {20, -22}, {
                   21, -21}, {-17, 22}, {-18, 23}, {-19, -20}, {25, 35}, {
                   26, -33}, {27, -32}, {28, -31}, {-23, 29}, {-24, 30}, {-25,
                    31}, {32, -30}, {33, 34}, {-26, -27}, {-28, -29}, {
                   36, -39}, {37, 38}, {-34, -35}, {39, -38}, {-36, -37}, {41,
                    58}, {-40, 42}, {43, 50}, {44, 45}, {-41, -42}, {46, 
                   48}, {47, -45}, {-43, -44}, {49, -48}, {-46, -47}, {
                   51, -57}, {52, 53}, {-49, -50}, {54, 56}, {-51, 
                   55}, {-52, -53}, {57, -56}, {-54, -55}, {59, -61}, {
                   60, -60}, {-58, -59}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1,
                    1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
                   1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
                    2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2}], "NominalSplits" -> {}, 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 1, 2, 5, 5, 1, 3, 1, 2, 5, 4, 5, 5, 
                   6, 6, 6, 1, 4, 1, 3, 1, 1, 4, 2, 6, 6, 1, 5, 1, 2, 3, 3, 1,
                    5, 4, 1, 3, 5, 4, 2, 4, 6, 5, 5, 3, 5, 5, 2, 2, 1, 2, 4, 
                   4, 6, 6, 4, 5, 4, 2, 1, 2, 4, 5, 6, 3}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZAADhX/+N+xBDI1jb/cDqQVH3p8D07aXHoNoBSi94Pva
JhDdoJh5CEQn/JyxCqRvwVOZMyC6AaZe4P9TEP+AA4TvYA+hGU5PfQ825ySU
hvITzie8Bql/8DHvIYhWaD79GWzeH4i7HKScboLlj3/4Z49kfsN5qDvZ8h6D
xaHmNpzf+gPsDqj9C+aoMhwA6X9i9A7sjuzI22D9GRA6gYP5JtgddlD1pT2f
we4Wf3MZLJ4FVQ+VTyiDyC94DDHvAFT9Aaj9D2D+hdIOUPvg5sPC6RlE/wIo
7dAsf8QeyZ0wexqgtAI7xJ8HOKD+hdqbsCpuP7I7HjyF6H8g/Pc6Mh/mL4at
EPULoOY5gPwHAMZ0waY=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 26}, {3, 5}, {-1, 4}, {-2, -3}, {6,
                    22}, {7, 8}, {-4, -5}, {-6, 9}, {10, -20}, {11, 21}, {12, 
                   20}, {-7, 13}, {14, 16}, {-8, 15}, {-9, -10}, {17, 
                   18}, {-11, -12}, {
                   19, -15}, {-13, -14}, {-16, -17}, {-18, -19}, {
                   23, -25}, {-21, 24}, {-22, 25}, {-23, -24}, {27, 51}, {28, 
                   31}, {29, 30}, {-26, -27}, {-28, -29}, {32, 42}, {33, 
                   36}, {34, -33}, {35, -32}, {-30, -31}, {37, 40}, {
                   38, -37}, {39, -36}, {-34, -35}, {-38, 41}, {-39, -40}, {
                   43, 49}, {-41, 44}, {45, 46}, {-42, -43}, {-44, 47}, {
                   48, -47}, {-45, -46}, {-48, 50}, {-49, -50}, {52, 62}, {53,
                    55}, {54, -53}, {-51, -52}, {56, 61}, {57, 60}, {58, 
                   59}, {-54, -55}, {-56, -57}, {-58, -59}, {-60, -61}, {
                   63, -66}, {-62, 64}, {-63, 65}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1,
                    2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 
                   1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
                    2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 2, 6, 1, 2, 4, 4, 3, 6, 4, 1, 3, 
                   2, 2, 5, 5, 6, 4, 5, 1, 3, 3, 6, 3, 6, 5, 1, 1, 1, 5, 4, 5,
                    6, 5, 4, 3, 5, 6, 1, 6, 6, 2, 6, 2, 5, 2, 5, 3, 2, 1, 4, 
                   1, 2, 1, 4, 4, 5, 1, 2, 3, 2, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZ4CAk1Pf7wdSC57KnAEJPbgGoRXOQsQT3sgxHADRj43e
gfgMpT2fweqhtEJm5G2Q+gNQcxTKIOIHivnugWiHbIi8whOI/gdQ2sHh0mOw
eTD6FNQdUP0PbCHiCQ2ZF8Hqc6D2QO1bcBpqXxaEnwDlP7CD6nuhfQ3sjpiK
j2D9HsGNYP1Q+QNC/5+CzYHZAzMPKr/gQ95DkHyDVuYhMB8q7gBzp2jWC5C8
Ayz8YP6HhtMCzrzHYPOfQflr4/aD3fcUwm9YAeEvSIO6Hyr+oMzpNZiGhm9D
xm6Ie6DhxlDPfQ7sDmg4OUDVMWyDmv8u7w/Ene/B6hp++9+AhBeEv2AZUB0A
ET6/yA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, -42}, {4, 33}, {-1, 5}, {
                   6, 7}, {-2, -3}, {8, 29}, {9, 22}, {10, 12}, {-4, 
                   11}, {-5, -6}, {13, 17}, {14, 15}, {-7, -8}, {
                   16, -11}, {-9, -10}, {18, 19}, {-12, -13}, {20, 
                   21}, {-14, -15}, {-16, -17}, {23, 28}, {24, 
                   25}, {-18, -19}, {-20, 26}, {
                   27, -23}, {-21, -22}, {-24, -25}, {-26, 30}, {-27, 
                   31}, {-28, 32}, {-29, -30}, {34, -41}, {35, 38}, {
                   36, -34}, {37, -33}, {-31, -32}, {39, -40}, {40, 
                   41}, {-35, -36}, {42, -39}, {-37, -38}, {44, 59}, {
                   45, -58}, {46, 47}, {-43, -44}, {48, 49}, {-45, -46}, {-47,
                    50}, {51, 52}, {-48, -49}, {53, 57}, {-50, 54}, {55, 
                   56}, {-51, -52}, {-53, -54}, {58, -57}, {-55, -56}, {-59, 
                   60}, {61, -64}, {62, -63}, {63, -62}, {-60, -61}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
                   1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1,
                    1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 1, 4, 3, 1, 3, 5, 3, 4, 6, 1, 4, 
                   3, 1, 5, 1, 4, 5, 1, 6, 3, 1, 2, 1, 2, 5, 4, 6, 3, 5, 3, 3,
                    5, 6, 3, 2, 3, 1, 1, 3, 1, 4, 5, 1, 5, 3, 6, 5, 4, 4, 1, 
                   1, 4, 6, 1, 1, 5, 1, 4, 2, 2, 5, 4, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZAADBdtLj/cD6QPPjN6BaIbaebdAtENpz2cQveCX/w17
IP1A4SmYn/ANwl8A1eegk3kIRDd8zHsIEk84PfU9WF/H4nsgvsMHiLiCBkTd
g3l9W0G0gj3U3rfvjoDlP0HV2UHEE84nvAbbAzWvISPyNoh/oIfpA5h+CnGv
g6/8EbD8uffnwPpg+ssg7k84CdGvkAvV7wC1NwfCd8iG0A1Q8QVQ9QuyIOIM
UHsaMiH8BZniz8D6Yyo+gs2FmsPwbssGsP9KIPYe2Bi3H2y/5oyrYHozhK8A
tY+BPe8x2L8bIOIN0PCGuVsh6MRhsP8+PL4Bdg9UnIEDqk989SWwukkPwO5W
WAi1z/znZbD9Av+fQuIDEi4OT2TOgO2FqjsgCJFfcAIoDwB76b6d
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 5}, {-1, 4}, {-2, -3}, {6,
                    22}, {-4, 7}, {8, -20}, {9, 21}, {-5, 10}, {11, 15}, {12, 
                   13}, {-6, -7}, {-8, 14}, {-9, -10}, {-11, 16}, {17, 
                   18}, {-12, -13}, {-14, 19}, {-15, 
                   20}, {-16, -17}, {-18, -19}, {23, 27}, {24, 26}, {
                   25, -23}, {-21, -22}, {-24, -25}, {28, 39}, {29, 
                   30}, {-26, -27}, {31, -37}, {-28, 32}, {33, -36}, {
                   34, -35}, {-29, 35}, {36, -34}, {37, -33}, {-30, 
                   38}, {-31, -32}, {40, 41}, {-38, -39}, {-40, 
                   42}, {-41, -42}, {44, 60}, {45, 49}, {46, 48}, {
                   47, -45}, {-43, -44}, {-46, -47}, {-48, 50}, {51, 58}, {52,
                    56}, {53, -53}, {54, -52}, {-49, 55}, {-50, -51}, {
                   57, -56}, {-54, -55}, {59, -59}, {-57, -58}, {61, 
                   63}, {-60, 62}, {-61, -62}, {64, 
                   65}, {-63, -64}, {-65, -66}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1,
                    2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
                    1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 2, 5, 6, 3, 1, 5, 6, 2, 3, 4, 2, 5, 
                   2, 5, 2, 1, 1, 1, 1, 5, 5, 1, 1, 2, 3, 1, 3, 5, 2, 6, 5, 1,
                    1, 4, 3, 6, 5, 3, 6, 4, 6, 4, 1, 5, 5, 6, 2, 3, 3, 1, 3, 
                   3, 3, 6, 2, 2, 4, 6, 5, 3, 2, 3, 2, 5, 6, 5, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJw1UT1LA0EUXKt0Wtim2FQWWtlrttBW8aPRQhdFYhTORi1lf4Cd2Ni4Nkdq
bYU7tEnIoZA0BiGsJCeCYARBEQR137y9Zpi3M7M770obe4tbQ0KIGUGf2z/+
SP5R9yffPIqpVs+jy04HxHdWHsukK957rqZxnjb4PIfPsE4dIC99xtyVodfM
NfsVc7Vca5Ouu/lKvpOR2KOsTHQIz9YSj/YCaI4KfZovnZPecI6t4n69Olen
vG1wccV+7mcLUc/PJfc08fgt5UXrTfKF91e4TxM9rYJe7vKcc+wh9JL3Yd+j
J8r/Gb6jPO6r2R/ydF7MSPc1/0D4CUyvF7rUo1S9oXeMAW1A9osO/LoxoHvk
6G9OnP9b2LP+Rq7NoDOB18FtjP1I7uNq4G725TL5AwOVyc4=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 32}, {4, 20}, {5, 7}, {-1,
                    6}, {-2, -3}, {8, 18}, {9, 16}, {10, 15}, {11, 13}, {
                   12, -6}, {-4, -5}, {-7, 14}, {-8, -9}, {-10, -11}, {-12, 
                   17}, {-13, -14}, {-15, 19}, {-16, -17}, {21, 27}, {
                   22, -24}, {23, 25}, {24, -20}, {-18, -19}, {-21, 
                   26}, {-22, -23}, {28, 29}, {-25, -26}, {-27, 30}, {
                   31, -30}, {-28, -29}, {33, 39}, {34, -37}, {35, -36}, {
                   36, -35}, {-31, 37}, {-32, 38}, {-33, -34}, {40, 
                   41}, {-38, -39}, {-40, -41}, {43, 63}, {44, 48}, {-42, 
                   45}, {46, 47}, {-43, -44}, {-45, -46}, {49, -62}, {50, 
                   57}, {51, -54}, {52, 54}, {53, -49}, {-47, -48}, {
                   55, -53}, {-50, 56}, {-51, -52}, {58, -61}, {59, 62}, {60, 
                   61}, {-55, -56}, {-57, -58}, {-59, -60}, {64, 66}, {
                   65, -65}, {-63, -64}, {-66, 67}, {68, -69}, {-67, -68}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 
                   1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1,
                    1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 1, 2, 5, 2, 6, 1, 3, 2, 1, 5, 4, 
                   2, 6, 1, 1, 6, 2, 6, 3, 1, 6, 3, 1, 5, 2, 5, 5, 1, 2, 5, 5,
                    5, 4, 6, 3, 3, 5, 5, 4, 2, 4, 4, 3, 3, 6, 4, 4, 1, 1, 3, 
                   1, 2, 5, 2, 3, 1, 6, 1, 2, 1, 6, 6, 2, 3, 3, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYYCAk1Pf7wdSDtdkztgD6YQ3cgwHQPxnRu9A4gccLj0G
0Q1QfsJpiHqGFp8rYH525G2wPpj8NOavYNoOom9Bac9nEP3gCUSe4RRE/4Gj
mhVgWujBJrD5UHMboOoOnIHwEzIh5isszj8M5kP1N+RAxA8U890D2wNz5+n3
58D2QPkJUNrB6wrYfw43If5kgLqvwR5Cw/gH3uc9BKuDumeBWuYhsDmaENrB
HlWfwieI+gcPIOY2fITySyD+ZsiDuNMhF0Iv4Mx7bI8ULg5lEFoh6ATYfw7r
NzwE86H+XjDr4DWwu6DhsmBT3H6we55CwzMDoo4ha/kLMJ8DYr5Cus5NsPoT
kPB44PoCHM4K7BD5BjYIzXAGKv/L/wbYPg2IPxlA/gAA0zPFog==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 44}, {3, 31}, {-1, 4}, {5, 
                   11}, {-2, 6}, {7, 10}, {8, -6}, {-3, 
                   9}, {-4, -5}, {-7, -8}, {12, 15}, {13, -12}, {
                   14, -11}, {-9, -10}, {16, 25}, {17, -22}, {18, -21}, {19, 
                   21}, {20, -15}, {-13, -14}, {-16, 22}, {23, -20}, {
                   24, -19}, {-17, -18}, {26, 27}, {-23, -24}, {28, 30}, {
                   29, -27}, {-25, -26}, {-28, -29}, {32, 34}, {
                   33, -32}, {-30, -31}, {35, 42}, {-33, 36}, {37, 
                   38}, {-34, -35}, {39, 40}, {-36, -37}, {-38, 
                   41}, {-39, -40}, {43, -43}, {-41, -42}, {45, 61}, {46, 
                   60}, {47, -58}, {48, -57}, {49, 56}, {50, 54}, {51, -48}, {
                   52, 53}, {-44, -45}, {-46, -47}, {-49, 55}, {-50, -51}, {
                   57, 59}, {-52, 58}, {-53, -54}, {-55, -56}, {-59, -60}, {
                   62, 67}, {63, 65}, {64, -63}, {-61, -62}, {
                   66, -66}, {-64, -65}, {68, -69}, {-67, -68}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
                   1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1,
                    1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 3, 1, 2, 2, 5, 3, 6, 6, 2, 3, 1, 
                   2, 1, 3, 5, 1, 5, 4, 2, 3, 3, 4, 1, 6, 1, 6, 4, 2, 3, 4, 1,
                    6, 4, 3, 3, 3, 3, 1, 3, 6, 4, 2, 2, 3, 4, 3, 5, 1, 5, 2, 
                   6, 4, 6, 4, 1, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYoAA20uP94NojWNvQfSCX/437IF0w/nPP0F8h6dG70C0
whMo7QBRn/ANqu7k1PdgdacgdMIdmTMg8QeKmYfA4sf5noH4C55CxW87fADR
DJoQeQVHqHk/Z6wCiTvYQfgKwv+fgvgKj6H2ZkbeBstnQ+gFpT2fweaLv7kM
og+chtof9fwimA91F0zdAaj7H8DMKYOIM3BPv4KsfwHU3gO5EHUH/kL8mfAd
SstD/SUVkA/2z0+I+AO2vMdgeUGo/jPvz4HUNTyD2OuQBTHvAdQ9DekQfsPK
uP1g/u7Fm8H8FRB+AjTcYebC/JHADuHD3K+QrnMTLA6SBwB656gg
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 37}, {3, 8}, {4, 5}, {-1, -2}, {-3,
                    6}, {7, -6}, {-4, -5}, {9, 17}, {10, 16}, {11, -13}, {12, 
                   14}, {13, -9}, {-7, -8}, {
                   15, -12}, {-10, -11}, {-14, -15}, {-16, 18}, {19, 35}, {20,
                    31}, {21, -28}, {22, -27}, {-17, 23}, {24, 28}, {25, 
                   27}, {26, -20}, {-18, -19}, {-21, -22}, {29, -26}, {-23, 
                   30}, {-24, -25}, {-29, 32}, {33, 
                   34}, {-30, -31}, {-32, -33}, {36, -36}, {-34, -35}, {38, 
                   45}, {39, 41}, {-37, 40}, {-38, -39}, {42, 
                   43}, {-40, -41}, {44, -44}, {-42, -43}, {-45, 46}, {47, 
                   53}, {48, 50}, {-46, 49}, {-47, -48}, {51, -52}, {
                   52, -51}, {-49, -50}, {54, 55}, {-53, -54}, {-55, 
                   56}, {-56, 57}, {58, -59}, {-57, -58}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1,
                    2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 
                   1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1,
                    1, 2, 1, 1, 2, 1, 2, 1, 1}], "NominalSplits" -> {}, 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 2, 3, 5, 6, 1, 6, 3, 1, 2, 4, 5, 
                   2, 5, 4, 4, 3, 3, 5, 4, 6, 3, 1, 4, 2, 5, 3, 4, 4, 5, 1, 3,
                    3, 4, 6, 4, 6, 4, 2, 3, 5, 4, 4, 3, 1, 4, 3, 5, 6, 5, 6, 
                   3, 1, 1, 1, 5, 1, 1, 4, 4, 1, 5, 3, 3, 4, 6, 6, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZYAA20uP94NoQYP/INrhmswZeyB9IDPyNoheYAeVPzX1
PVh+yi4wP+EMhH/gh/8NkLqEnzNWgegH59+fA4k/KO35DKIbHCD6HZ4YvQPR
Co4Q/oEyiPwCKJ2QDbGPAUo/sIfqg5pzAGq/Qg5E3kGy5BlYHmbOU4j5CVD3
OshnHgK7433eQ7B/oHQC1NwF/z//BNunBlGXoAlV/xGizgFqXwKUD/Ovwyeo
eY8g4bQgDeruhXH7wf79AJWHunvBb2j4hLNuBfM/Q+QX/IKIP5gH0cfAlvcY
rG8VhP8AyneA+veB8N/r4HDoWvYC7K61n9+CzVsOUa9wlOc12BzZnSjhlgCL
h+zrb8H2Qt2pkAcxNwEaz7D4UuCA2ssOoRPMf17eDwDEgMom
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 41}, {-1, 3}, {4, 28}, {5, 13}, {
                   6, -10}, {7, 11}, {8, 9}, {-2, -3}, {10, -6}, {-4, -5}, {
                   12, -9}, {-7, -8}, {14, 16}, {15, -13}, {-11, -12}, {-14, 
                   17}, {-15, 18}, {19, 23}, {20, -20}, {-16, 21}, {
                   22, -19}, {-17, -18}, {-21, 24}, {25, 
                   26}, {-22, -23}, {-24, 27}, {-25, -26}, {29, -40}, {30, 
                   32}, {31, -29}, {-27, -28}, {33, 40}, {34, 37}, {
                   35, -33}, {36, -32}, {-30, -31}, {-34, 38}, {-35, 
                   39}, {-36, -37}, {-38, -39}, {42, 50}, {43, 47}, {44, 
                   45}, {-41, -42}, {-43, 46}, {-44, -45}, {-46, 48}, {
                   49, -49}, {-47, -48}, {51, 52}, {-50, -51}, {53, 56}, {
                   54, -55}, {55, -54}, {-52, -53}, {57, 
                   58}, {-56, -57}, {-58, 59}, {-59, 60}, {61, 69}, {
                   62, -68}, {63, -67}, {64, 68}, {65, -64}, {-60, 66}, {
                   67, -63}, {-61, -62}, {-65, -66}, {-69, -70}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
                    1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 
                   1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
                    2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 
                   1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 3, 6, 6, 3, 1, 2, 4, 1, 2, 2, 5, 1, 
                   3, 1, 3, 4, 6, 5, 4, 1, 5, 2, 2, 5, 4, 5, 2, 6, 1, 5, 2, 4,
                    3, 1, 2, 2, 2, 2, 1, 1, 5, 1, 2, 2, 5, 3, 5, 6, 2, 6, 3, 
                   5, 3, 6, 1, 2, 3, 1, 6, 1, 4, 4, 3, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZICAk1Pf7wdSC77537AH0glQvsNpCM2glnkIRCu87LwB
Fn8ocwakruFD3kMQfWBNXTVI/ME1iPiBxxA6we7SY5B4wjTmryC6ITPyNkhc
ISbhN4h/AMpvEPj/FKwPai+DPUTfgtKez2D7QlZcBos7QMQdnhi9A7vnKYRu
gNrjAFW/AKqu4RlEHuaPBXtnnEY2p+ExVL4Moi8hB+KeBZniz8D+gdrz4Cma
feffnwPzxVdfAssL/70O1r8tbj+Y/5P3CbL5DVBzGmZB5BkyIPY4rIbwD7Dn
PQbzYfbA+NlQ98yHqGuA6nvABpFnkInfbY/kzgVQ9Q/W7vsMDn+oOQ9mWxwB
q4eGswOUfvATEt8NAae27QcAvwW9Aw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 39}, {3, 12}, {4, -10}, {5, 
                   10}, {-1, 6}, {-2, 7}, {8, -6}, {-3, 9}, {-4, -5}, {-7, 
                   11}, {-8, -9}, {13, 32}, {14, 16}, {-11, 15}, {-12, -13}, {
                   17, 23}, {18, -20}, {19, 21}, {-14, 20}, {-15, -16}, {
                   22, -19}, {-17, -18}, {24, 30}, {25, 29}, {26, -25}, {
                   27, -24}, {28, -23}, {-21, -22}, {-26, -27}, {-28, 
                   31}, {-29, -30}, {33, -38}, {34, 37}, {35, -34}, {
                   36, -33}, {-31, -32}, {-35, 38}, {-36, -37}, {40, 62}, {41,
                    55}, {42, 54}, {-39, 43}, {44, 48}, {45, -44}, {
                   46, -43}, {47, -42}, {-40, -41}, {49, 50}, {-45, -46}, {51,
                    52}, {-47, -48}, {53, -51}, {-49, -50}, {-52, -53}, {56, 
                   57}, {-54, -55}, {58, 59}, {-56, -57}, {60, -61}, {-58, 
                   61}, {-59, -60}, {-62, 63}, {-63, 64}, {
                   65, -66}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2,
                    1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 
                   1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1,
                    2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 4, 1, 6, 5, 3, 2, 4, 3, 5, 3, 4, 5, 
                   2, 5, 2, 2, 6, 5, 4, 1, 3, 4, 1, 6, 3, 6, 2, 1, 5, 3, 2, 2,
                    6, 1, 6, 2, 3, 2, 6, 3, 2, 4, 4, 2, 6, 4, 6, 4, 2, 1, 2, 
                   1, 3, 3, 5, 1, 3, 2, 1, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZQCDA9vj9u8H0gtKez6D6ISIg39B9IGTU9+DaAa7S49B
tEJO5G17EP+J0TswvwyqHiq+AKou4Zv/DRD/wfu8h2DaASL+4JbMGRBfwR7C
Z3gK4R+AiZ+G2PcAKr/gA0S/wh++c2BzlTIPgeU/QsQZqp9/Bpt/CqKvIQPq
Piif4cJ7sL4DbsabkN134AfEfQ2nIfIJJ6E0VN8BAcdLYHug7lF4CvHvg0yo
P59B+A5Q+YRsqL2PoeLQcHSAhs8CaHgxcOY9BuuHhRs7hJ8AVQ8P13Sdm5Dw
gfAXvNq6FUxD7VFIh9q3FBpvO92vg9VnQcQdTkH9E84K1ndA8P9TewAIrbP+

                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 11}, {-1, 4}, {5, 8}, {-2,
                    6}, {7, -5}, {-3, -4}, {9, 10}, {-6, -7}, {-8, -9}, {12, 
                   26}, {13, 15}, {-10, 14}, {-11, -12}, {16, 21}, {
                   17, -18}, {18, 20}, {-13, 
                   19}, {-14, -15}, {-16, -17}, {-19, 22}, {23, -24}, {
                   24, -23}, {-20, 25}, {-21, -22}, {27, 34}, {28, 32}, {-25, 
                   29}, {30, -29}, {31, -28}, {-26, -27}, {-30, 
                   33}, {-31, -32}, {35, -41}, {36, 38}, {-33, 
                   37}, {-34, -35}, {39, 40}, {-36, -37}, {
                   41, -40}, {-38, -39}, {43, 59}, {44, 56}, {45, 49}, {46, 
                   48}, {47, -44}, {-42, -43}, {-45, -46}, {50, 55}, {
                   51, -52}, {52, 53}, {-47, -48}, {-49, 
                   54}, {-50, -51}, {-53, -54}, {57, -58}, {
                   58, -57}, {-55, -56}, {60, -62}, {-59, 61}, {-60, -61}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
                    1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2,
                    1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 6, 1, 5, 6, 4, 1, 1, 3, 4, 2, 5, 5, 
                   4, 5, 5, 5, 4, 2, 5, 5, 4, 6, 2, 1, 2, 2, 2, 4, 4, 2, 6, 1,
                    1, 4, 2, 1, 4, 1, 5, 6, 6, 6, 5, 2, 5, 4, 4, 1, 1, 5, 1, 
                   4, 5, 2, 3, 6, 5, 1, 5, 4, 6, 5, 2, 1, 6, 1, 5, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZQADh3Pvz+0H0gonp74H0Qd2GD0E0Ql2lx6D6VMQ8Yay
ns9g+vzWHyB6wRxVhgNA+kFO5G17kHgpVP6p0TuwvC1EfwOUfgCVV3CE8Bmg
5h+AyjPA9D+D6G+wh4grOEBoB5j+0xD3LHgMUecQsuIy2JwnUD7UfgaYOVB9
BwT/P7VHMp+BPe8xiP/geirEv+Y/IeZA/QnXXzIRbP8CmPsydkPcszBuP1gc
ag4DG9Q8KM2wDSIPc8+CLRA+LBxgNMPk1K0g9Q6Xyjcjh1vCu3V/wPwPeQ/t
kcQf3JA5A+Ir/PS/AfYPLN6g4eVgo/8BLA8Lv48Q/QlnIOpg4Z7wAGpO4ufP
YHlouD5oPXUU7B5YvMwCuhsAOkvRYA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 50}, {3, 30}, {4, 14}, {5, 12}, {6,
                    11}, {-1, 7}, {8, 9}, {-2, -3}, {
                   10, -6}, {-4, -5}, {-7, -8}, {-9, 13}, {-10, -11}, {15, 
                   18}, {-12, 16}, {-13, 17}, {-14, -15}, {19, -28}, {20, 
                   24}, {21, 23}, {22, -18}, {-16, -17}, {-19, -20}, {25, 
                   29}, {26, 27}, {-21, -22}, {
                   28, -25}, {-23, -24}, {-26, -27}, {31, -49}, {32, 
                   34}, {-29, 33}, {-30, -31}, {35, 46}, {-32, 36}, {37, 
                   39}, {38, -35}, {-33, -34}, {40, 43}, {41, -39}, {
                   42, -38}, {-36, -37}, {-40, 44}, {-41, 45}, {-42, -43}, {
                   47, 48}, {-44, -45}, {49, -48}, {-46, -47}, {51, 54}, {
                   52, -53}, {-50, 53}, {-51, -52}, {55, 67}, {56, 59}, {57, 
                   58}, {-54, -55}, {-56, -57}, {60, 64}, {61, 63}, {-58, 
                   62}, {-59, -60}, {-61, -62}, {65, 
                   66}, {-63, -64}, {-65, -66}, {-67, 68}, {-68, 
                   69}, {-69, -70}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
                   2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2,
                    2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 
                   2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 1, 6, 2, 5, 1, 3, 2, 5, 3, 3, 2, 5, 
                   6, 5, 4, 4, 6, 6, 1, 1, 5, 4, 3, 6, 2, 3, 5, 6, 2, 5, 3, 3,
                    1, 2, 2, 5, 6, 2, 6, 2, 6, 4, 4, 2, 5, 3, 4, 5, 1, 4, 3, 
                   3, 6, 3, 2, 5, 5, 4, 2, 5, 1, 6, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYAADhXPvz+0H0gfeF96wBwmcnPoezH9m9A5ENzhcegyi
GWrn3QLRCRmRt0HqGs5D9D2whcgnZEHEGaB0wxOI/gd2UPlTEHMToOYdKO35
DDa3DEIfOA2RfwBT58d0EyzfbncALA/V9wCqXiEXYs8CzrzHYPug7oXZr7Ah
bj+YzwGRZ4DKOyyEiC9Ig+r/5Q/29wLtmVfB6p9C1CnA3L8Mqp4dYg4sXBSg
4fTgqswZsH1Qdz8Q+v8U7B5hCJ1wEhJOCtBweKCUeQjsv095D+2RwuOB0qeb
YHd8hIgf0IGoe6AFoR3OQMxfoAnhH3gAsfeAPTQ8ofHw4D1EP8NDqLtmQsOB
9TA4yh9Aw8PhFNBdAN4GvNI=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, 39}, {4, 23}, {5, 7}, {-1,
                    6}, {-2, -3}, {8, 9}, {-4, -5}, {10, -20}, {11, 16}, {
                   12, -11}, {13, 14}, {-6, -7}, {-8, 15}, {-9, -10}, {
                   17, -19}, {18, 22}, {-12, 19}, {20, 
                   21}, {-13, -14}, {-15, -16}, {-17, -18}, {-21, 24}, {25, 
                   37}, {26, -34}, {-22, 27}, {28, 34}, {29, 31}, {
                   30, -25}, {-23, -24}, {32, 33}, {-26, -27}, {-28, -29}, {
                   35, -33}, {-30, 36}, {-31, -32}, {
                   38, -37}, {-35, -36}, {-38, -39}, {41, 61}, {42, 46}, {43, 
                   45}, {-40, 44}, {-41, -42}, {-43, -44}, {47, 58}, {
                   48, -56}, {49, 57}, {50, 51}, {-45, -46}, {52, 55}, {-47, 
                   53}, {-48, 54}, {-49, -50}, {
                   56, -53}, {-51, -52}, {-54, -55}, {-57, 59}, {-58, 
                   60}, {-59, -60}, {62, -65}, {63, -64}, {-61, 
                   64}, {-62, -63}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2,
                    1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 
                   1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
                    1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 3, 4, 2, 2, 4, 2, 1, 6, 6, 4, 5, 3, 
                   3, 6, 6, 4, 5, 3, 4, 5, 4, 2, 3, 6, 5, 2, 6, 3, 5, 3, 3, 1,
                    1, 2, 1, 2, 5, 3, 6, 5, 1, 3, 3, 4, 2, 2, 2, 2, 6, 5, 4, 
                   5, 3, 2, 3, 4, 3, 2, 3, 5, 2, 2, 5, 2, 4, 5, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYYCAk1Pf7wdSC77537AH0Z/yHoLppzJnQHTCAwi94ANE
3OEmlL9j/WcwfQqq/zSEPvARoo7B7tJjEF9BLfMQmIaa/wCq3gGqvqGs5zOY
toWqz4i8DVYn9P8p2BxHiPiDEoi6A0+N3oH1p0PUMZyF2g+z78z7cyA6AWpP
QjZEXQJU/kAW1PxMCN2wTPswWB9f7x+wOx5DzZcseQaiGaD2KcDMz4Xaewbq
X5i5AnOfIdsHUwdzd8MziDkHoLQClE6Amn+ALe8x2J2b4/aD1ZdC9D1YCOEr
QN3N8ASqD2qPAzT8GKD2OUDlF8Dk50H0LzgBCxcI7QA1l+EChH9AEBLeDWug
9s0E0gBShMf9
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 45}, {3, 17}, {4, 14}, {5, -11}, {
                   6, 12}, {7, 9}, {8, -3}, {-1, -2}, {10, 
                   11}, {-4, -5}, {-6, -7}, {13, -10}, {-8, -9}, {15, -15}, {
                   16, -14}, {-12, -13}, {18, 19}, {-16, -17}, {20, 28}, {21, 
                   26}, {22, 23}, {-18, -19}, {24, 
                   25}, {-20, -21}, {-22, -23}, {27, -26}, {-24, -25}, {29, 
                   42}, {30, 36}, {31, -33}, {32, -32}, {33, -31}, {
                   34, -30}, {-27, 35}, {-28, -29}, {-34, 37}, {38, 
                   39}, {-35, -36}, {40, -40}, {-37, 41}, {-38, -39}, {-41, 
                   43}, {-42, 44}, {-43, -44}, {46, 62}, {47, 
                   48}, {-45, -46}, {-47, 49}, {50, 53}, {-48, 51}, {-49, 
                   52}, {-50, -51}, {54, 60}, {55, 56}, {-52, -53}, {57, 
                   58}, {-54, -55}, {-56, 59}, {-57, -58}, {-59, 
                   61}, {-60, -61}, {63, 68}, {64, -67}, {65, -66}, {-62, 
                   66}, {67, -65}, {-63, -64}, {-68, -69}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2,
                    1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 
                   1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2,
                    1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 6, 5, 1, 6, 6, 6, 2, 5, 2, 6, 1, 2, 
                   1, 1, 2, 3, 4, 2, 4, 2, 4, 4, 6, 2, 5, 5, 4, 1, 1, 4, 1, 3,
                    6, 5, 2, 1, 4, 2, 2, 3, 4, 6, 1, 1, 1, 5, 1, 1, 2, 6, 6, 
                   3, 6, 1, 6, 6, 1, 2, 5, 6, 1, 3, 5, 5, 6, 6, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYQCDByU9n/cDaYWTU9+DaAe7S49B9AOvT2fB/NNQ8TMQ
egGUZnhi9A6szwGifsEzCH8BVH3ClW+XwXyougPFfPfA4pOWg8UTnkLEGbIi
b9uDzC+FuCPhMdRcGB9qrkMZhN8AFWdgy3tsj2R+w+y4/WDxzRC6Aaa+Zc4D
sPjk1K0g9QlQcYf1Gx6C3ZcNsZ+BHWJewgaIfgeoOxg0dl3Zj+S+AzB3Q+kE
qH6HD3kPQfQDaDgemN30DOy+jsX3QLRC4ufPYHW2kPBqOP/5J5iO+LMRLH5H
5gyIPgANX7g5CpmHwPacgob7dftzYHug4QwLb4fjfGD7Ep5CzGmwh9hzAGpO
wtujh8Hu0YaYpzAT4s8HKyD0Amh4KnBA6AeuLzbtBwDDlM1s
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 23}, {4, 21}, {5, 16}, {6,
                    12}, {7, 9}, {8, -3}, {-1, -2}, {10, 
                   11}, {-4, -5}, {-6, -7}, {13, 15}, {-8, 
                   14}, {-9, -10}, {-11, -12}, {-13, 17}, {-14, 18}, {19, 
                   20}, {-15, -16}, {-17, -18}, {22, -21}, {-19, -20}, {24, 
                   37}, {25, 26}, {-22, -23}, {27, 36}, {28, 30}, {-24, 
                   29}, {-25, -26}, {31, -33}, {32, 34}, {-27, 
                   33}, {-28, -29}, {-30, 35}, {-31, -32}, {-34, -35}, {
                   38, -41}, {39, 40}, {-36, -37}, {41, -40}, {-38, -39}, {43,
                    47}, {44, -46}, {45, 46}, {-42, -43}, {-44, -45}, {48, 
                   64}, {-47, 49}, {50, 54}, {51, -52}, {-48, 52}, {-49, 
                   53}, {-50, -51}, {55, 59}, {-53, 56}, {-54, 57}, {-55, 
                   58}, {-56, -57}, {60, -63}, {61, 63}, {-58, 
                   62}, {-59, -60}, {-61, -62}, {65, -69}, {66, -68}, {-64, 
                   67}, {-65, 68}, {-66, -67}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 
                   1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1,
                    1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 6, 2, 5, 6, 6, 1, 6, 3, 6, 4, 5, 1, 
                   5, 5, 2, 5, 1, 5, 4, 2, 5, 3, 2, 2, 3, 2, 1, 2, 2, 5, 5, 1,
                    6, 5, 1, 1, 6, 1, 2, 1, 4, 2, 3, 4, 4, 5, 1, 4, 5, 1, 6, 
                   4, 3, 5, 3, 5, 1, 4, 6, 4, 1, 2, 4, 2, 4, 1, 2, 2, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYwCDA5fen9sPpBVOTn0Pog88M3oHohscLj0G0QvOQMQb
TkNoh3fiB8A0jJ8dedsepA7GL+v5DFZvB9H/wOvTWbC4PYTvABU/8ARqD4xf
zHcPbJ8tVF0p1ByYOqj+A5kQ+xKg4g8eQ2iGLKg7oO5fsG3bGbC6pxC+A8yc
2XH7wf5dCKEd1m94CFbPnvcYrH8jVJwz4ibYfKcYsHwCG1R+1sFrYP1QexKi
/E6A7Yf6G+YvWLg0QP0BCxcHqP8Sks1+ge39lPcQ7E5oeCu8WPMUrA8aHwkf
IPIKmpmHwObDwkEHwleA8hMKC8DqHnyEqGc4C9Gv8BnCf2D4+AXY/Sch8f1A
6D/YngXXZMDhpCAA4R+QFTgCNu80RF3CcWj6uOLzYT8AJqvVaw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 47}, {3, 31}, {4, 7}, {-1, 5}, {-2,
                    6}, {-3, -4}, {8, 26}, {9, 18}, {10, 14}, {11, 13}, {-5, 
                   12}, {-6, -7}, {-8, -9}, {-10, 15}, {16, -14}, {
                   17, -13}, {-11, -12}, {19, 23}, {20, -19}, {21, 
                   22}, {-15, -16}, {-17, -18}, {-20, 24}, {-21, 
                   25}, {-22, -23}, {-24, 27}, {-25, 28}, {29, -29}, {-26, 
                   30}, {-27, -28}, {32, 45}, {33, 44}, {34, 36}, {
                   35, -32}, {-30, -31}, {37, 38}, {-33, -34}, {-35, 
                   39}, {-36, 40}, {41, 42}, {-37, -38}, {
                   43, -41}, {-39, -40}, {-42, -43}, {46, -46}, {-44, -45}, {
                   48, 65}, {-47, 49}, {50, 60}, {51, 52}, {-48, -49}, {
                   53, -58}, {54, 55}, {-50, -51}, {-52, 56}, {-53, 57}, {58, 
                   59}, {-54, -55}, {-56, -57}, {-59, 61}, {62, 
                   63}, {-60, -61}, {64, -64}, {-62, -63}, {66, 70}, {67, 
                   68}, {-65, -66}, {-67, 69}, {-68, -69}, {-70, -71}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
                    2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1,
                    1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 
                   2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 2, 6, 4, 1, 2, 2, 3, 4, 5, 3, 1, 
                   2, 5, 5, 3, 1, 2, 3, 1, 3, 5, 6, 6, 3, 6, 2, 2, 6, 5, 3, 3,
                    1, 4, 4, 1, 3, 2, 2, 1, 1, 5, 5, 1, 3, 6, 4, 1, 1, 3, 6, 
                   1, 2, 1, 2, 5, 4, 2, 4, 4, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwY4CAk1Pf7wfRz43egegFT2XO2APpA1DxBaU9n0G0g/ib
yyD6wBOIuoRnENohJ/I2SL1DGURdgt2lx2B1mRDxhvNbf4DFH0PNh8ovsIfQ
DhkQdQov1jwF0Qmn358DiTf89L8B4i/Ysf4zWD4bqs4Bav5pqLvPQmgFhcxD
YHOh4gtg9p2EmPfgFFQd1N4DUHcv+A21Z9l8sP0LBP6D6QOf8h6C3SNj/AFs
L9Q/B55C/Q31f0JD5kWwO95t2QA2d03cfrD4ZgjtEOp8GCyeDtHPwJn3GDm8
GGR3gt2jcJTnNdidfyHucWCDqGuQ1PsFdscpiD8ULss+Q/Hfcog9sHg6AIsX
qPkPYPHHATQPAOTNuIs=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {-1, 3}, {4, -42}, {5, 32}, {
                   6, 13}, {7, -9}, {8, 10}, {9, -4}, {-2, -3}, {11, 
                   12}, {-5, -6}, {-7, -8}, {14, 16}, {15, -12}, {-10, -11}, {
                   17, 24}, {18, 22}, {19, 21}, {
                   20, -15}, {-13, -14}, {-16, -17}, {23, -20}, {-18, -19}, {
                   25, 27}, {26, -23}, {-21, -22}, {-24, 28}, {-25, 29}, {30, 
                   31}, {-26, -27}, {-28, -29}, {33, 42}, {34, 38}, {35, 
                   37}, {36, -32}, {-30, -31}, {-33, -34}, {39, 
                   40}, {-35, -36}, {-37, 41}, {-38, -39}, {-40, -41}, {44, 
                   51}, {45, 49}, {46, -47}, {-43, 47}, {
                   48, -46}, {-44, -45}, {50, -50}, {-48, -49}, {52, 
                   56}, {-51, 53}, {54, -55}, {55, -54}, {-52, -53}, {
                   57, -63}, {58, 59}, {-56, -57}, {-58, 60}, {-59, 61}, {-60,
                    62}, {-61, -62}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
                    2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 
                   2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2,
                    1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 2, 3, 3, 6, 5, 6, 6, 6, 5, 3, 1, 
                   3, 3, 2, 4, 2, 2, 6, 2, 2, 1, 3, 1, 4, 1, 6, 1, 6, 2, 3, 2,
                    4, 5, 6, 1, 4, 6, 4, 6, 1, 1, 4, 2, 3, 5, 4, 4, 2, 5, 5, 
                   5, 5, 5, 1, 6, 5, 5, 6, 1, 1, 1, 1, 4, 2, 2, 1, 1, 5, 5, 4,
                    5}], "NumericalThresholds" -> CompressedData["
1:eJxVUD1LQ0EQXBtLCdYW0drKH6DXWgXERgQ5BL8hgqAIae4H2ImogcB1BkEJ
CmnzxIDRRAsjUUyT8JIgQhI1hY0S3+3OK7xmmJndvZ0dXdycWRogommSd3vQ
zQWgKiOlqQC91kSH+dpc1XG1IkglqfMmH33GsA+6uhfU8NUG+vOJuuN2VbjG
XFPsPjidhvtN1m+EW1/+9+4wN9ynAf19/5zrfmMvPH82XXbc7Oz12I+kWrwH
9rPZLOey4LrxP5/3LLntV7zOObG/LiJvu5NnHb4K9/oQbsJ/dsfLjkd/hjiH
/hTfvmL+Mv5LLuScH40gN/LbguTXGfFraeCRoDpEH/pVRl9z/WDc5/0uRDcp
QQvd1Mb4/rR+8sb1Z702+/2tb56zLXejJu4CpNj8E9clryrML2WuPgXi3uY4
4H8qCdpv
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 46}, {3, 33}, {4, 8}, {5, 
                   6}, {-1, -2}, {-3, 7}, {-4, -5}, {9, 25}, {10, 
                   11}, {-6, -7}, {12, 22}, {13, 21}, {14, 15}, {-8, -9}, {16,
                    19}, {-10, 17}, {18, -13}, {-11, -12}, {
                   20, -16}, {-14, -15}, {-17, -18}, {23, 
                   24}, {-19, -20}, {-21, -22}, {26, 29}, {-23, 27}, {-24, 
                   28}, {-25, -26}, {30, -31}, {-27, 31}, {-28, 
                   32}, {-29, -30}, {-32, 34}, {35, 45}, {36, 43}, {37, 39}, {
                   38, -35}, {-33, -34}, {40, 41}, {-36, -37}, {-38, 
                   42}, {-39, -40}, {-41, 44}, {-42, -43}, {-44, -45}, {47, 
                   54}, {48, 53}, {-46, 49}, {50, -51}, {51, -50}, {-47, 
                   52}, {-48, -49}, {-52, -53}, {55, -74}, {56, 73}, {57, 
                   70}, {58, 59}, {-54, -55}, {60, -67}, {-56, 61}, {62, 
                   67}, {63, 65}, {64, -59}, {-57, -58}, {
                   66, -62}, {-60, -61}, {68, 
                   69}, {-63, -64}, {-65, -66}, {-68, 71}, {-69, 
                   72}, {-70, -71}, {-72, -73}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1,
                    1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 
                   1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2,
                    2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 
                   1, 1, 1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 1, 3, 3, 4, 4, 5, 4, 2, 2, 3, 2, 
                   1, 6, 3, 6, 2, 4, 3, 1, 6, 2, 3, 6, 2, 1, 2, 3, 6, 6, 3, 1,
                    2, 4, 2, 6, 5, 4, 6, 5, 4, 2, 3, 3, 5, 1, 2, 6, 1, 3, 6, 
                   2, 5, 1, 3, 5, 5, 4, 4, 1, 2, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZwCDA9vj9u8H0gnJZr/A9Bs5hgNAukEj8xCIz6AJoRd8
zHsI0nLgPYR2sL/0GCT+ACrO8EDmDIhWgNIHMiNvg+lnRu/A5r7jOgqiFc5O
fQ8274f/DZB8wxko/wZUv/D/p2Aaqr/h/OefIPkDJyHqDjyFmLfgN0Q/TLzh
MUT8geOpw2D77kDMc1CFuL/hNFQdVL1CFsT8B/eSX4P1Qd3JUNbzGazuCYTv
AHWfgx3EvwmlEHkHqHkMDtBwKIGIL4Ca05ABMd8hB2rPQkg4M0xO3Qr2H8w+
9rzHIP6CtriHYH3ZEPUJHBBxB6g7DkyH6s/ig5gPNddhFlQcar6CACT8HsBo
1xebwO468f4c2P2smTf3AwAlPrhc
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 4}, {-1, -2}, {5, 12}, {
                   6, -10}, {7, 9}, {-3, 8}, {-4, -5}, {10, 
                   11}, {-6, -7}, {-8, -9}, {13, 31}, {14, 15}, {-11, -12}, {
                   16, 17}, {-13, -14}, {-15, 18}, {19, 28}, {20, 27}, {21, 
                   25}, {-16, 22}, {-17, 23}, {-18, 24}, {-19, -20}, {-21, 
                   26}, {-22, -23}, {-24, -25}, {29, -29}, {-26, 
                   30}, {-27, -28}, {32, 41}, {-30, 33}, {-31, 34}, {-32, 
                   35}, {-33, 36}, {37, -39}, {-34, 38}, {39, -38}, {
                   40, -37}, {-35, -36}, {-40, -41}, {43, 57}, {44, 46}, {-42,
                    45}, {-43, -44}, {47, 54}, {48, -52}, {-45, 49}, {-46, 
                   50}, {51, 52}, {-47, -48}, {53, -51}, {-49, -50}, {
                   55, -56}, {-53, 56}, {-54, -55}, {58, 63}, {59, 62}, {-57, 
                   60}, {-58, 61}, {-59, -60}, {-61, -62}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
                   1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1,
                    2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 3, 6, 6, 2, 3, 1, 1, 1, 3, 1, 6, 3, 
                   5, 1, 5, 2, 1, 4, 4, 2, 1, 3, 2, 5, 6, 1, 2, 3, 1, 4, 6, 1,
                    2, 6, 5, 3, 1, 2, 3, 6, 6, 6, 4, 2, 4, 1, 2, 5, 3, 3, 6, 
                   1, 4, 5, 3, 3, 2, 1, 6, 6, 2, 4, 6, 5, 3, 4, 2, 4, 6, 1, 
                   6}], "NumericalThresholds" -> CompressedData["
1:eJxVUT1LA0EQHQWxs7AUi/MH2NjLrZ2deJ2NLIKGqMRKGxH3B6S1lVXBzkrs
hByagMZ8oGCQHMiGMzaiiQYlaqGZjwPd5vFm3rz52LGFtWCxDwCmgZ6rjZb8
HtqluQjRDWRiRK+808r10FRbFUT7MXPnE+98ItfPhXPmJ13SfXPeFW9TiHAl
9V2Oh+omRh5m+9vI1dF87p//yFANEV4zDczr4Z8mzXXBebcdFEj/xX72ceIF
uZpkXyP9YGu3Tvokv8J7eVNBRP03sh1E75L1Kr/ZIHxgvSmKj8++Sb3JH7/T
nDHrwmWOh+JjBbXModa5jxO9EW4OD8rk3+S43eM7qFW5f0r6DfI/aJO+Jh+p
1/usB+nvJfvJ/OHp7L3/Zz8oMbqI/1m/8X2tzKnlfjCePiOd3B/qom8zV3IX
XdVPxNH/FzU32fo=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 59}, {3, 24}, {4, 16}, {5, 
                   6}, {-1, -2}, {7, 9}, {-3, 8}, {-4, -5}, {-6, 10}, {11, 
                   14}, {-7, 12}, {-8, 13}, {-9, -10}, {-11, 
                   15}, {-12, -13}, {17, 19}, {18, -16}, {-14, -15}, {-17, 
                   20}, {21, -22}, {22, -21}, {23, -20}, {-18, -19}, {25, 
                   31}, {26, 30}, {27, -27}, {28, 
                   29}, {-23, -24}, {-25, -26}, {-28, -29}, {-30, 32}, {33, 
                   48}, {34, 40}, {35, 39}, {36, 38}, {
                   37, -33}, {-31, -32}, {-34, -35}, {-36, -37}, {41, 
                   43}, {-38, 42}, {-39, -40}, {44, 45}, {-41, -42}, {
                   46, -46}, {-43, 47}, {-44, -45}, {49, 53}, {50, -51}, {
                   51, -50}, {-47, 52}, {-48, -49}, {54, 58}, {55, 57}, {
                   56, -54}, {-52, -53}, {-55, -56}, {-57, -58}, {60, 65}, {
                   61, -64}, {62, 63}, {-59, -60}, {64, -63}, {-61, -62}, {66,
                    72}, {-65, 67}, {68, 71}, {-66, 69}, {-67, 
                   70}, {-68, -69}, {-70, -71}, {-72, -73}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,
                    1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 
                   1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2,
                    1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 
                   1, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 5, 2, 6, 6, 1, 2, 1, 2, 1, 5, 3, 5, 
                   5, 5, 1, 1, 6, 5, 3, 4, 2, 2, 2, 6, 1, 1, 3, 2, 6, 3, 2, 3,
                    4, 2, 5, 1, 1, 1, 1, 5, 3, 1, 4, 3, 5, 2, 4, 1, 6, 6, 2, 
                   5, 5, 6, 5, 4, 3, 2, 3, 4, 5, 2, 3, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJw1UTEsQ1EUvSYmkVhJvhmLdKWvk10YLPJDRCXyDcL8R4PEwmLxWM107I9Y
yq+kLQsir35ZJEq6SIjou+f0LSfnnfvuOfe+seXNudU+ESmIHnc/kua7GJaW
yuUuJm9THx7jm8O2R0mBwV/67dFk0N3C/q9HW2nfqv5wqn2CQj1TvrH4qH1n
wE0emBAl91NTvjX4rP0q8LEGul3De7e91/E8pK+0mI884TtXLDVUr+++K6e/
cB7TmyfCfVBFbkcfswMfU8O9PcI+Ajt/rnOsDN+p3+jQleovs5rfnqAuLNKv
c6D+MftJL8cF616Zh7o7Pmsq9keZr7MDwJi5xeKdmeYer/kf3Kv7ipq6p8n1
S+VP+E+ZAE8+oQfce9iiPk7d838q0MIr
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 54}, {3, 33}, {4, 6}, {
                   5, -3}, {-1, -2}, {7, 9}, {8, -6}, {-4, -5}, {10, -31}, {
                   11, 32}, {-7, 12}, {13, 25}, {14, 23}, {15, 21}, {
                   16, -14}, {17, 19}, {18, -10}, {-8, -9}, {-11, 
                   20}, {-12, -13}, {-15, 22}, {-16, -17}, {-18, 
                   24}, {-19, -20}, {26, 31}, {27, -26}, {-21, 28}, {29, 
                   30}, {-22, -23}, {-24, -25}, {-27, -28}, {-29, -30}, {34, 
                   40}, {-32, 35}, {-33, 36}, {37, -38}, {38, -37}, {-34, 
                   39}, {-35, -36}, {41, 51}, {42, 48}, {-39, 43}, {-40, 
                   44}, {-41, 45}, {46, 47}, {-42, -43}, {-44, -45}, {49, 
                   50}, {-46, -47}, {-48, -49}, {52, -53}, {-50, 
                   53}, {-51, -52}, {55, 65}, {56, 63}, {57, -61}, {58, 
                   62}, {-54, 59}, {-55, 60}, {
                   61, -58}, {-56, -57}, {-59, -60}, {
                   64, -64}, {-62, -63}, {-65, -66}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
                    1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
                   1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1,
                    1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 5, 1, 4, 4, 6, 2, 6, 2, 4, 4, 6, 4, 
                   4, 5, 4, 5, 4, 3, 4, 6, 2, 4, 2, 3, 4, 3, 5, 3, 1, 5, 3, 2,
                    4, 6, 1, 5, 1, 3, 4, 2, 3, 5, 4, 6, 5, 5, 1, 6, 1, 5, 5, 
                   1, 5, 5, 3, 3, 1, 2, 2, 4, 6, 2, 4, 5, 3, 6, 1, 2, 6, 1, 
                   1}], "NumericalThresholds" -> CompressedData["
1:eJxNUD0sg1EUfRZhI9YOz2wzWbRvIxaJzSIvEqGR1kSMX2KQiJEQ05uMVonl
u7oV1UREKpYn9TUSST+toRKUvnsu8ZaTc+7POfeNLq7NLfUppaYVP/qYreV6
qCdv6nEPbfPkM6BPi49Bd4LmYj8NurrPXHF/BdyW0+uAeuQ7CXo0BDSXqOs2
5u0rkLLwMS3wKAfuhduxfClwEq7FN6rCh4axXyfIYTrI70Snd3B7uhDzXGH+
gfv2zthHG/jpFej2abzJfH33Lf7nZ7Y2G4ySj3SG+yiPOSf3UoJ5swydZL/5
3Sf/YOTuSFAdTrS4v4y6n2lXuE/mvaCduq0FdMKVzPtV+Oku7qXSyxf3S56/
XBvIYfuLdb63IXXJZw7kn2SfGkQf7Rw/s6/8jx2A7o7O7zhHd7sT/wACX9f1

                  "], "Children" -> 
                 RawArray["Integer16",{{2, 28}, {3, 22}, {-1, 4}, {5, 7}, {-2,
                    6}, {-3, -4}, {8, 12}, {-5, 9}, {10, -9}, {
                   11, -8}, {-6, -7}, {13, 17}, {14, -14}, {-10, 15}, {
                   16, -13}, {-11, -12}, {18, 19}, {-15, -16}, {-17, 
                   20}, {-18, 21}, {-19, -20}, {23, 24}, {-21, -22}, {
                   25, -27}, {-23, 26}, {-24, 27}, {-25, -26}, {29, 57}, {
                   30, -56}, {31, 39}, {32, 34}, {-28, 33}, {-29, -30}, {
                   35, -36}, {36, -35}, {37, -34}, {-31, 38}, {-32, -33}, {40,
                    46}, {41, -43}, {42, 44}, {-37, 43}, {-38, -39}, {-40, 
                   45}, {-41, -42}, {47, 55}, {48, -52}, {49, -51}, {50, 
                   54}, {51, -48}, {52, 
                   53}, {-44, -45}, {-46, -47}, {-49, -50}, {-53, 
                   56}, {-54, -55}, {-57, 58}, {-58, 59}, {60, 65}, {
                   61, -64}, {62, 63}, {-59, -60}, {64, -63}, {-61, -62}, {
                   66, -73}, {67, 69}, {68, -67}, {-65, -66}, {-68, 70}, {71, 
                   72}, {-69, -70}, {-71, -72}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1,
                    1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 
                   1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1,
                    2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 
                   2, 1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 5, 6, 2, 2, 1, 1, 1, 6, 2, 3, 4, 6, 
                   1, 3, 4, 6, 3, 1, 1, 3, 5, 1, 3, 3, 4, 5, 1, 4, 6, 1, 2, 3,
                    2, 1, 6, 5, 1, 2, 4, 6, 6, 1, 6, 4, 2, 6, 2, 6, 3, 6, 4, 
                   6, 5, 1, 2, 1, 5, 2, 5, 6, 6, 6, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYACDBRfen9sP4m6N2w+iD5ye+h5EL3hm9A5ENzyB0jrx
V8Dib/6usAepn7LrMYifAFXvAFOfEXkbLF/a8xnMPwWRT2jj/QWmcyDyD6Dy
DlD9DzIh4gu6iz+C6APmsU1g8SyoefaXwPY1LNM+DHYnVH1DOoROKIOaZwdR
d0CN4wqyeAJ73mMw//mpu2BzHkPcq5ALNR/Kb9i9eDOIr8ABUb9gJSRcHDgj
boLNfQpRlwB1/wE2qDqo+Q2Ser/A+k9Cw0Xg/1Ow+TdlzoDVQf174DaEzwDl
M+hmHgK75wyEr/Ax7yFYHzT8DkD9tUC+6QbY/pOQeEtINgOH6wEHiLzDKWh8
zoe4ewHUfQ5Q9xyA0gnXgfYDAAcZu6w=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 28}, {4, 8}, {-1, 5}, {
                   6, -5}, {-2, 7}, {-3, -4}, {9, 15}, {10, 11}, {-6, -7}, {
                   12, 13}, {-8, -9}, {14, -12}, {-10, -11}, {16, 26}, {-13, 
                   17}, {18, 19}, {-14, -15}, {20, -23}, {21, -22}, {
                   22, -21}, {23, 24}, {-16, -17}, {25, -20}, {-18, -19}, {
                   27, -26}, {-24, -25}, {29, -42}, {30, 33}, {31, 
                   32}, {-27, -28}, {-29, -30}, {34, 42}, {35, 41}, {
                   36, -37}, {37, -36}, {38, 40}, {
                   39, -33}, {-31, -32}, {-34, -35}, {-38, -39}, {-40, -41}, {
                   44, 62}, {45, 59}, {46, 56}, {47, 48}, {-43, -44}, {49, 
                   50}, {-45, -46}, {-47, 51}, {52, 53}, {-48, -49}, {54, 
                   55}, {-50, -51}, {-52, -53}, {57, -57}, {-54, 
                   58}, {-55, -56}, {60, -61}, {61, -60}, {-58, -59}, {63, 
                   64}, {-62, -63}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
                    1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 
                   2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
                    2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 4, 1, 5, 4, 3, 2, 6, 2, 1, 3, 2, 1, 
                   1, 1, 2, 3, 3, 6, 4, 3, 5, 2, 2, 4, 6, 4, 5, 5, 6, 2, 3, 2,
                    1, 5, 1, 1, 5, 4, 1, 5, 2, 2, 2, 2, 5, 1, 5, 1, 5, 1, 6, 
                   3, 6, 1, 5, 4, 6, 3, 5, 2, 3, 2, 5, 3, 4, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJw1UL8vREEY3GskGjlqiXdqUSh03Io/gOg08kLEIY6GehOtVv80CokolbcR
iTiXixxCIthznu7unVxCiPixM997zbyZ79uZ3cnNr88sZpRSkwqfSYr1vP/Z
3OmUPL+czljPx2oNz3WqF2bv/Z6NR1qeh+XdBPNXcr09cOrnZo17RnSbnah5
dIXjK5y7fgdGL+Kzwn29SozO6RtIbrAk+rjcR/Kt+Idb3HNdxQZyhdvDuRL0
fWLULXPJteJrxE8P9z1h/4D7Yfv5De92g3WczzNfddiXO2v/oDe5l4n7K/B7
JAa3RPVAtHLeNlvoKfVzGzdN5EvfwXdPFVx6UEPLJ9CFhwujX9C15GZ/Y/hX
OHc57qd9mYsEftHH1B16LpOHe3yn+qRue+njjv71P5ifyMw=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 39}, {3, 37}, {-1, 4}, {5, 25}, {6,
                    20}, {7, 9}, {8, -4}, {-2, -3}, {10, 14}, {11, -9}, {
                   12, -8}, {13, -7}, {-5, -6}, {15, 19}, {16, -14}, {-10, 
                   17}, {-11, 18}, {-12, -13}, {-15, -16}, {21, 24}, {-17, 
                   22}, {23, -20}, {-18, -19}, {-21, -22}, {26, 30}, {-23, 
                   27}, {28, -27}, {-24, 29}, {-25, -26}, {31, -35}, {32, 
                   35}, {-28, 33}, {-29, 34}, {-30, -31}, {-32, 
                   36}, {-33, -34}, {-36, 38}, {-37, -38}, {40, 54}, {41, 
                   52}, {42, 49}, {43, -46}, {44, 48}, {-39, 45}, {
                   46, -43}, {-40, 47}, {-41, -42}, {-44, -45}, {-47, 50}, {
                   51, -50}, {-48, -49}, {53, -53}, {-51, -52}, {55, 
                   63}, {-54, 56}, {57, 59}, {-55, 58}, {-56, -57}, {-58, 
                   60}, {61, -62}, {-59, 62}, {-60, -61}, {64, -68}, {
                   65, -67}, {-63, 66}, {67, -66}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
                    1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 
                   2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2,
                    1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 1, 5, 2, 5, 5, 2, 4, 3, 4, 4, 2, 6, 
                   1, 4, 4, 2, 3, 5, 4, 6, 3, 1, 5, 1, 6, 5, 5, 6, 4, 3, 1, 6,
                    2, 2, 1, 5, 3, 1, 1, 4, 2, 1, 3, 5, 4, 3, 3, 4, 1, 2, 6, 
                   2, 2, 1, 2, 3, 1, 5, 4, 1, 5, 2, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYICA7/437IHUAkXvu/tBwvaXHoPoA49kzoDFbSH8BjsI
/eAJRNzhQ95DEP1AK/MQWP1HCH/BJwid8ACi7sDJqe9B8gqnXj8G8RWE/j8F
0zB116DqlCDmOMDsg6mD6j+QE3kbrE47jfEAyB6oew4U890Dqz8NUQd3vwOE
XgDV/6C05zOYnwkxxyFkxWUQP+EUVP6x0TuwOVD6wKcXl5H97ZAL1Vdf8Axs
TuCrELD/SyDmNjyD6FMIOnEYzM+GqF+wLW4/2J4yiDqFLIh4ApSGuUuhVucO
WN8TqP3seeDwcoDyHzyF0AvsTp8F0QxQPgPUXQz/2r+D3bkVYt8CQUj4OVwq
3ww2HxquCqfenwPrA4UXAC6Lvlc=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 20}, {3, 5}, {-1, 4}, {-2, -3}, {6,
                    17}, {7, 16}, {8, -13}, {9, 10}, {-4, -5}, {-6, 11}, {12, 
                   15}, {13, 
                   14}, {-7, -8}, {-9, -10}, {-11, -12}, {-14, -15}, {-16, 
                   18}, {-17, 19}, {-18, -19}, {21, 62}, {22, 41}, {23, 
                   36}, {-20, 24}, {25, 34}, {26, 30}, {27, 
                   28}, {-21, -22}, {-23, 29}, {-24, -25}, {-26, 31}, {32, 
                   33}, {-27, -28}, {-29, -30}, {-31, 35}, {-32, -33}, {37, 
                   40}, {38, 39}, {-34, -35}, {-36, -37}, {-38, -39}, {42, 
                   60}, {43, 44}, {-40, -41}, {45, 53}, {-42, 46}, {47, 
                   49}, {-43, 48}, {-44, -45}, {50, 51}, {-46, -47}, {
                   52, -50}, {-48, -49}, {54, 57}, {-51, 55}, {
                   56, -54}, {-52, -53}, {58, 59}, {-55, -56}, {-57, -58}, {
                   61, -61}, {-59, -60}, {63, -65}, {-62, 64}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
                    1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 
                   1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1,
                    1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 4, 1, 3, 6, 4, 5, 3, 5, 4, 6, 2, 4, 
                   1, 5, 1, 2, 2, 2, 4, 4, 6, 2, 6, 5, 1, 5, 3, 1, 2, 2, 2, 5,
                    1, 2, 2, 5, 6, 2, 1, 2, 5, 2, 6, 5, 5, 2, 3, 3, 2, 2, 1, 
                   6, 5, 3, 1, 6, 5, 6, 6, 6, 1, 6, 6, 5, 1, 2, 4, 2, 2, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZwCDhO1x+/cD6QWlPZ9BdIJMPbMDkG7IiLxtD6QPnJz6
HixeBpV3uPQYRDvkQuQVHCH8A1B5hTMQ9QeeGL0Dq4OKOzTLHwGbZwvVf6T6
IVg9VF3DYwj94KrMGZC6BQL/n4LNh9IOp6HmPoOaC7XngR3UvCm7HiO7bwHU
/QnTmL+C9Z15fw4sfxJCH4DSC6D6E74fOwwWvw6x/8BTCM0AMx9qP8MdqPzb
d2D/JDyE8mHhApV3OAVRrwAVh7kz4RFUvULmIbB96hCaAep/hqdQWmPXFbA8
W95jkPoHsyHx5JAD8ZdDqDPYvQww+YXQeOSE8Bug9AIOKK098yrYfiifASY+
B6KPYa/+a7A7oeGk8CnvIdic89BwugSlJV/9swcA5EbQaQ==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 50}, {3, 19}, {4, -17}, {5, 
                   7}, {-1, 6}, {-2, -3}, {8, 10}, {9, -6}, {-4, -5}, {-7, 
                   11}, {-8, 12}, {13, 16}, {14, -12}, {
                   15, -11}, {-9, -10}, {-13, 17}, {-14, 18}, {-15, -16}, {20,
                    35}, {21, 31}, {22, 30}, {23, 27}, {-18, 24}, {-19, 25}, {
                   26, -22}, {-20, -21}, {28, 
                   29}, {-23, -24}, {-25, -26}, {-27, -28}, {32, -33}, {
                   33, -32}, {-29, 34}, {-30, -31}, {-34, 36}, {37, -49}, {38,
                    48}, {39, 43}, {40, 41}, {-35, -36}, {-37, 
                   42}, {-38, -39}, {44, 45}, {-40, -41}, {-42, 46}, {
                   47, -45}, {-43, -44}, {49, -48}, {-46, -47}, {51, 66}, {52,
                    57}, {53, 56}, {-50, 54}, {
                   55, -53}, {-51, -52}, {-54, -55}, {-56, 58}, {59, 65}, {
                   60, -63}, {61, -62}, {62, -61}, {63, -60}, {
                   64, -59}, {-57, -58}, {-64, -65}, {67, 69}, {-66, 
                   68}, {-67, -68}, {70, 71}, {-69, -70}, {-71, -72}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
                    1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
                   1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2,
                    2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 
                   2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 3, 2, 5, 5, 5, 6, 2, 2, 3, 2, 3, 1, 
                   3, 6, 2, 1, 1, 2, 1, 1, 4, 2, 3, 5, 2, 4, 6, 4, 2, 3, 4, 1,
                    6, 3, 2, 3, 6, 6, 5, 1, 2, 4, 4, 5, 6, 6, 2, 3, 1, 4, 6, 
                   5, 4, 6, 5, 3, 2, 5, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYYCAk1Pf7wdSCt/9b9gDaYdnMmdAdIPDpccgcQY7CJ0A
pR+cgahPOPn+HFj+JkT9A63MQyC+w10If4E6hH+gxe4BmK8J4Suchug/8Mzo
Hdicd1xHwfQ+34dg82HiATfCwXSy2S+wvtKez2D5pxB5hszI22Bzoe46AHXP
Aai6A1B/NQj9fwpSp/AEoq8hF6IvoQyizkGy5Bmy+gNQcxOg9jyA8hmg/l4A
VZcADZ8FmeJg/Q3nIfbDzF0ApR8si9sP5nPkPQaHKyeEhpnPkAMx32FDwmGw
/YIQ9zJA1TtsgeqH+osBqp9hFVT8LyTeDjyBhLvCTIh4wi89BgcA3QWvDA==

                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 16}, {4, -14}, {-1, 5}, {
                   6, 15}, {7, -11}, {-2, 8}, {-3, 9}, {10, 11}, {-4, -5}, {
                   12, 13}, {-6, -7}, {-8, 14}, {-9, -10}, {-12, -13}, {17, 
                   21}, {18, 20}, {-15, 19}, {-16, -17}, {-18, -19}, {22, 
                   24}, {23, -22}, {-20, -21}, {25, 30}, {26, -28}, {27, 
                   29}, {28, -25}, {-23, -24}, {-26, -27}, {31, 41}, {
                   32, -39}, {-29, 33}, {-30, 34}, {35, 39}, {-31, 36}, {37, 
                   38}, {-32, -33}, {-34, -35}, {
                   40, -38}, {-36, -37}, {-40, -41}, {43, 57}, {44, 47}, {45, 
                   46}, {-42, -43}, {-44, -45}, {48, -56}, {49, 51}, {
                   50, -48}, {-46, -47}, {52, -55}, {53, 55}, {-49, 
                   54}, {-50, -51}, {56, -54}, {-52, -53}, {58, -61}, {
                   59, -60}, {60, -59}, {-57, -58}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1,
                    2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 
                   1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2,
                    1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 1, 3, 6, 3, 1, 5, 2, 5, 6, 2, 1, 2, 
                   2, 6, 4, 2, 1, 3, 3, 6, 3, 2, 3, 1, 6, 1, 2, 1, 1, 2, 3, 1,
                    6, 4, 1, 4, 6, 4, 3, 1, 4, 3, 2, 4, 2, 4, 3, 6, 4, 2, 2, 
                   6, 5, 1, 1, 2, 1, 2, 2, 4, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYwADhZNT3+8H0gnv1v0B0Qt++d+wB9IOp6Di3yB8huv2
50B0gsOlxyDxB/dlzoD4CvYQvsIZiPqGe1Bxns+fweofQvgHnhm9A5sPNbeh
rOcz2ByoOEPtvFtgOjPyNlj9D4i9Cach6h1yIOINT6HqoXyHI9UPweZAzT0g
YHYFbP4TiDoHyZJnYPe5zn0Ntv/I+3NgPlS/QnTKVbB6aDg8eJ/3ECxeuOYG
mF8CcWcDZ95jsP2lUHfnQvQvsDt9FhxOUP80ZEPEGaD+egBVD3P3Aqi6A1B/
MrBDzE2AqkuAqkuAhQsHRH7Bhrj9YPFfegwOIHNbTx2FxBPEPwnhrFvB9AUo
/yyEbvgA8U/CSqB+ADndtyE=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 37}, {3, 4}, {-1, -2}, {5, 31}, {6,
                    14}, {7, 10}, {-3, 8}, {9, -6}, {-4, -5}, {-7, 11}, {12, 
                   13}, {-8, -9}, {-10, -11}, {15, 19}, {16, -16}, {-12, 
                   17}, {-13, 18}, {-14, -15}, {20, 22}, {
                   21, -19}, {-17, -18}, {23, 29}, {-20, 24}, {25, -26}, {26, 
                   27}, {-21, -22}, {-23, 28}, {-24, -25}, {
                   30, -29}, {-27, -28}, {32, 34}, {-30, 
                   33}, {-31, -32}, {-33, 35}, {-34, 36}, {-35, -36}, {38, 
                   55}, {39, 54}, {40, 50}, {41, -47}, {42, 47}, {43, 
                   44}, {-37, -38}, {-39, 45}, {-40, 46}, {-41, -42}, {-43, 
                   48}, {49, -46}, {-44, -45}, {-48, 51}, {52, 
                   53}, {-49, -50}, {-51, -52}, {-53, -54}, {56, -63}, {
                   57, -62}, {58, 61}, {59, -58}, {-55, 60}, {-56, -57}, {
                   62, -61}, {-59, -60}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1,
                    1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 
                   1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2,
                    1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 1, 5, 6, 3, 1, 1, 2, 1, 4, 4, 5, 
                   3, 4, 3, 1, 5, 4, 6, 2, 1, 2, 2, 5, 3, 2, 3, 2, 2, 1, 5, 3,
                    4, 3, 2, 4, 2, 5, 3, 6, 4, 5, 6, 4, 5, 4, 3, 5, 2, 6, 4, 
                   2, 2, 1, 3, 5, 1, 3, 6, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZYAA20uP9wOpBU9lztiD+IIG/8F8O4h4wpmp70G0g2rm
IRDNcPvQJRD9wEzwMFj8GkSfwv+gsyB6gcD/pyDaobTnM0hewQFqfk7kbbA8
VDwByk9oyLyIbB9DGUTe4RTE3gVPjd6BxdvtDoD1PYPyoeIJMH3pEPMcoOIK
UPcqXIe4L+EOhG64xPgM7A6ovx8oQdV9ynsIVqcJ4Tecf38ORB8QhPhnAcze
zXH7wfKZUP9w5D0G0Qdg/l4IkT/ADhGHhUPCNoh4AtR/DHkQ/Q9WQs17DDUf
qq8Bpg/qH1g4JGjOuApWDwu/mVBzOa6B1Tf89L8BdhcbxByw+wCWYKn8
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 36}, {3, 35}, {4, 5}, {-1, -2}, {6,
                    9}, {-3, 7}, {-4, 8}, {-5, -6}, {10, 28}, {11, -25}, {
                   12, -24}, {13, 25}, {14, 15}, {-7, -8}, {16, 23}, {17, 
                   20}, {18, -12}, {19, -11}, {-9, -10}, {21, 
                   22}, {-13, -14}, {-15, -16}, {-17, 24}, {-18, -19}, {
                   26, -23}, {-20, 27}, {-21, -22}, {29, 32}, {-26, 30}, {
                   31, -29}, {-27, -28}, {33, -33}, {-30, 
                   34}, {-31, -32}, {-34, -35}, {37, 57}, {38, -56}, {39, 
                   40}, {-36, -37}, {41, 47}, {42, -44}, {43, -43}, {
                   44, -42}, {45, -41}, {46, -40}, {-38, -39}, {48, 52}, {
                   49, -49}, {-45, 50}, {51, -48}, {-46, -47}, {53, 56}, {54, 
                   55}, {-50, -51}, {-52, -53}, {-54, -55}, {58, -62}, {-57, 
                   59}, {-58, 60}, {-59, 61}, {-60, -61}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
                    1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
                   1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2,
                    2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 5, 2, 2, 6, 5, 6, 1, 3, 3, 6, 4, 
                   3, 2, 2, 4, 5, 2, 3, 1, 4, 4, 2, 3, 1, 5, 6, 6, 3, 4, 1, 1,
                    2, 1, 5, 6, 3, 6, 2, 1, 5, 4, 2, 3, 1, 1, 1, 3, 5, 5, 6, 
                   1, 1, 1, 3, 1, 2, 5, 6, 4, 5, 2, 4, 5, 2, 2, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYYAA20uP9wOpBrnMQyCawQ7CX/BU5ow9SPwxhH5wZup7
sLw9RD7hNITfcInxGUieQQWif4E2lD4JVf8p7yFI3kEDIq7wAGLegWdG70D8
B6U9n0G0gwPU3JPvz4H1/fO/AbF34WuwPuH/T0H8BQIQ+sE5iLoDmZG3weaH
rLgMthfq/gNQ+2F0QhZE3YIyiH0PvD6dBdt7pPoh2PynEPcwXOoA23cA6p4F
UH8qZEPtgfITYOqN92wGmwO190EJxHyY/IF0iL4H11PB9jz4yfsErM8/+gpY
HczcrXH7wfZsg9ANHHmPweGfEAnW57B+A4TeLPga2d8NJ5XB/lZ4ArGvYSVU
PydE/wFoeB2YBRFPOA0Jt4YPkHh5AFN/HiK+ACp/4N2kG/sBd07OoA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 16}, {4, 14}, {5, -11}, {
                   6, -10}, {-1, 7}, {8, 11}, {-2, 9}, {
                   10, -5}, {-3, -4}, {-6, 12}, {13, -9}, {-7, -8}, {-12, 
                   15}, {-13, -14}, {17, 19}, {-15, 18}, {-16, -17}, {
                   20, -42}, {21, 25}, {-18, 22}, {23, 
                   24}, {-19, -20}, {-21, -22}, {26, 29}, {27, -26}, {
                   28, -25}, {-23, -24}, {30, 42}, {31, 33}, {-27, 
                   32}, {-28, -29}, {34, 38}, {35, 37}, {-30, 
                   36}, {-31, -32}, {-33, -34}, {39, 40}, {-35, -36}, {
                   41, -39}, {-37, -38}, {-40, -41}, {44, 61}, {45, 50}, {-43,
                    46}, {47, 48}, {-44, -45}, {-46, 49}, {-47, -48}, {51, 
                   52}, {-49, -50}, {53, 59}, {54, 56}, {
                   55, -53}, {-51, -52}, {57, 58}, {-54, -55}, {-56, -57}, {
                   60, -60}, {-58, -59}, {62, 66}, {63, -65}, {-61, 64}, {
                   65, -64}, {-62, -63}, {-66, 67}, {-67, 68}, {-68, -69}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
                    1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 
                   1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1,
                    2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 4, 1, 1, 1, 1, 6, 3, 2, 5, 3, 2, 6, 
                   4, 3, 4, 2, 3, 3, 4, 2, 6, 5, 3, 6, 1, 3, 5, 4, 2, 3, 1, 3,
                    6, 6, 4, 4, 5, 6, 2, 1, 6, 1, 1, 3, 3, 4, 6, 1, 3, 1, 4, 
                   2, 5, 1, 6, 5, 2, 6, 3, 1, 2, 5, 5, 2, 4, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZoAA20uP9wMph9KezyD6wA6jhyCagSPuGYhuOL/1B4hO
yD4Hoc9MfQ+iF+RE3rYH6Xtm9A7Ef2AHMUcBKt7wBCKuAFX/AGp+QjpEfkEZ
hL/gKUSdQy5EPAGqf8GnvIcQ82XOgOlTUHuh7lXIgqqHih8wj20CuzsTKu4A
UZfwAWKOwnWIOQ9UMw+BzRHNegFWpwLhw/zFAKUVoO5teA/R3wD134KTUP/c
gJqn8BSsTuEsRNzB6wrEvcf5noH9oQ4x/8B3/xtg9SUQcxnY8h6D+T95n4D1
Q92tUKtzB2wP1H4FaPg6TI/bD7Z37b7PYPM5IfoVFkLEHaDhmMAOEW+AheOs
g9fA9j+Gxsc8iHqFmVB9p96fA9MC/5+C1B84A+QDAFGxwjM=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 47}, {3, 20}, {4, 11}, {5, 10}, {6,
                    8}, {7, -3}, {-1, -2}, {-4, 9}, {-5, -6}, {-7, -8}, {12, 
                   16}, {13, -13}, {-9, 14}, {-10, 15}, {-11, -12}, {-14, 
                   17}, {-15, 18}, {19, -18}, {-16, -17}, {21, 41}, {
                   22, -39}, {23, 36}, {24, 35}, {25, 34}, {26, -28}, {27, 
                   29}, {-19, 28}, {-20, -21}, {30, 31}, {-22, -23}, {32, 
                   33}, {-24, -25}, {-26, -27}, {-29, -30}, {-31, -32}, {-33, 
                   37}, {-34, 38}, {39, -38}, {-35, 40}, {-36, -37}, {-40, 
                   42}, {-41, 43}, {-42, 44}, {45, -46}, {-43, 
                   46}, {-44, -45}, {48, 64}, {49, 50}, {-47, -48}, {51, 
                   54}, {52, 53}, {-49, -50}, {-51, -52}, {55, -63}, {
                   56, -62}, {57, -61}, {58, 63}, {59, 61}, {
                   60, -55}, {-53, -54}, {62, -58}, {-56, -57}, {-59, -60}, {
                   65, -68}, {66, -67}, {-64, 67}, {-65, -66}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
                    1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 
                   2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
                    1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 5, 5, 3, 6, 5, 1, 1, 6, 2, 1, 2, 4, 
                   2, 5, 1, 3, 5, 4, 5, 2, 3, 4, 5, 6, 2, 6, 4, 2, 3, 6, 6, 1,
                    1, 2, 4, 1, 5, 6, 1, 2, 1, 6, 2, 5, 4, 4, 6, 6, 3, 1, 1, 
                   5, 1, 1, 6, 3, 4, 1, 1, 3, 1, 3, 5, 6, 1, 5, 1, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZQCDhvd5D+2BtMK2uP37gXSC3aXHIFohI/I2SPzAyanv
QXwGB6j4TNEPYDom4TdY/AxEfsEzo3dgmrV1M4h+AOU3lPZ8Bos/gfAV7CHm
LAh8FQIynyEHag/U3gSo+gNQdQ5Pofqg6hzKIPINtlD3QO1PgKpL4Mx7DFKX
AFW3ACrekA7Rz8AOkV8AVddwUvky2J71Gx6C1UHd+QDqjoaESLB4wiJI+ByA
6lfwULgCNg9q/gFFzlNg90DDq+GJzBmwvCPUnQL/n4L4D2DhfRaqDup+he/+
N8Du4j/zFuye3ozNYHXQcFlQoXMZrP+2wwewutPQcP8L0acgDDFfYWH1XbD/
CwvA9iyAmqtwxQccbws0Mg+BzZ8P8Y8CBzS8jsieA/t7MUTcweHTVrA+UDgB
ADrgwsA=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 26}, {4, 22}, {5, 7}, {-1,
                    6}, {-2, -3}, {8, 10}, {9, -6}, {-4, -5}, {11, 13}, {
                   12, -9}, {-7, -8}, {14, 18}, {-10, 15}, {16, 
                   17}, {-11, -12}, {-13, -14}, {19, -19}, {20, 
                   21}, {-15, -16}, {-17, -18}, {-20, 23}, {24, 
                   25}, {-21, -22}, {-23, -24}, {27, 32}, {28, -30}, {-25, 
                   29}, {30, -29}, {-26, 31}, {-27, -28}, {33, -42}, {34, 
                   40}, {35, 37}, {-31, 36}, {-32, -33}, {-34, 38}, {
                   39, -37}, {-35, -36}, {41, -41}, {-38, 42}, {-39, -40}, {
                   44, 61}, {45, 60}, {46, 47}, {-43, -44}, {-45, 48}, {-46, 
                   49}, {-47, 50}, {51, 57}, {-48, 52}, {-49, 53}, {
                   54, -54}, {-50, 55}, {-51, 56}, {-52, -53}, {
                   58, -58}, {-55, 59}, {-56, -57}, {-59, -60}, {62, 
                   65}, {-61, 63}, {64, -64}, {-62, -63}, {66, 69}, {-65, 
                   67}, {68, -68}, {-66, -67}, {-69, -70}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
                    1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 
                   2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 
                   2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 5, 5, 6, 4, 2, 4, 6, 2, 5, 4, 6, 5, 
                   4, 1, 3, 3, 2, 5, 1, 5, 4, 1, 1, 2, 5, 4, 2, 4, 1, 2, 3, 5,
                    1, 6, 4, 3, 6, 6, 5, 6, 6, 3, 3, 5, 2, 2, 2, 4, 3, 3, 5, 
                   1, 5, 5, 5, 1, 3, 5, 2, 3, 1, 6, 3, 6, 3, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZgCDByU9n/eDGLaXHoPoBDsofXLqexDtUAqVf2r0DkQ3
QPkJpyHyCk8g4gr2UH1lEPmGU1D9UHEGqL4FZ9x3g+gHmZG37UH6oPSBZxBz
GBwg6hdkij8D01B3NUDNZTDesxks/ubvCpC+Bqi+BWvj9oPdAVV34DFEHOb+
hpKJEHNg7oXa67AKoq+hZc4DsPmceY9B4g9g/syGqGPggIg3QOUXbILoc2CH
qmeF0Anf/G+A/QWlYe5nuClzBuzPaxCa4Q6EbviY9xCsTinzEDhcVKE0LB4K
CyDysHB0RI0nhRbOD2D//4DaC1W34OT7c2B//YaIN3ieYjgAkof6I0EeYk8D
lP/gJ0TdA4H/T+0BcNO/tQ==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 25}, {4, 20}, {5, 19}, {6,
                    14}, {7, 9}, {-1, 8}, {-2, -3}, {10, 13}, {11, -7}, {-4, 
                   12}, {-5, -6}, {-8, -9}, {15, -15}, {16, 18}, {
                   17, -12}, {-10, -11}, {-13, -14}, {-16, -17}, {21, 
                   23}, {-18, 22}, {-19, -20}, {-21, 24}, {-22, -23}, {26, 
                   28}, {27, -26}, {-24, -25}, {29, 40}, {30, -38}, {31, 
                   34}, {32, -30}, {-27, 33}, {-28, -29}, {-31, 35}, {36, 
                   39}, {37, -35}, {38, -34}, {-32, -33}, {-36, -37}, {-39, 
                   41}, {-40, -41}, {43, 62}, {44, 55}, {45, -53}, {
                   46, -52}, {47, 48}, {-42, -43}, {49, 50}, {-44, -45}, {
                   51, -51}, {52, -50}, {53, -49}, {-46, 
                   54}, {-47, -48}, {-54, 56}, {57, -61}, {-55, 58}, {-56, 
                   59}, {60, -60}, {61, -59}, {-57, -58}, {-62, 63}, {-63, 
                   64}, {65, 66}, {-64, -65}, {-66, 67}, {-67, -68}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2,
                    1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 
                   2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2,
                    1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 5, 3, 1, 5, 1, 2, 4, 2, 1, 1, 1, 
                   2, 4, 1, 4, 5, 4, 3, 6, 2, 1, 3, 6, 3, 6, 1, 4, 6, 5, 5, 2,
                    6, 3, 1, 6, 1, 4, 5, 5, 6, 1, 2, 3, 4, 3, 5, 3, 6, 6, 2, 
                   3, 2, 1, 5, 4, 4, 3, 3, 5, 2, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZ4CAk1Pf7wdSB54ZvQPRDQ6XHoNoh4zI2yAlCRzMN0H8
B3YQcYV/Z36A6ITHEPULSns+g+knEL5Ds/wRkD6H5bJXQPSDjO2XwebC1JdB
1B9YshRsXgKUzwC1lwHKf6CYeQis7zTEfQx3ZM6A3VNY8BBEN6hA5B1OQeV1
oOph/nEz3gRSpwB1nwPUHAeoPxzsofRTiLsOQPU9+OV/A+z+lSWbwO6DmV8h
/hJsv/D/p2BzoeYwLIzbD9bPmfcYJL7gf9F3sDug4bHgB8Q8mD8bsiHh+mAl
RJ8ClN8A088GoR+ceX8O7L7fEP0PoO5USNcBx0fCZoh+eHiVQOgEmHmZEHrB
XKg6qP4FJ4DmAgDemblg
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 41}, {3, 7}, {-1, 4}, {5, 
                   6}, {-2, -3}, {-4, -5}, {8, 9}, {-6, -7}, {10, 20}, {11, 
                   13}, {-8, 12}, {-9, -10}, {14, 18}, {15, -15}, {-11, 16}, {
                   17, -14}, {-12, -13}, {19, -18}, {-16, -17}, {21, 28}, {22,
                    24}, {-19, 23}, {-20, -21}, {25, -26}, {26, 
                   27}, {-22, -23}, {-24, -25}, {29, 38}, {30, 34}, {31, 
                   33}, {32, -29}, {-27, -28}, {-30, -31}, {35, -36}, {
                   36, -35}, {-32, 37}, {-33, -34}, {-37, 39}, {
                   40, -40}, {-38, -39}, {42, 58}, {43, -57}, {44, 46}, {-41, 
                   45}, {-42, -43}, {47, 49}, {-44, 48}, {-45, -46}, {50, 
                   55}, {51, -52}, {52, 54}, {
                   53, -49}, {-47, -48}, {-50, -51}, {56, 
                   57}, {-53, -54}, {-55, -56}, {59, 63}, {60, 62}, {
                   61, -60}, {-58, -59}, {-61, -62}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2,
                    2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 1, 4, 6, 1, 4, 1, 4, 2, 1, 6, 3, 1, 
                   2, 5, 2, 4, 2, 1, 6, 2, 5, 6, 6, 4, 6, 6, 1, 6, 4, 2, 3, 1,
                    5, 5, 1, 1, 4, 4, 5, 1, 6, 6, 4, 1, 6, 3, 1, 6, 2, 3, 4, 
                   6, 6, 6, 4, 5, 5, 4, 3, 3, 2, 3, 4, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZACDBWmRt+2BdMLc5ef2g2jh/09BfIWTU9+D+A8Unn4G
0Q0CEPEHD9Veg/kf8h6C1T2VOQOmg+dDxKH6GuQyD4FohgnxYHUHbkHULbC7
9BgkfuARlA81Z8EdKP//559g9acg5hy4DxF/ANXHcBYiDnffR6g7OPIeg+gG
KP2g9dRRZH84lPaA/fHgmdE7MJ0J8bdDyIrL+5HcxeAAoRds2wa2tyF37WYw
XQbRrwClYeoXcCWB/e1wGmrPGQjNALXvgMDcZ+BwhcrD7FWIUrwJVscGdfdT
iLsU0iHyDVD9DOxQ/0DVLYDyHWDuWBi3H2zuMgjNABV3yIKakw2NX6i/E2D+
hprvAAovAKdWu0U=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 29}, {3, 11}, {4, -9}, {5, 8}, {-1,
                    6}, {7, -4}, {-2, -3}, {9, -8}, {10, -7}, {-5, -6}, {12, 
                   24}, {13, 23}, {14, 16}, {-10, 15}, {-11, -12}, {17, 22}, {
                   18, 19}, {-13, -14}, {20, -18}, {
                   21, -17}, {-15, -16}, {-19, -20}, {-21, -22}, {25, 
                   26}, {-23, -24}, {-25, 27}, {-26, 28}, {-27, -28}, {30, 
                   49}, {31, 44}, {-29, 32}, {33, 36}, {34, -33}, {
                   35, -32}, {-30, -31}, {37, -42}, {38, -41}, {-34, 39}, {40,
                    42}, {-35, 41}, {-36, -37}, {43, -40}, {-38, -39}, {
                   45, -48}, {-43, 46}, {47, -47}, {-44, 48}, {-45, -46}, {50,
                    51}, {-49, -50}, {-51, 52}, {53, 62}, {54, 
                   55}, {-52, -53}, {56, 57}, {-54, -55}, {58, -61}, {
                   59, -60}, {60, -59}, {-56, 61}, {-57, -58}, {63, 
                   64}, {-62, -63}, {65, -66}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
                    1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 
                   1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2,
                    1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 1, 3, 2, 1, 5, 2, 1, 1, 1, 4, 1, 6, 
                   5, 3, 4, 2, 1, 2, 2, 5, 1, 3, 1, 3, 5, 6, 4, 1, 1, 1, 2, 3,
                    5, 6, 4, 1, 5, 1, 1, 2, 2, 1, 4, 1, 2, 1, 3, 4, 2, 5, 3, 
                   6, 3, 3, 3, 6, 1, 3, 1, 4, 3, 3, 5, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZAADhZNT3+8H0gnTmL+C6Ia0yNv2QPrBE6N3YPGIg39B
9AK7S4/B9FOZMyD5Bd3FH0E0w3X7cyD6wHqnIyC6QeD/U7B+r09nQeoVzkDM
Z7CH6HfIhJjvUNrzGWwe1J4DO4wegu17DOE7QMVh+hZM3n8RzFfJPAQ29w7r
JrB9UPMSHCDqYPYtgJp/IPHkVpC8wq1FYHcnTNc9C+bfgfjjgDrUPKh+B6h+
hw95D8HqEj9/BttjC3XHDuffYPHjK3+Aaah7FZ5B6eoVV8D+gNqv4KFwBWzv
U2h4LgoG+1MhC+LuBWVQd8L8vSVuP1gdVP4BW95jcDjD+ND4SciB0uwQ+Qcz
TzEcAJknB/FPwi89BgeQedD4cPjlfwPs378QOmEhxJ4H64E0AEW0tlI=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 41}, {3, 7}, {-1, 4}, {5, -5}, {
                   6, -4}, {-2, -3}, {8, -40}, {9, 36}, {10, 32}, {11, 30}, {
                   12, -25}, {13, 24}, {14, 16}, {-6, 15}, {-7, -8}, {17, 
                   22}, {18, 19}, {-9, -10}, {20, -14}, {
                   21, -13}, {-11, -12}, {23, -17}, {-15, -16}, {25, 
                   29}, {-18, 26}, {-19, 27}, {
                   28, -22}, {-20, -21}, {-23, -24}, {-26, 
                   31}, {-27, -28}, {-29, 33}, {34, 
                   35}, {-30, -31}, {-32, -33}, {37, 39}, {-34, 
                   38}, {-35, -36}, {40, -39}, {-37, -38}, {42, 58}, {43, 
                   45}, {44, -43}, {-41, -42}, {46, -57}, {47, 49}, {
                   48, -46}, {-44, -45}, {50, 51}, {-47, -48}, {-49, 52}, {53,
                    56}, {-50, 54}, {55, -53}, {-51, -52}, {-54, 
                   57}, {-55, -56}, {-58, 59}, {60, 61}, {-59, -60}, {62, 
                   63}, {-61, -62}, {64, -66}, {65, -65}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 
                   1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
                    1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>]}, "Processor" -> 
             MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                  "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], 
             "OOBConfusionMatrix" -> {{0.7918367316325505, 
              0.20816326836744944`}, {0.20816326836744944`, 
              0.7918367316325505}}, "Calibrator" -> 
             MachineLearning`CalibratorFunction[
              "TemperatureScaling", <|"Theta" -> 1.3212087870574467`|>], 
             "Method" -> "RandomForest", "PostProcessor" -> 
             MachineLearning`MLProcessor["Identity"], 
             "Options" -> <|
              "FeatureFraction" -> <|
                "Value" -> 6^Rational[-1, 2], "Options" -> <||>|>, 
               "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
               "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
               "DistributionSmoothing" -> <|
                "Value" -> 0.5, "Options" -> <||>|>, 
               "Implementation" -> <|
                "Value" -> "DAAL", "Options" -> <||>|>|>|>, 
           "TrainingInformation" -> <|
            "Configurations" -> 
             Dataset[<|<|
                 "Value" -> "RandomForest", 
                  "Options" -> <|
                   "FeatureFraction" -> <|"Value" -> Automatic|>, 
                    "LeafSize" -> <|"Value" -> Automatic|>, 
                    "TreeNumber" -> <|"Value" -> Automatic|>, 
                    "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                    "Implementation" -> <|"Value" -> Automatic|>|>, 
                  "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
                  "EMIterations" -> 
                  Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
               TypeSystem`Assoc[
                
                TypeSystem`Struct[{
                 "Value", "Options", "NaiveImputer", "EMIterations"}, {
                  TypeSystem`Atom[String], 
                  TypeSystem`Assoc[
                   TypeSystem`Atom[String], 
                   TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
                  TypeSystem`UnknownType, TypeSystem`UnknownType}], 
                TypeSystem`Assoc[
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
             Dataset[<|
               "Configuration" -> {
                 "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
                  Automatic, "TreeNumber" -> Automatic, 
                  "DistributionSmoothing" -> 0.5, "Implementation" -> 
                  Automatic}, "ModelUtility" -> Missing[]|>, 
               TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                 TypeSystem`Tuple[{
                   TypeSystem`Atom[String], TypeSystem`AnyType, 
                   TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType,
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
             "InputDimension" -> 6, "OutputDimension" -> 1|>, 
           "AnomalyDetector" -> None, 
           "Log" -> <|
            "Example" -> 
             MachineLearning`MLDataset[<|
               "f1" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                  "ID" -> 7168142382301173801|>, 
                "f2" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                  "ID" -> 1978735388468315165|>, 
                "f3" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, 
                  "ID" -> 9071588231046195481|>|>, <|
               "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                "LogDensityRatios" -> 0, "RawExample" -> False|>], 
             "TrainingTime" -> 0.8854806, "MaxTrainingMemory" -> 2183400, 
             "DataMemory" -> 227152, "FunctionMemory" -> 285440, 
             "LanguageVersion" -> {14.1, 0}, "Date" -> 
             DateObject[{2024, 10, 11, 15, 6, 19.863676`9.050634560085587}, 
               "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
             "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
             "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
        "TestSet" -> <|
         "Input" -> {{"1st", 29., "female"}, {"1st", 0.9167, "male"}, {
            "1st", 2., "female"}, {"1st", 30., "male"}, {
            "1st", 48., "male"}, {"1st", 63., "female"}, {
            "1st", 71., "male"}, {"1st", 47., "male"}, {
            "1st", 18., "female"}, {"1st", 24., "female"}, {
            "1st", 26., "female"}, {"1st", 80., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 50., "female"}, {
            "1st", 32., "female"}, {"1st", 36., "male"}, {
            "1st", 47., "female"}, {"1st", 26., "male"}, {
            "1st", 42., "female"}, {"1st", 25., "male"}, {
            "1st", 35., "female"}, {"1st", 45., "male"}, {
            "1st", 40., "male"}, {"1st", 30., "female"}, {
            "1st", 22., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 41., "male"}, {"1st", 48., "male"}, {
            "1st", 
             Missing[], "male"}, {"1st", 44., "female"}, {
            "1st", 59., "female"}, {"1st", 45., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 42., "male"}, {
            "1st", 53., "female"}, {"1st", 36., "male"}, {
            "1st", 58., "female"}, {"1st", 28., "male"}, {
            "1st", 17., "male"}, {"1st", 14., "female"}, {
            "1st", 36., "female"}, {"1st", 49., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 36., "male"}, {
            "1st", 46., "male"}, {"1st", 33., "female"}, {
            "1st", 36., "female"}, {"1st", 30., "female"}, {
            "1st", 45., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 
             Missing[], "male"}, {"1st", 27., "male"}, {
            "1st", 26., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 47., "male"}, {"1st", 37., "male"}, {
            "1st", 39., "male"}, {"1st", 38., "female"}, {
            "1st", 51., "male"}, {"1st", 27., "male"}, {"1st", 31., "male"}, {
            "1st", 31., "male"}, {"1st", 17., "female"}, {
            "1st", 4., "male"}, {"1st", 54., "female"}, {
            "1st", 50., "male"}, {"1st", 48., "female"}, {
            "1st", 48., "female"}, {"1st", 49., "male"}, {
            "1st", 39., "male"}, {"1st", 54., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "female"}, {"1st", 36., "male"}, {
            "1st", 28., "female"}, {"1st", 23., "female"}, {
            "1st", 19., "male"}, {"1st", 64., "male"}, {"1st", 50., "male"}, {
            "1st", 43., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 22., "female"}, {
            "1st", 60., "male"}, {"1st", 48., "female"}, {
            "1st", 37., "male"}, {"1st", 35., "female"}, {
            "1st", 35., "female"}, {"1st", 22., "female"}, {
            "1st", 45., "female"}, {"1st", 24., "male"}, {
            "1st", 49., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 71., "male"}, {
            "1st", 19., "female"}, {"1st", 38., "male"}, {
            "1st", 58., "female"}, {"1st", 46., "male"}, {
            "1st", 25., "male"}, {"1st", 25., "female"}, {
            "1st", 48., "male"}, {"1st", 49., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 45., "male"}, {
            "1st", 35., "female"}, {"1st", 40., "male"}, {
            "1st", 27., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 24., "female"}, {
            "1st", 55., "male"}, {"1st", 52., "female"}, {
            "1st", 42., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 55., "male"}, {
            "1st", 16., "female"}, {"1st", 44., "female"}, {
            "1st", 51., "female"}, {"1st", 42., "male"}, {
            "1st", 35., "female"}, {"1st", 35., "male"}, {
            "1st", 38., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 38., "female"}, {
            "1st", 32.5, "male"}, {"1st", 58., "male"}, {
            "1st", 41., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 42., "male"}, {
            "1st", 45., "female"}, {"1st", 39., "female"}, {
            "1st", 49., "female"}, {"1st", 30., "female"}, {
            "1st", 35., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 42., "male"}, {
            "1st", 55., "female"}, {"1st", 16., "female"}, {
            "1st", 21., "female"}, {"1st", 30., "male"}, {
            "1st", 58., "female"}, {"1st", 30., "male"}, {
            "1st", 18., "female"}, {"1st", 24., "female"}, {
            "1st", 46., "male"}, {"1st", 54., "male"}, {"1st", 36., "male"}, {
            "1st", 
             Missing[], "female"}, {"1st", 30., "male"}, {
            "1st", 55., "male"}, {"1st", 47., "male"}, {"1st", 37., "male"}, {
            "1st", 31., "female"}, {"1st", 23., "female"}, {
            "1st", 58., "male"}, {"1st", 19., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 65., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 45.5, "male"}, {
            "1st", 23., "male"}, {"1st", 29., "male"}, {"1st", 18., "male"}, {
            "1st", 17., "female"}, {"1st", 30., "female"}, {
            "1st", 47., "male"}, {"1st", 56., "female"}, {
            "1st", 38., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "male"}, {"1st", 31., "male"}, {"1st", 45., "male"}, {
            "1st", 
             Missing[], "male"}, {"1st", 36., "male"}, {
            "1st", 33., "female"}, {"1st", 55., "male"}, {
            "1st", 54., "female"}, {"1st", 33., "male"}, {
            "1st", 13., "male"}, {"1st", 18., "female"}, {
            "1st", 21., "female"}, {"1st", 48., "female"}, {
            "1st", 24., "female"}, {"1st", 35., "female"}, {
            "1st", 40., "female"}, {"1st", 50., "male"}, {
            "1st", 39., "female"}, {"1st", 56., "male"}, {
            "1st", 28., "male"}, {"1st", 24., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 18., "female"}, {
            "1st", 24., "male"}, {"1st", 23., "female"}, {
            "1st", 6., "male"}, {"1st", 45., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 32., "male"}, {
            "1st", 62., "male"}, {"1st", 43., "female"}, {
            "1st", 62., "female"}, {"1st", 67., "male"}, {
            "1st", 63., "female"}, {"1st", 48., "female"}, {
            "1st", 18., "female"}, {"1st", 52., "male"}, {
            "1st", 39., "female"}, {"1st", 49., "male"}, {
            "1st", 17., "male"}, {"1st", 39., "female"}, {"1st", 
             Missing[], "female"}, {"1st", 31., "male"}, {
            "1st", 40., "male"}, {"1st", 61., "male"}, {
            "1st", 35., "female"}, {"1st", 64., "male"}, {
            "1st", 60., "female"}, {"1st", 55., "female"}, {
            "1st", 31., "female"}, {"1st", 57., "male"}, {
            "1st", 50., "male"}, {"1st", 27., "male"}, {
            "1st", 21., "female"}, {"1st", 51., "male"}, {
            "1st", 31., "female"}, {"1st", 36., "female"}, {
            "2nd", 30., "male"}, {"2nd", 28., "female"}, {
            "2nd", 25., "male"}, {"2nd", 36., "female"}, {
            "2nd", 57., "male"}, {"2nd", 18., "male"}, {"2nd", 23., "male"}, {
            "2nd", 36., "female"}, {"2nd", 51., "male"}, {
            "2nd", 32., "male"}, {"2nd", 19., "female"}, {
            "2nd", 28., "male"}, {"2nd", 1., "male"}, {
            "2nd", 12., "female"}, {"2nd", 36., "female"}, {
            "2nd", 19., "female"}, {"2nd", 26., "male"}, {
            "2nd", 42., "male"}, {"2nd", 27., "male"}, {
            "2nd", 24., "female"}, {"2nd", 15., "female"}, {
            "2nd", 60., "male"}, {"2nd", 20., "female"}, {
            "2nd", 25., "male"}, {"2nd", 36., "female"}, {
            "2nd", 25., "male"}, {"2nd", 42., "female"}, {
            "2nd", 0.8333, "male"}, {"2nd", 26., "male"}, {
            "2nd", 35., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 44., "female"}, {
            "2nd", 52., "male"}, {"2nd", 29., "female"}, {
            "2nd", 25., "female"}, {"2nd", 45., "female"}, {
            "2nd", 29., "male"}, {"2nd", 28., "female"}, {
            "2nd", 29., "male"}, {"2nd", 28., "male"}, {
            "2nd", 8., "female"}, {"2nd", 31., "female"}, {
            "2nd", 30., "female"}, {"2nd", 
             Missing[], "female"}, {"2nd", 21., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 8., "male"}, {"2nd", 18., "male"}, {
            "2nd", 28., "female"}, {"2nd", 29., "male"}, {
            "2nd", 24., "female"}, {"2nd", 18., "female"}, {
            "2nd", 8., "male"}, {"2nd", 42., "male"}, {
            "2nd", 34., "female"}, {"2nd", 27., "female"}, {
            "2nd", 23., "male"}, {"2nd", 21., "male"}, {"2nd", 18., "male"}, {
            "2nd", 29., "female"}, {"2nd", 18., "male"}, {
            "2nd", 36., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 38., "female"}, {
            "2nd", 38., "male"}, {"2nd", 34., "male"}, {
            "2nd", 34., "female"}, {"2nd", 16., "male"}, {
            "2nd", 26., "male"}, {"2nd", 21., "male"}, {"2nd", 21., "male"}, {
            "2nd", 24., "male"}, {"2nd", 24., "male"}, {"2nd", 34., "male"}, {
            "2nd", 30., "male"}, {"2nd", 52., "male"}, {"2nd", 30., "male"}, {
            "2nd", 6., "female"}, {"2nd", 28., "male"}, {
            "2nd", 30., "male"}, {"2nd", 7., "female"}, {
            "2nd", 45., "female"}, {"2nd", 24., "female"}, {
            "2nd", 24., "female"}, {"2nd", 49., "male"}, {
            "2nd", 55., "female"}, {"2nd", 24., "male"}, {
            "2nd", 32., "male"}, {"2nd", 21., "male"}, {
            "2nd", 18., "female"}, {"2nd", 20., "female"}, {
            "2nd", 23., "male"}, {"2nd", 44., "male"}, {"2nd", 21., "male"}, {
            "2nd", 42., "male"}, {"2nd", 63., "male"}, {"2nd", 33., "male"}, {
            "2nd", 42., "male"}, {"2nd", 24., "female"}, {
            "2nd", 22., "male"}, {"2nd", 23., "female"}, {
            "2nd", 24., "female"}, {"2nd", 
             Missing[], "female"}, {"2nd", 45., "female"}, {
            "2nd", 57., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 26., "female"}, {
            "2nd", 30., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 1., "female"}, {
            "2nd", 25., "male"}, {"2nd", 22., "female"}, {
            "2nd", 17., "female"}, {"2nd", 24., "male"}, {
            "2nd", 50., "male"}, {"2nd", 57., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 1., "male"}, {"2nd", 31., "male"}, {
            "2nd", 24., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 40., "male"}, {"2nd", 32., "male"}, {
            "2nd", 30., "male"}, {"2nd", 13., "female"}, {
            "2nd", 48., "male"}, {"2nd", 70., "male"}, {"2nd", 27., "male"}, {
            "2nd", 54., "male"}, {"2nd", 39., "male"}, {"2nd", 16., "male"}, {
            "2nd", 62., "male"}, {"2nd", 14., "female"}, {
            "2nd", 2., "male"}, {"2nd", 3., "male"}, {"2nd", 26., "male"}, {
            "2nd", 28., "male"}, {"2nd", 39., "male"}, {"2nd", 22., "male"}, {
            "2nd", 
             Missing[], "male"}, {"2nd", 23., "male"}, {"2nd", 29., "male"}, {
            "2nd", 28., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 50., "female"}, {
            "2nd", 19., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 41., "male"}, {
            "2nd", 21., "female"}, {"2nd", 43., "male"}, {
            "2nd", 32., "female"}, {"2nd", 34., "male"}, {
            "2nd", 30., "male"}, {"2nd", 27., "male"}, {
            "2nd", 2., "female"}, {"2nd", 33., "female"}, {
            "2nd", 34., "male"}, {"2nd", 30., "female"}, {
            "2nd", 28., "female"}, {"2nd", 23., "male"}, {
            "2nd", 3., "male"}, {"2nd", 24., "female"}, {
            "2nd", 19., "male"}, {"2nd", 21., "female"}, {
            "2nd", 27., "male"}, {"2nd", 25., "female"}, {
            "2nd", 18., "female"}, {"2nd", 20., "female"}, {
            "2nd", 30., "female"}, {"2nd", 30., "female"}, {
            "2nd", 35., "male"}, {"2nd", 41., "male"}, {"2nd", 25., "male"}, {
            "2nd", 50., "female"}, {"2nd", 23., "male"}, {
            "2nd", 28., "female"}, {"2nd", 27., "female"}, {
            "2nd", 29., "male"}, {"2nd", 27., "female"}, {
            "2nd", 40., "male"}, {"2nd", 23., "male"}, {
            "2nd", 12., "female"}, {"2nd", 40., "female"}, {
            "2nd", 32.5, "female"}, {"2nd", 27., "male"}, {
            "2nd", 29., "female"}, {"2nd", 2., "male"}, {
            "2nd", 0.9167, "female"}, {"2nd", 5., "female"}, {
            "2nd", 33., "female"}, {"2nd", 66., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 26., "female"}, {
            "2nd", 24., "female"}, {"3rd", 16., "male"}, {
            "3rd", 35., "female"}, {"3rd", 16., "female"}, {
            "3rd", 25., "male"}, {"3rd", 20., "male"}, {
            "3rd", 18., "female"}, {"3rd", 30., "male"}, {
            "3rd", 26., "male"}, {"3rd", 0.8333, "male"}, {
            "3rd", 18., "female"}, {"3rd", 26., "male"}, {
            "3rd", 26., "male"}, {"3rd", 20., "male"}, {"3rd", 24., "male"}, {
            "3rd", 25., "male"}, {"3rd", 35., "male"}, {"3rd", 18., "male"}, {
            "3rd", 32., "male"}, {"3rd", 4., "male"}, {"3rd", 2., "female"}, {
            "3rd", 9., "female"}, {"3rd", 27., "male"}, {
            "3rd", 39., "female"}, {"3rd", 20., "male"}, {
            "3rd", 26., "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 24., "male"}, {
            "3rd", 35., "male"}, {"3rd", 5., "male"}, {"3rd", 3., "male"}, {
            "3rd", 13., "male"}, {"3rd", 5., "female"}, {
            "3rd", 23., "male"}, {"3rd", 38., "female"}, {
            "3rd", 45., "female"}, {"3rd", 21., "male"}, {
            "3rd", 23., "male"}, {"3rd", 17., "female"}, {
            "3rd", 30., "male"}, {"3rd", 23., "male"}, {
            "3rd", 13., "female"}, {"3rd", 32., "male"}, {
            "3rd", 33., "female"}, {"3rd", 0.75, "female"}, {
            "3rd", 0.75, "female"}, {"3rd", 24., "female"}, {
            "3rd", 18., "female"}, {"3rd", 40., "male"}, {
            "3rd", 26., "male"}, {"3rd", 20., "male"}, {
            "3rd", 45., "female"}, {"3rd", 27., "female"}, {
            "3rd", 22., "male"}, {"3rd", 19., "male"}, {"3rd", 22., "male"}, {
            "3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 32., "male"}, {
            "3rd", 21., "male"}, {"3rd", 18., "male"}, {"3rd", 6., "male"}, {
            "3rd", 9., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 40., "male"}, {
            "3rd", 32., "female"}, {"3rd", 21., "male"}, {
            "3rd", 22., "female"}, {"3rd", 20., "female"}, {
            "3rd", 29., "male"}, {"3rd", 35., "male"}, {"3rd", 19., "male"}, {
            "3rd", 21., "female"}, {"3rd", 30., "female"}, {
            "3rd", 18., "male"}, {"3rd", 38., "male"}, {"3rd", 17., "male"}, {
            "3rd", 17., "male"}, {"3rd", 21., "female"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 28., "male"}, {
            "3rd", 24., "male"}, {"3rd", 16., "female"}, {
            "3rd", 28., "male"}, {"3rd", 24., "male"}, {"3rd", 18., "male"}, {
            "3rd", 24., "male"}, {"3rd", 36., "male"}, {"3rd", 24., "male"}, {
            "3rd", 31., "male"}, {"3rd", 22., "female"}, {
            "3rd", 30., "female"}, {"3rd", 70.5, "male"}, {
            "3rd", 35., "male"}, {"3rd", 27., "male"}, {"3rd", 19., "male"}, {
            "3rd", 30., "male"}, {"3rd", 9., "male"}, {"3rd", 3., "male"}, {
            "3rd", 59., "male"}, {"3rd", 17., "female"}, {
            "3rd", 22.5, "male"}, {"3rd", 45., "male"}, {
            "3rd", 30., "female"}, {"3rd", 0.3333, "male"}, {
            "3rd", 28., "female"}, {"3rd", 25., "male"}, {
            "3rd", 24., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 36., "female"}, {
            "3rd", 16., "male"}, {"3rd", 1., "male"}, {"3rd", 26., "male"}, {
            "3rd", 33., "female"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 36., "male"}, {
            "3rd", 19., "female"}, {"3rd", 17., "male"}, {
            "3rd", 42., "male"}, {"3rd", 43., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32., "male"}, {"3rd", 19., "male"}, {
            "3rd", 30., "female"}, {"3rd", 24., "female"}, {
            "3rd", 23., "female"}, {"3rd", 33., "male"}, {
            "3rd", 65., "male"}, {"3rd", 18., "male"}, {"3rd", 45., "male"}, {
            "3rd", 
             Missing[], "male"}, {"3rd", 17., "male"}, {"3rd", 15., "male"}, {
            "3rd", 47., "male"}, {"3rd", 5., "female"}, {
            "3rd", 40.5, "male"}, {"3rd", 40.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 26., "male"}, {
            "3rd", 21., "female"}, {"3rd", 9., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {"3rd", 16., "male"}, {
            "3rd", 48., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 9., "male"}, {
            "3rd", 41., "male"}, {"3rd", 31., "female"}, {
            "3rd", 9., "male"}, {"3rd", 1., "male"}, {"3rd", 11., "male"}, {
            "3rd", 10., "female"}, {"3rd", 14., "male"}, {
            "3rd", 43., "female"}, {"3rd", 32., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 28., "male"}, {
            "3rd", 19., "male"}, {"3rd", 24., "female"}, {
            "3rd", 17., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28., "male"}, {"3rd", 20., "male"}, {
            "3rd", 23.5, "male"}, {"3rd", 41., "male"}, {
            "3rd", 26., "male"}, {"3rd", 21., "male"}, {
            "3rd", 45., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 11., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 27., "male"}, {
            "3rd", 26., "female"}, {"3rd", 22., "female"}, {
            "3rd", 28., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "female"}, {
            "3rd", 43., "male"}, {"3rd", 27., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 42., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "female"}, {
            "3rd", 29., "male"}, {"3rd", 21., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 48., "male"}, {
            "3rd", 17., "male"}, {"3rd", 34., "male"}, {"3rd", 26., "male"}, {
            "3rd", 29., "male"}, {"3rd", 1., "female"}, {
            "3rd", 19., "male"}, {"3rd", 27., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 23., "male"}, {"3rd", 32., "male"}, {
            "3rd", 27., "male"}, {"3rd", 20., "female"}, {
            "3rd", 21., "female"}, {"3rd", 17., "male"}, {
            "3rd", 30., "male"}, {"3rd", 21., "male"}, {"3rd", 33., "male"}, {
            "3rd", 22., "male"}, {"3rd", 4., "female"}, {
            "3rd", 39., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 44., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "female"}, {
            "3rd", 29., "male"}, {"3rd", 1., "female"}, {
            "3rd", 18., "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 26., "male"}, {"3rd", 29., "male"}, {
            "3rd", 29., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 32., "male"}, {
            "3rd", 34.5, "male"}, {"3rd", 39., "male"}, {
            "3rd", 24., "male"}, {"3rd", 25., "female"}, {
            "3rd", 45., "female"}, {"3rd", 36., "male"}, {
            "3rd", 20., "male"}, {"3rd", 26., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 27., "male"}, {"3rd", 51., "male"}, {
            "3rd", 32., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 29., "male"}, {
            "3rd", 30.5, "female"}, {"3rd", 35., "male"}, {
            "3rd", 33., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 15., "female"}, {
            "3rd", 35., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "male"}, {
            "3rd", 19., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 55.5, "male"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "male"}, {"3rd", 21., "male"}, {
            "3rd", 28., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 6., "male"}, {
            "3rd", 27., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 34., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "male"}, {
            "3rd", 1., "female"}, {"3rd", 20., "male"}, {
            "3rd", 19., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 12., "male"}, {
            "3rd", 14., "female"}, {"3rd", 29., "female"}, {
            "3rd", 28., "male"}, {"3rd", 18., "female"}, {
            "3rd", 26., "female"}, {"3rd", 21., "male"}, {
            "3rd", 39., "male"}, {"3rd", 21., "male"}, {
            "3rd", 28.5, "male"}, {"3rd", 22., "female"}, {
            "3rd", 61., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 23., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 9., "male"}, {
            "3rd", 28., "male"}, {"3rd", 42., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 31., "female"}, {
            "3rd", 28., "male"}, {"3rd", 20., "male"}, {
            "3rd", 23., "female"}, {"3rd", 20., "female"}, {
            "3rd", 20., "male"}, {"3rd", 31., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 2., "male"}, {"3rd", 6., "male"}, {
            "3rd", 8., "female"}, {"3rd", 29., "female"}, {
            "3rd", 1., "male"}, {"3rd", 7., "male"}, {"3rd", 2., "male"}, {
            "3rd", 41., "female"}, {"3rd", 19., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32., "male"}, {
            "3rd", 3., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 22., "male"}, {
            "3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 19., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 38., "male"}, {"3rd", 21., "male"}, {
            "3rd", 10., "male"}, {"3rd", 7., "male"}, {"3rd", 8., "male"}, {
            "3rd", 39., "female"}, {"3rd", 35., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 47., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {
            "3rd", 41., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 50., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 14.5, "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "male"}, {
            "3rd", 21., "female"}, {"3rd", 39., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "female"}, {
            "3rd", 4., "female"}, {"3rd", 25., "male"}, {
            "3rd", 20., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 29., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 40., "male"}, {
            "3rd", 21., "male"}, {"3rd", 18., "female"}, {
            "3rd", 10., "male"}, {"3rd", 9., "female"}, {
            "3rd", 40., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 19., "male"}, {
            "3rd", 30., "male"}, {"3rd", 21., "male"}, {
            "3rd", 60.5, "male"}, {"3rd", 19., "male"}, {
            "3rd", 22., "female"}, {"3rd", 31., "male"}, {
            "3rd", 27., "male"}, {"3rd", 2., "female"}, {
            "3rd", 16., "male"}, {"3rd", 44., "male"}, {"3rd", 25., "male"}, {
            "3rd", 74., "male"}, {"3rd", 14., "male"}, {"3rd", 24., "male"}, {
            "3rd", 34., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 16., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 63., "female"}, {
            "3rd", 11.5, "male"}, {"3rd", 10., "female"}, {
            "3rd", 36., "male"}, {"3rd", 30., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28., "male"}, {"3rd", 28., "male"}, {
            "3rd", 47., "male"}, {"3rd", 31., "male"}, {"3rd", 16., "male"}, {
            "3rd", 31., "female"}, {"3rd", 22., "male"}, {
            "3rd", 20., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28.5, "male"}, {
            "3rd", 27., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 36., "male"}, {"3rd", 27., "male"}, {
            "3rd", 15., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 14.5, "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 26.5, "male"}, {
            "3rd", 29., "male"}}, 
          "Output" -> {
           "survived", "survived", "died", "died", "survived", "survived", 
            "died", "died", "survived", "survived", "survived", "survived", 
            "died", "survived", "survived", "died", "survived", "survived", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "survived", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "survived", "survived", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "survived", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "survived", "died", "died", "survived", "died", "died", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "survived", "survived", "survived", "survived", "survived", 
            "died", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "survived", "died", "survived", "survived", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "died", "survived", "survived", "survived", "died", 
            "died", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "survived", "died", "died", "died", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "survived", "survived", "survived", "died", "died", "died", 
            "survived", "survived", "died", "survived", "died", "survived", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "died", "survived", 
            "survived", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "survived", "died", "died", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "survived", "died", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "died", "survived", "died", "died", "died", "survived", "died", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "survived", "survived", "survived", "died", "survived", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "died", "died", "survived", "survived", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "survived", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "died", "died", "survived", "died", "died", 
            "died", "died", "survived", "died", "died", "died", "died", 
            "died", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "died", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "died", "survived", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "died", "died", "died", "survived", "died", "survived", 
            "died", "survived", "died", "died", "died", "survived", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "survived", "survived", "died", "died", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "survived", 
            "died", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "survived", "died", "died", "survived", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "died", "died", 
            "died", "died", "survived", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "survived", "died", "survived", "survived", "died", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "died", "died", 
            "survived", "died", "died", "died", "died", "survived", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "survived", "died", "died", "died", "died", 
            "survived", "survived", "survived", "died", "died", "died", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "died", "died", "died", 
            "survived", "survived", "survived", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died"}|>, 
        "Predictions" -> {
         "survived", "survived", "survived", "died", "died", "survived", 
          "died", "died", "survived", "survived", "survived", "died", "died", 
          "survived", "survived", "died", "survived", "died", "survived", 
          "died", "survived", "died", "died", "survived", "survived", "died", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "died", "survived", "died", "survived", "died", "died", "survived", 
          "survived", "died", "survived", "died", "died", "survived", 
          "survived", "survived", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "died", "survived", "died", 
          "died", "died", "died", "survived", "survived", "survived", "died", 
          "survived", "survived", "died", "died", "survived", "died", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "died", "survived", "survived", "died", "survived", "died", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "survived", "died", "survived", "died", "survived", "died", "died", 
          "survived", "died", "survived", "died", "died", "survived", "died", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "died", "survived", "survived", "survived", "died", "survived", 
          "died", "died", "died", "survived", "died", "died", "died", 
          "survived", "died", "survived", "survived", "survived", "survived", 
          "died", "died", "died", "survived", "survived", "survived", "died", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "survived", "survived", 
          "died", "survived", "died", "died", "died", "died", "died", "died", 
          "died", "survived", "survived", "died", "survived", "died", "died", 
          "died", "died", "died", "died", "died", "survived", "died", 
          "survived", "died", "died", "survived", "survived", "survived", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "died", "died", "survived", "died", "survived", "died", 
          "died", "survived", "died", "died", "survived", "survived", "died", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "survived", "survived", "died", "died", "died", "survived", 
          "died", "survived", "survived", "survived", "died", "died", "died", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "died", "survived", "died", "died", "died", "survived", "died", 
          "died", "survived", "died", "survived", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "survived", "died", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "died", "survived", "died", "survived", "died", "survived", 
          "survived", "survived", "died", "survived", "died", "died", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "survived", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "died", "survived", "survived", "died", "died", "died", 
          "died", "died", "died", "died", "survived", "died", "survived", 
          "survived", "survived", "survived", "died", "died", "survived", 
          "died", "died", "survived", "died", "survived", "survived", "died", 
          "died", "survived", "died", "survived", "died", "survived", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "survived", "survived", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "survived", "died", "survived", 
          "died", "died", "died", "survived", "survived", "died", "survived", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "died", "survived", "survived", "survived", "survived", "survived", 
          "died", "died", "died", "survived", "died", "survived", "survived", 
          "died", "survived", "died", "died", "survived", "survived", 
          "survived", "died", "survived", "survived", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "survived", "died", 
          "died", "survived", "died", "died", "survived", "died", "died", 
          "died", "survived", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "died", "survived", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "survived", "died", "survived", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "survived", "died", "survived", 
          "died", "survived", "died", "survived", "survived", "died", "died", 
          "died", "survived", "survived", "died", "died", "died", "died", 
          "survived", "died", "survived", "died", "died", "survived", "died", 
          "died", "died", "died", "died", "died", "died", "survived", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "survived", "died", "died", "survived", "died", "survived", 
          "died", "died", "died", "died", "survived", "died", "died", "died", 
          "died", "survived", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", 
          "survived", "survived", "survived", "died", "died", "died", "died", 
          "died", "died", "died", "died", "survived", "died", "died", "died", 
          "died", "survived", "died", "died", "died", "survived", "survived", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "survived", "survived", "died", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "survived", 
          "died", "survived", "died", "died", "died", "died", "survived", 
          "died", "died", "died", "died", "died", "died", "survived", 
          "survived", "survived", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "died", "died", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "survived", "survived", 
          "survived", "survived", "died", "died", "died", "survived", 
          "survived", "survived", "survived", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "survived", "died", 
          "died", "died", "died", "died", "survived", "died", "survived", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "died", "survived", "died", "died", "died", "survived", "survived", 
          "died", "survived", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "survived", "died", "died", "died", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "died", "died", "survived", "died", "died", "survived", 
          "survived", "died", "survived", "survived", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "survived", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "survived", "survived", "survived", "survived", "died", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "died", "died", "survived", "survived", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "survived", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "survived", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "died", "survived", "died", 
          "died", "survived", "died", "survived", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "survived", "survived", "died", 
          "died"}, "LogProbabilities" -> CompressedData["
1:eJytm1to12UYx9c6SIeLWo50mbWbJR2kg7YGIp2oOchkkNg6XEhGhZ1cVCAW
hhluF4FrSpExMxOtkRpFUPJemJqayHIzxZU2W1puOJ2lm6kR7NfF53fx4eG/
q/HuPT3v9/k+3+d5399WPvOF2lnFRUVF755fVPTfz+Kym+oe3HQ2TTjb9vIV
Vd+lCWV3Lf+6+o/UNXF0TWndwTRt1Vcr08Izaf3Mitd3nbc57Z69Zs4n3R1p
ZccNG9rb+tPTt5YcP/5Re6qdd//upg9PpPWnqi/4/c7T6faLumtKvt+ait94
eOz8Z3elcVubWu+p/ys3nvtrG+vl2jL/8c/2nRg96ce0cdG3c56Z9neuX+2T
/YgP22Yf9ze87Tz0B9fjfLOX483f162oHNjy6L50aVNJ1/Tuvhyfovjnzhv0
v/mr4P2M7+hXfgjfo3w7s3dwW/f4Q6n24skXzp7YHeZ3lK8F+ze4v/krGo9q
T4H8C/MnuH9Un6PrGV6Gd64f+xv+1h9d3/Qpqh/mzyi/CsZ3mPkZ1R/Dl/Mt
f0XtJX5R/nC86ftw1yOaj4RvVk9E9Zb+1HwQ5E/UX9F4Yn1ScHxE69dovRGt
f6U/qwOyuiCqJ9H6k/bk+gvEj/yL+jfKx3B9HNWDYfY32zVfjJ83snNLKq1Y
+lr9jH/SlUM/s99ncf1/nOM8XLdoVEnv5Zu3p8eWrj23rWIwPJ/25PiE9egn
5Z+sR3vYb3jy97Yf7bN+nrfQ9XLnNbzQb/xhP+1h/sh4k/GI+7GffON5eN/h
eLPX/M31DU+el3jQvlw8YT07fw5/8b/Zn9O3qP3ko8Qf7bd+w1fHB/Wav8/x
V/YnPraf4WV8iLYtX0TXjfLP9q8aWmfd0Lqmf4Xiu/GdG6uaKk6la75c3jx5
YGeun/pseNn5OT+6XjTe2Ga8m394/qt3Trml8bL+dHT/hp6O234qOP5tfnR8
VE/t/Kaf0fOZPtl+Vs/RPzyP6VM0vkwPwvkpWP8QD+Jr+SFaH9r5wvWe1RNB
vkX1nPeh9gdWV5a92pVqW+a3NM78M3UePLJqxOHedK7+kRlrevbre0nrE62j
Pl1yLG1vmPvUit69Ob5lOpvp7oGf3x6bGvakN08uKZ8y9XhuPsezzf25H+3N
4YP7FedzfeKxY/Gob35Y15MWLp5R/NymA7n5xJPr8Ty01/Dkeey9hu2o/dl3
xOy7Itfj/PHXH3txsKovVe65+9pXOjq1niS+7Gd9zvFsX9I32N487mgaMbls
7um6X3J4Ej/jF8/P76vR950on+39jfPpX+7HfEE8iDf353zjk8Uf5xu+xn/D
g+fpfP7mxpfeOpL2rDz0Xv/7vxbM11y+Fb2x+8TUSffOqtu9I61d/XFXcflA
Dn/iFV3f7Mv2GTO0L/Fj/c74p77l6jPYz/zAflvPzkP8qHc8H+1hPDFeaB/H
m730F/Ekv+0+FeUn8aaeLhjCIcOF+7Ft/iC/LZ9xfca31Uf0B+2z9yarb2iP
6aN9T2H+SQumf7Doqrb0ZE11Q8sdJ3P4kX/st/0Z75YfOJ7xwn7TY8aj4W/5
k+cjnxlfhm90f+Of+dvqKeLL+LR6inrI8fYewHikfli9Yf61+LF6lP6hvaan
pt+sB0xPLV9H26Y30frS9JvnJV4WL2xn3/Wy73yWH6J6bPw2/1m9YfWF2RfN
z5w/snfC/GWVh1Nz6bLPx9z3W3poSDczHaV+mJ5Y/jT+kedWr1OPDJ9ofUP+
EE/6y/anvVZ/MZ9wP/MP81U0P3I98t30muehXhheps92HyBfovoZzTfEy/SE
/qG/2c/4NH3l+e1+Rb6zPjD/Ew++n9j7APFmv91nyTeOt/rG2pxPPGgP92c9
RHyNf1zP7hv0P+23fM/1rX639xO7r9PfXJ/6Rf5bvo++vzAe7e9zLN8z/ux+
a++7dl7qB/XI4s3eb8w/9h7BfG/51r43WP40fLm/tYkH48ve2wqt91i/WX0V
zWfGp+j3nuh+0frK3sPoL8aTvTdE73dWn1j8R+9Xln9MD63eMn2z+cQvGp+0
l+ejP8jXKP9Mf6lfUf6QD9H7qtU79Efu/3+C/68U5bvdt0xfLR+bnln+I5/s
PYHtfwHJQ78W
         "], "CountMatrix" -> {{487, 79, 0}, {107, 243, 0}}, 
        "IndicesMatrix" -> {{CompressedData["
1:eJwl03twCAQcB/DNW9ryaheztTGWPZDRtkI2islM06w9ZCRMbea1W5hcsymb
RxqXK6w7SXQSUomLui6y3BXl8qjk6MSlTadasj5df3y+v/9/v+8vcurszOLA
gICAn0Ursy3tCKIjXQkhlB6EEUEkfYgmhjjiSWAQ95FIEskMJZWHGU0648gi
l0lMZgrTmUEhRcymhDks4FkWsZhyKqliBTWsZg21rGM9G3iNjWxiM3W8zha2
so232MHb7GQXH3CAg3zGEeo5zglO8i2nOcNZvuc8F7jIpf92zGWu0kAj17nB
nzTRTKBbtKYt7QgimI50JoRudCeUMMK5m0h6EkVv+hDNPfQlhljiiKc/AxhM
IkkkM4ShDGM4KaQykjTGMJZ0MshkAllkk0MueeTzBJMpYApTeZJpzKSQWRQx
mxLmMo/5lFLGQspZSgWVVFPDSlazllrWsYHN1LGF7ezgHXbxLrvZw17eYx/7
+YgDHORjDnGYTznCUY5Rz3FO8g2n+I7TnOEs5/iBHznPBS4G/v93v3CFq1zj
Nxpo5Hdu8Ad/0cRN/uEWzbRoERDQkla0pg3t6UAwHelEZ7oQwl10J5QehBFO
BJH0pBdR9CWGWOKIpx/9GcBAEhhMIkkkM4ShDONBhpNCKiMYyUOMIo0xPEI6
48hgPI+SyQQmks3j5JBLHvlMooApTKeQZyhmLvOYzwJKKWMh5SxhKRUso4rl
rKCaGlaxhpdYy3pe4VU2sok63mArb7KN7exgJ7vYzR72so/3+ZD9HOIwn/A5
R/mCY9TzJV/xNSc4ySlOc47z/MQlLnOFq/zKNRpo5DpN/M1NbtFMi5Y6RBva
cxsduJ0ggrmDTnSmC125k250J5Qwwokgkp70Iore9CGavsQQSxz9GMC9DCSB
QQzmfh5gCMMYTgqpjGAUo0ljLOmMI4PxZPIYWUwkmxxyySOfSRQwjaeYwUwK
mcXTFFFMCXOYSyllLGQRiylnCc/xPBUso5IqlvMCL7KCampYySrW8DK1/Atr
4OD1
           "], CompressedData["
1:eJwlzz9KgnEAgOHf9ykUGOgBhHLSE5gansBAKF0LXdxyFMFBu0FJB0hbGhpD
J5f+QJ2gOSxwyKUaAx9oeJZ3e3Pt7tFZFEKok+CFIMSk2GGPCjUajJkyY86C
V954Z8knK75Y880vURxCmjxFKhxwSIMmp3ToMmDEOWOuuGbClBtuueOeOQ88
8sQzH/zwF/9PRiTZYpsMWXYpUGSfEmWqHHNCix59hlxwyQZ2QicG
           "], {}}, {CompressedData["
1:eJwtzr0rxHEAx/EvEsNNiisbuVnKRkxuuIUYr6jfyeA8Jh3TpRhMEiVRMuik
y3UjN8jlabtSjAy2+wckKS9leK2fz7srWhxfaAghZGkmRhtxOummhz4GGGSI
EVKMMsYEaSKmmf3fzLFGnk122eOIAheUuabCDbdUuaPGM3V+GBabZY6/8HVO
OaPAOUUuuaLKPQ888sob37Q0htBKjHbiJOgnySQZ5llimRx5tthmh30OOOSY
E4qUKFPhiRovvPNBnU++6GjyTy9JUkwRkWGGFVbZ4BdvOzfm
           "], CompressedData["
1:eJwt0ttrDQAAx/HD0WpHrLUtW8nSoknG5vLAw2ibTZNsaY5CGmOxtjDENDay
M9pcHmzN5WGiPCzlmmIUUTQ2wpbb0sopjRVjIvkoD59+f8D3N7m0qrhyVCAQ
+Mq/HU0MsYQYy3jiiCeBJJJJYRKppDGFdKYxnQxmMoss5jKfbBayiBxyyWcJ
hSyliGJWUMJKwqxiNWtZx3rKKKeCSraxnWp2soda9lNHPQdoIEIjR2iimRO0
0Eob7ZzjPB1c4jJXuMo1rnODm3Ryl3s84CGPeEwX3fTwglf00sdb3tPPBwaI
8olBPvOFIb4xzA9+8ovf/CEo5BhiiCVEHPEkkEgSE0hmImlkkEkWs5nDPBaQ
Qx6LyaeAZSyniBLCrKGMjWxiKzvYRQ17qWUfddRzkEM0EKGRwzRzjOOcpIVW
2jjFac5wlnYucJEO7tPFU7rp4RnPiTLy/+whxpFICqlMJZ1MCihlA2WUs5kt
7KaGCE20cYvbdHKHJ3Tzkl76eM0b3tHPAB+JMsgQw3xnhGBQJ2aQTS55FFJE
mAqqqOYofwE2RnfV
           "], {}}}, "ExtendedClasses" -> {"died", "survived"}, "Weights" -> 
        SparseArray[Automatic, {916}, 1., {1, {{0, 0}, {}}, {}}], 
        "BatchEvaluationTime" -> 0.00014946015283842794`, 
        "SingleEvaluationTime" -> 0.0062123, "Version" -> {14.1, 0}|>]], 
     InterpretationBox[
      TagBox[
       StyleBox[
        FrameBox[GridBox[{
           {
            ItemBox[
             FrameBox[
              StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
               StripOnInput->False,
               FontSize->12],
              FrameMargins->{{10, 5}, {-4, 2}},
              FrameStyle->None,
              StripOnInput->False],
             Alignment->{Left, Bottom},
             Background->RGBColor[0.96, 0.96, 0.96],
             Frame->{{False, False}, {True, False}},
             FrameStyle->Opacity[0.1],
             ItemSize->{Automatic, 1},
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              FrameBox[
               TagBox[GridBox[{
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   
                   InterpretationBox[Cell[
                    "GradientBoostedTrees",ExpressionUUID->
                    "4440b50c-6abc-a94c-a6ac-3a624069bb15"],
                    TextCell["GradientBoostedTrees"]]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], "916"},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"78.6", "1.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    78.6026200873362341781`3., 1.3557770034974874207`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"61.8", "1.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    61.7903930131004415216`3., 1.6063353509365643212`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.6408531585903788352`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0106540123674787046`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.619545133855421426`3.", "\", \"", 
                    "0.6621611833253362445`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.619545133855421426`3., ", ", 0.6621611833253362445`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.4449549300669813912`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0166239668530929197`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4117069963607955518`3.", "\", \"", 
                    "0.4782028637731672305`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.4117069963607955518`3., ", ", 0.4782028637731672305`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"9.74`", 
                    
                    RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                    "milliseconds per example", 
                    FractionBox["\"Milliseconds\"", "\"Examples\""]},
                    "Quantity"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"8.69`", 
                    
                    RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                    "examples per millisecond", 
                    FractionBox["\"Examples\"", "\"Milliseconds\""]},
                    "Quantity"]},
                  {
                   ItemBox[
                    
                    GraphicsBox[
                    RasterBox[{{{0.908667976046684, 0.7705994887898671, 
                    0.4234142651517463}, {0.8661189151271699, 
                    0.5845271132110565, 0.05749114525643639}}, {{1., 0.42, 
                    0.}, {0.9284715059922629, 0.8481565986897532, 
                    0.6124270249725275}}}, {{0, 0}, {2, 2}}, {0, 1}],
                    Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["477", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "477", "\" examples of \"", "\"died\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8167808219178082`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.842756183745583`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8295652173913044`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{477, " examples of ", "died", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8167808219178082}], 
                    Row[{"Recall = ", 0.842756183745583}], 
                    Row[{"FScore = ", 0.8295652173913044}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["107", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "107", "\" examples of \"", "\"survived\"", 
                    "\" misclassified as \"", "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.1832191780821918`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.3057142857142857`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{107, " examples of ", "survived", 
                    " misclassified as ", "died"}], 
                    Row[{"Column fraction = ", 0.1832191780821918}], 
                    Row[{"Row fraction = ", 0.3057142857142857}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["89", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "89", "\" examples of \"", "\"died\"", 
                    "\" misclassified as \"", "\"survived\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.2680722891566265`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.15724381625441697`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{89, " examples of ", "died", " misclassified as ", 
                    "survived"}], 
                    Row[{"Column fraction = ", 0.2680722891566265}], 
                    Row[{"Row fraction = ", 0.15724381625441697`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["243", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "243", "\" examples of \"", "\"survived\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7319277108433735`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6942857142857143`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.712609970674487`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{243, " examples of ", "survived", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7319277108433735}], 
                    Row[{"Recall = ", 0.6942857142857143}], 
                    Row[{"FScore = ", 0.712609970674487}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "566", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.842756183745583`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{566, " example", "s", " of class ", "died"}], 
                    Row[{"Recall = ", 0.842756183745583}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "350", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6942857142857143`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{350, " example", "s", " of class ", "survived"}], 
                    Row[{"Recall = ", 0.6942857142857143}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "584", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8167808219178082`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{584, " example", "s", " classified as ", "died"}], 
                    Row[{"Precision = ", 0.8167808219178082}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "332", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7319277108433735`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{332, " example", "s", " classified as ", 
                    "survived"}], 
                    Row[{"Precision = ", 0.7319277108433735}]}], 
                    "Tooltip"]& ]},
                    Frame->True,
                    FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                    FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"died\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"survived\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["566", TraditionalForm]}, {0.5, 
                    FormBox["350", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["584", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["332", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"died\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"survived\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                    FrameTicksStyle->13,
                    GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                    ImageSize->181.2,
                    
                    Method->{
                    "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02],
                     "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                    PlotRangePadding->None],
                    Alignment->Center,
                    StripOnInput->False], "\[SpanFromLeft]"}
                 },
                 AutoDelete->False,
                 ColumnsEqual->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
                 GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], 
                    Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}],
                "Grid"],
               FrameMargins->{{10, 10}, {10, 5}},
               FrameStyle->None,
               StripOnInput->False],
              Deploy,
              DefaultBaseStyle->"Deploy"],
             Alignment->Center,
             
             BaseStyle->{
              FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI",
                NumberMarks -> False, Deployed -> False},
             StripOnInput->False]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], 
              Offset[0.8], {
               Offset[0.4]}, 
              Offset[0.2]}}],
         Background->GrayLevel[1],
         FrameMargins->{{0, 0}, {0, 0}},
         FrameStyle->GrayLevel[0.85],
         RoundingRadius->5,
         StripOnInput->False],
        StripOnInput->False,
        LineBreakWithin->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      ClassifierMeasurementsObject[<|
       "Model" -> ClassifierFunction[<|
          "ExampleNumber" -> 916, "ClassNumber" -> 2, 
           "Input" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal"|>, 
                  "f2" -> <|"Type" -> "Numerical"|>, 
                  "f3" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor[
                    "Transpose", <|"FeatureNumber" -> 3|>], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                  MachineLearning`MLProcessor[
                  "SynthesizeMissingValues", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Distribution" -> 
                    LearnedDistribution[<|
                    "ExampleNumber" -> 916, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|"f2" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|"(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9924763087166281, 
                    0.06962246892396884, -0.10071488696884714`}, \
{-0.12176028349302224`, 0.6475982344553933, -0.7521907737362618}, {
                    0.012853404215050985`, 0.7587945957577639, 
                    0.6512031568173609}}, 
                    "Precisions" -> {1.1096705122951698`, 11.071379162604247`,
                     14.504654820468707`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001752264873371586, 0.09643725350844203, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.1972185, "MaxTrainingMemory" -> 
                    2051000, "DataMemory" -> 106416, "FunctionMemory" -> 
                    64512, "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 10, 11, 15, 6, 20.1145877`9.056086069629984}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146168`, -1.997829760914916, -1.976574768503185, \
-1.9695170466598357`, -1.9059724997243812`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714302`, -1.7810711623410056`}, 
                    "LeftBoundary" -> -2.0628669170146168`, "LeftScale" -> 
                    0.12459852713774523`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[5.892604950680779, 0.13867820062256261`], 
                    "EntropySampleSize" -> 10|>], 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "EvaluationStrategy" -> "ModeFinding", 
                    "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
                  MachineLearning`MLProcessor[
                  "Threads", <|
                   "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                  MachineLearning`MLProcessor[
                  "Standardize", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.018970775438927`}, 
                    "StandardDeviation" -> {12.892103992603547`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
                  MachineLearning`MLProcessor[
                  "EmbedNominalVector", <|
                   "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                    "EmbeddingVectors" -> {
                    RawArray["Real32",{{0., 0., 0.}, {
                    0.21963098645210266`, -0.1438339650630951, 
                    0.544792890548706}, {-0.2416929453611374, 
                    0.3798814117908478, 
                    0.6873865127563477}, {-0.9437126517295837, 
                    0.4273325502872467, -1.2217921018600464`}}], 
                    RawArray["Real32",{{0., 0.}, {-0.12253803759813309`, 
                    0.6071814894676208}, {-0.6194148659706116, \
-0.98703533411026}}]}, "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
                  MachineLearning`MLProcessor[
                  "MergeVectors", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    7619735631186802745|>]}, "Invertibility" -> "Impossible", 
                "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
           "Output" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"died" -> 1, "survived" -> 2|>}, 
                    "MissingCode" -> 0, "Version" -> {14.1, 0}, "ID" -> 
                    2833981340056725226, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FromVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
             "Marginal" -> <|
              "died" -> 0.6176470588235294, "survived" -> 
               0.3823529411764706|>|>, "LabelSplitter" -> 
           MachineLearning`MLProcessor[
            "FeatureLabelSplit", <|
             "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
              "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
           "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic,
            "Prior" -> Automatic, "Utility" -> 
           SparseArray[
            Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
           "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
           Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
                 "NumericalThresholds" -> {-0.6194138824939727, \
-0.9437117278575896}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.5628561973571777, -0.4405399262905121, \
-0.2471834123134613}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
                 "NumericalThresholds" -> {-0.6194138824939727, \
-0.9437117278575896}, "LeafValues" -> 
                 RawArray["Real32",{-0.07562831789255142, 0.03576415404677391,
                    0.20096533000469208`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
                 "NumericalThresholds" -> {-0.6194138824939727, \
-0.9437117278575896}, "LeafValues" -> 
                 RawArray["Real32",{-0.06966611742973328, 
                   0.031935498118400574`, 0.17804935574531555`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{6, 2}], 
                 "NumericalThresholds" -> {-0.9870343506336211, \
-0.9437117278575896}, "LeafValues" -> 
                 RawArray["Real32",{-0.06479296088218689, 0.03283056244254112,
                    0.1575036644935608}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
                 "NumericalThresholds" -> {-0.6194138824939727, \
-0.9437117278575896}, "LeafValues" -> 
                 RawArray["Real32",{-0.059291958808898926`, 
                   0.025252167135477066`, 0.1478646844625473}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{6, 1}], 
                 "NumericalThresholds" -> {-0.9870343506336211, \
-1.1559262871742246`}, "LeafValues" -> 
                 RawArray["Real32",{0.10650458931922913`, 
                   0.08358298242092133, -0.06817365437746048}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
                 "NumericalThresholds" -> {-0.3709764443337917, \
-0.24169342964887616`}, "LeafValues" -> 
                 RawArray["Real32",{-0.05000479146838188, 0.0229928158223629, 
                   0.13774782419204712`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{6, 1}], 
                 "NumericalThresholds" -> {-0.9870343506336211, \
-1.5454616546630857`}, "LeafValues" -> 
                 RawArray["Real32",{0.12483570724725723`, 
                   0.06948645412921906, -0.0577348917722702}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
                 "NumericalThresholds" -> {-0.6194139420986174, \
-0.24169257283210752`}, "LeafValues" -> 
                 RawArray["Real32",{-0.04462643712759018, 
                   0.018255863338708878`, 0.147220641374588}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{6, 3}], 
                 "NumericalThresholds" -> {-0.9870343506336211, 
                  0.3798817843198777}, "LeafValues" -> 
                 RawArray["Real32",{-0.039964329451322556`, 
                   0.11732804775238037`, 0.014229444786906242`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
                 "NumericalThresholds" -> {-0.6194139420986174, \
-0.24169257283210752`}, "LeafValues" -> 
                 RawArray["Real32",{-0.03789850324392319, 
                   0.013727221637964249`, 0.13595598936080933`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{3, 6}], 
                 "NumericalThresholds" -> {
                  0.3798807114362717, -0.9870343506336211}, "LeafValues" -> 
                 RawArray["Real32",{0.073035329580307, -0.057666435837745667`,
                    0.02474776655435562}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{3, 6}], 
                 "NumericalThresholds" -> {0.3798807114362717, 
                  0.6071805655956269}, "LeafValues" -> 
                 RawArray["Real32",{0.06542342156171799, -0.05172543227672577,
                    0.025420403108000755`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
                 "NumericalThresholds" -> {-0.6194139420986174, \
-0.24169342964887616`}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.031043292954564095`, -0.0016394905978813767`, 
                   0.1087941899895668}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -0.6194142997264861}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.01889302022755146, -0.002432873472571373, 
                   0.13034820556640625`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{6, 1}], 
                 "NumericalThresholds" -> {
                  0.6071805655956269, -1.1559262871742246`}, "LeafValues" -> 
                 RawArray["Real32",{0.11227266490459442`, 
                   0.04290912300348282, -0.03833886608481407}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -0.6194143593311309}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.017510192468762398`, -0.004031539428979158, 
                   0.11900977790355682`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{3, 6}], 
                 "NumericalThresholds" -> {
                  0.3798807114362717, -0.9870343506336211}, "LeafValues" -> 
                 RawArray["Real32",{0.05119683966040611, -0.04318311810493469,
                    0.01859913021326065}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 1}], 
                 "NumericalThresholds" -> {-0.12253886833786963`, \
-1.1559262871742246`}, "LeafValues" -> 
                 RawArray["Real32",{0.0846753716468811, 
                   0.039477430284023285`, -0.030357690528035164`}], 
                 "Children" -> RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -0.6194142997264861}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.014995970763266087`, -0.0016988357529044151`, 
                   0.11484383046627045`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -1.7823597788810728`}, "LeafValues" -> 
                 RawArray["Real32",{0.10305319726467133`, 
                   0.0488920696079731, -0.021423714235424995`}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{6, 3}], 
                 "NumericalThresholds" -> {0.6071805655956269, 
                  0.42733161151409155`}, "LeafValues" -> 
                 RawArray["Real32",{-0.019899947568774223`, 
                   0.08728215843439102, -0.009148811921477318}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{6, 1}], 
                 "NumericalThresholds" -> {
                  0.6071805655956269, -1.1559262871742246`}, "LeafValues" -> 
                 RawArray["Real32",{0.0883764922618866, 
                   0.03110836260020733, -0.029372286051511765`}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -0.6194142997264861}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.012533112429082394`, -0.0017871982418000698`, 
                   0.10607954114675522`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 5}], 
                 "NumericalThresholds" -> {-0.6194158494472503, \
-0.12253886833786963`}, "LeafValues" -> 
                 RawArray["Real32",{
                   0.36643096804618835`, -0.01725507341325283, 
                   0.030557598918676376`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -1.7823597788810728`}, "LeafValues" -> 
                 RawArray["Real32",{0.08553784340620041, 
                   0.04272153973579407, -0.018413979560136795`}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{6, 3}], 
                 "NumericalThresholds" -> {0.6071805655956269, 
                  0.42733161151409155`}, "LeafValues" -> 
                 RawArray["Real32",{-0.015338504686951637`, 
                   0.07884068787097931, -0.011189967393875122`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -0.6194142997264861}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.010326098650693893`, -0.0030235720332711935`, 
                   0.09757386893033981}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{1, 6}], 
                 "NumericalThresholds" -> {-1.7823597788810728`, \
-0.9870343506336211}, "LeafValues" -> 
                 RawArray["Real32",{
                   0.07882683724164963, -0.022229233756661415`, 
                   0.02198720909655094}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 2}], 
                 "NumericalThresholds" -> {-0.6194158494472503, 
                  0.21963008493185046`}, "LeafValues" -> 
                 RawArray["Real32",{0.2917635440826416, -0.01071217842400074, 
                   0.03470345214009285}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{4, 5}], 
                 "NumericalThresholds" -> {-1.2217925190925596`, \
-0.12253886833786963`}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.04170740768313408, -0.008755126036703587, 
                   0.04511519521474838}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{1, 4}], 
                 "NumericalThresholds" -> {-0.9414446353912352, 
                  0.5447924435138704}, "LeafValues" -> 
                 RawArray["Real32",{
                   0.0027812542393803596`, -0.007138974964618683, 
                   0.16874344646930695`}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -0.6194141209125518}, "LeafValues" -> 
                 RawArray["Real32",{-0.00883788987994194, 
                   0.002237652661278844, 0.10447357594966888`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{1, 4}], 
                 "NumericalThresholds" -> {-0.9414446353912352, 
                  0.5447924435138704}, "LeafValues" -> 
                 RawArray["Real32",{
                   0.003270969958975911, -0.006542771589010954, 
                   0.1575198769569397}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{4, 1}], 
                 "NumericalThresholds" -> {-1.2217925190925596`, \
-0.4749798625707626}, "LeafValues" -> 
                 RawArray["Real32",{-0.03647451475262642, 
                   0.04357663914561272, -0.006998565047979355}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 1}], 
                 "NumericalThresholds" -> {0.21963008493185046`, 
                  0.7673393189907075}, "LeafValues" -> 
                 RawArray["Real32",{0.0001414331200066954, 
                   0.031045548617839813`, -0.07420989125967026}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{6, 6}], 
                 "NumericalThresholds" -> {-0.9870358407497405, \
-0.9870362579822539}, "LeafValues" -> 
                 RawArray["Real32",{0.11555942893028259`, 
                   0.0066485218703746796`, -0.05264180898666382}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{1, 6}], 
                 "NumericalThresholds" -> {-1.7823597788810728`, \
-0.9870343506336211}, "LeafValues" -> 
                 RawArray["Real32",{
                   0.059138186275959015`, -0.0179966501891613, 
                   0.01827036775648594}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 5}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -0.6194141209125518}, "LeafValues" -> 
                 RawArray["Real32",{-0.007800576277077198, 
                   0.0018008486367762089`, 0.09924207627773285}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{4, 5}], 
                 "NumericalThresholds" -> {-1.2217925190925596`, \
-0.12253886833786963`}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.0329132042825222, -0.007342319469898939, 
                   0.03721977770328522}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 1}], 
                 "NumericalThresholds" -> {-0.6194157302379607, \
-2.133302569389343}, "LeafValues" -> 
                 RawArray["Real32",{0.06984780728816986, 
                   0.10468945652246475`, -0.005712478421628475}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 3}], 
                 "NumericalThresholds" -> {
                  0.21963008493185046`, -0.14383383840322492`}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.007165656890720129, -0.012230036780238152`, 
                   0.07722867280244827}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 6}], 
                 "NumericalThresholds" -> {-0.9437135756015776, \
-0.9870358407497405}, "LeafValues" -> 
                 RawArray["Real32",{0.08311925083398819, -0.0393308624625206, 
                   0.0041056363843381405`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
                 "NumericalThresholds" -> {
                  1.625065624713898, -0.9437117278575896}, "LeafValues" -> 
                 RawArray["Real32",{-0.009687960147857666, -0.053242027759552,
                    0.023557249456644058`}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{1, 2}], 
                 "NumericalThresholds" -> {-0.2388282939791679, 
                  0.21963008493185046`}, "LeafValues" -> 
                 RawArray["Real32",{
                   0.014215047471225262`, -0.030871547758579254`, 
                   0.021562740206718445`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 1}], 
                 "NumericalThresholds" -> {-0.6194157302379607, \
-2.133302569389343}, "LeafValues" -> 
                 RawArray["Real32",{0.06122979149222374, 
                   0.0941050574183464, -0.0051827398128807545`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{5, 6}], 
                 "NumericalThresholds" -> {-0.1225372515618801, 
                  0.6071812212467195}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.006334241479635239, -0.07167304307222366, 
                   0.03391573205590248}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{2, 6}], 
                 "NumericalThresholds" -> {-0.9437135159969329, \
-0.9870354831218718}, "LeafValues" -> 
                 RawArray["Real32",{
                   0.15602052211761475`, -0.0030380382668226957`, 
                   0.005158334504812956}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{4, 5}], 
                 "NumericalThresholds" -> {-1.2217925190925596`, \
-0.12253886833786963`}, "LeafValues" -> 
                 RawArray[
                   "Real32",{-0.02906171977519989, -0.006713171489536762, 
                   0.033422235399484634`}], "Children" -> 
                 RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> RawArray["Integer16",{1, 5}], 
                 "NumericalThresholds" -> {
                  2.1285036802291875`, -0.6194157302379607}, "LeafValues" -> 
                 RawArray["Real32",{
                   0.06869038194417953, -0.06673994660377502, \
-0.0006804348668083549}], "Children" -> 
                 RawArray["Integer16",{{2, -2}, {-1, -3}}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0, "NominalNodeNumber" -> 0|>]}, "ClassNumber" -> 2, 
             "IterationsNumber" -> 50, "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 
                    2.9999999999999996`|>|>, "Processors" -> {
                  MachineLearning`MLProcessor[
                  "DensifyNumericalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    1029909776677290127, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 
                    2.9999999999999996`|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 
                    2.9999999999999996`|>, "Key" -> "(f2(f1f3))", 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Calibrator" -> None, "Method" -> 
             "GradientBoostedTrees", "PostProcessor" -> 
             MachineLearning`MLProcessor["Identity"], 
             "Options" -> <|
              "BoostingMethod" -> <|
                "Value" -> "Gradient", "Options" -> <||>|>, 
               MaxTrainingRounds -> <|"Value" -> 50, "Options" -> <||>|>, 
               "LeavesNumber" -> <|"Value" -> 3, "Options" -> <||>|>, 
               "LearningRate" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
               ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
               "MaxBinNumber" -> <|"Value" -> 255, "Options" -> <||>|>, 
               "ThreadNumber" -> <|"Value" -> 6, "Options" -> <||>|>, 
               "MaxDepth" -> <|"Value" -> 6, "Options" -> <||>|>, 
               "LeafSize" -> <|"Value" -> 15, "Options" -> <||>|>, 
               "FeatureFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
               "BaggingFraction" -> <|"Value" -> 1, "Options" -> <||>|>, 
               "BaggingFrequency" -> <|"Value" -> 0, "Options" -> <||>|>, 
               "MinGainToSplit" -> <|"Value" -> 0, "Options" -> <||>|>, 
               "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
               "L2Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
               "LossFunction" -> <|
                "Value" -> Automatic, "Options" -> <||>|>|>|>, 
           "TrainingInformation" -> <|
            "Reporting" -> None, "TrainingFunction" -> Classify, 
             "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
             "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
             0.404757`7.058739361817207, "LossName" -> "MeanCrossEntropy", 
             "BestModelInformation" -> 
             Dataset[<|
               "MeanCrossEntropy" -> 
                Around[0.5632726895592431, 0.06487961999444827], "Accuracy" -> 
                Around[0.7245894532060074, 0.04656731185550783], 
                "EvaluationTime" -> 0.00014125099412355812`, "TestSize" -> 
                183, "ModelMemory" -> 116264, 
                "ModelUtility" -> -0.14195631906534933`, "Round" -> 4, 
                "Iteration" -> 17, 
                "Time" -> {
                 3.2611775`7.964919430809331, 3.3644929`7.978464609655476}, 
                "TrainingSize" -> 733, "TrainingTime" -> 0.07943282347242814, 
                "TrainingMemory" -> 423448, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.5632726895592431, 0.04587681925888069]}, 
                "AccuracyHistory" -> {
                  Around[0.7245894532060074, 0.032928061994658295`]}, 
                "IterationHistory" -> {17}, 
                "TimeHistory" -> {{
                  3.2611775`7.964919430809331, 3.3644929`7.978464609655476}}, 
                "Configuration" -> {
                 "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
                  MaxTrainingRounds -> 50, "LeavesNumber" -> 3, 
                  "LearningRate" -> 0.1, ValidationSet -> Automatic, 
                  "MaxBinNumber" -> 255, "ThreadNumber" -> 6, "MaxDepth" -> 6,
                   "LeafSize" -> 15, "FeatureFraction" -> 1, 
                  "BaggingFraction" -> 1, "BaggingFrequency" -> 0, 
                  "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
                  "L2Regularization" -> 0, "LossFunction" -> Automatic}, 
                "FinalTrainingSize" -> 916|>, 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
             "Configurations" -> 
             Dataset[<|<|
                 "Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 13|>, 
                    "LearningRate" -> <|"Value" -> 0.002|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 35|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.8011897599810363, 0.06107820350853756], 
                    "Accuracy" -> 
                    Around[0.5001402820845321, 0.07053382818600773], 
                    "EvaluationTime" -> 0.00019952623149688788`, "TestSize" -> 
                    100, "ModelMemory" -> 20408, 
                    "ModelUtility" -> -0.4866356629889558, "Round" -> 1, 
                    "Iteration" -> 1, 
                    "Time" -> {
                    0.4371783`7.092203590451254, 
                    0.5193916`7.1670399151020225}, "TrainingSize" -> 10, 
                    "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
                    88824, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.8011897599810363, 0.043188811883578884`]}, 
                    "AccuracyHistory" -> {
                    Around[0.5001402820845321, 0.049874948213372905`]}, 
                    "IterationHistory" -> {1}, 
                    "TimeHistory" -> {{
                    0.4371783`7.092203590451254, 
                    0.5193916`7.1670399151020225}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.7478722471573469, 0.034430581577565456`], 
                    "Accuracy" -> 
                    Around[0.5001402820845321, 0.0498749482133729], 
                    "EvaluationTime" -> 0.00017900777537149963`, "TestSize" -> 
                    200, "ModelMemory" -> 116264, 
                    "ModelUtility" -> -0.41181481812933174`, "Round" -> 3, 
                    "Iteration" -> 14, 
                    "Time" -> {
                    2.2906345`7.811500790980205, 2.390571`7.83004664027294}, 
                    "TrainingSize" -> 150, "TrainingTime" -> 
                    0.0630957344480193, "TrainingMemory" -> 341952, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7478722471573469, 0.02434609771369315]}, 
                    "AccuracyHistory" -> {
                    Around[0.5001402820845321, 0.03526691409300386]}, 
                    "IterationHistory" -> {14}, 
                    "TimeHistory" -> {{
                    2.2906345`7.811500790980205, 
                    2.390571`7.83004664027294}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 0.00017900777537149963`, 
                    "MeanCrossEntropy" -> 
                    Around[0.7478722471573469, 0.034430581577565456`], 
                    "ModelMemory" -> 116264, "TrainingMemory" -> 341952, 
                    "TrainingTime" -> 0.44840035281059054`|>, "Index" -> 
                  1|>, <|"Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 13|>, 
                    "LearningRate" -> <|"Value" -> 0.1|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 90|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 2|>, <|
                 "Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 250|>, 
                    "LearningRate" -> <|"Value" -> 0.1|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 15|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 3|>, <|
                 "Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 1023|>, 
                    "LearningRate" -> <|"Value" -> 0.2|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 7|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.7292212000857379, 0.0267820527255058], 
                    "Accuracy" -> 
                    Around[0.5817453136035826, 0.03073654457077169], 
                    "EvaluationTime" -> 0.00003065879977778177, "TestSize" -> 
                    500, "ModelMemory" -> 20408, 
                    "ModelUtility" -> -0.3847015156384803, "Round" -> 1, 
                    "Iteration" -> 2, 
                    "Time" -> {
                    0.5263879`7.172850891154248, 0.5811563`7.21583794361199}, 
                    "TrainingSize" -> 10, "TrainingTime" -> 
                    0.03162277660168379, "TrainingMemory" -> 71792, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7292212000857379, 0.018937771096300807`]}, 
                    "AccuracyHistory" -> {
                    Around[0.5817453136035826, 0.02173401909623522]}, 
                    "IterationHistory" -> {2}, 
                    "TimeHistory" -> {{
                    0.5263879`7.172850891154248, 
                    0.5811563`7.21583794361199}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[1.2271858974007994`, 0.30204228276689044`], 
                    "Accuracy" -> 
                    Around[0.6585561236686911, 0.06689343977259987], 
                    "EvaluationTime" -> 0.0005011872336272722, "TestSize" -> 
                    100, "ModelMemory" -> 118864, 
                    "ModelUtility" -> -0.9459487078236414, "Round" -> 2, 
                    "Iteration" -> 9, 
                    "Time" -> {
                    0.9056894`7.408524278376362, 1.054831`7.474727878109123}, 
                    "TrainingSize" -> 40, "TrainingTime" -> 0.1, 
                    "TrainingMemory" -> 384000, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[1.2271858974007994`, 0.2135761463495329]}, 
                    "AccuracyHistory" -> {
                    Around[0.6585561236686911, 0.04730080488009927]}, 
                    "IterationHistory" -> {9}, 
                    "TimeHistory" -> {{
                    0.9056894`7.408524278376362, 
                    1.054831`7.474727878109123}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[1.2124774237678313`, 0.31511570787505544`], 
                    "Accuracy" -> 
                    Around[0.6981600840647306, 0.06475798272464], 
                    "EvaluationTime" -> 0.00039810717055349714`, "TestSize" -> 
                    100, "ModelMemory" -> 132616, 
                    "ModelUtility" -> -0.9365132720238779, "Round" -> 3, 
                    "Iteration" -> 15, 
                    "Time" -> {
                    2.3950866`7.8308662144708485, 
                    2.7270094`7.8872316284530335}, "TrainingSize" -> 150, 
                    "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                    754104, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[1.2124774237678313`, 0.22282045389685085`]}, 
                    "AccuracyHistory" -> {
                    Around[0.6981600840647306, 0.045790808720554244`]}, 
                    "IterationHistory" -> {15}, 
                    "TimeHistory" -> {{
                    2.3950866`7.8308662144708485, 
                    2.7270094`7.8872316284530335}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 0.00039810717055349714`, 
                    "MeanCrossEntropy" -> 
                    Around[1.2124774237678313`, 0.31511570787505544`], 
                    "ModelMemory" -> 132616, "TrainingMemory" -> 754104, 
                    "TrainingTime" -> 1.5655480907768673`|>, "Index" -> 4|>, <|
                 "Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 25|>, 
                    "LearningRate" -> <|"Value" -> 0.2|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 35|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.7501674494578778, 0.030161489776127655`], 
                    "Accuracy" -> 
                    Around[0.5581071261011948, 0.03467385154357829], 
                    "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 
                    400, "ModelMemory" -> 20408, 
                    "ModelUtility" -> -0.41371141943044065`, "Round" -> 1, 
                    "Iteration" -> 7, 
                    "Time" -> {
                    0.8156764`7.3630628905241755, 
                    0.8551531`7.383588867911691}, "TrainingSize" -> 10, 
                    "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                    71496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7501674494578778, 0.021327393951388586`]}, 
                    "AccuracyHistory" -> {
                    Around[0.5581071261011948, 0.024518115556319848`]}, 
                    "IterationHistory" -> {7}, 
                    "TimeHistory" -> {{
                    0.8156764`7.3630628905241755, 
                    0.8551531`7.383588867911691}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.7325436477203284, 0.026046119950073023`], 
                    "Accuracy" -> 
                    Around[0.5581071261011948, 0.03467385154357829], 
                    "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 
                    400, "ModelMemory" -> 20408, 
                    "ModelUtility" -> -0.389014768335456, "Round" -> 2, 
                    "Iteration" -> 8, 
                    "Time" -> {
                    0.8602575`7.386173461123625, 0.9016896`7.406602054089646},
                     "TrainingSize" -> 40, "TrainingTime" -> 
                    0.01995262314968879, "TrainingMemory" -> 75016, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7325436477203284, 0.018417388040294854`]}, 
                    "AccuracyHistory" -> {
                    Around[0.5581071261011948, 0.024518115556319848`]}, 
                    "IterationHistory" -> {8}, 
                    "TimeHistory" -> {{
                    0.8602575`7.386173461123625, 
                    0.9016896`7.406602054089646}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5811640552381859, 0.07644949891103252], 
                    "Accuracy" -> 
                    Around[0.7328718377865611, 0.04413256240284363], 
                    "EvaluationTime" -> 0.00007943282347242814, "TestSize" -> 
                    200, "ModelMemory" -> 116456, 
                    "ModelUtility" -> -0.17641913790347674`, "Round" -> 3, 
                    "Iteration" -> 10, 
                    "Time" -> {
                    1.4617951`7.616431495272595, 1.5375504`7.638374354095061},
                     "TrainingSize" -> 150, "TrainingTime" -> 
                    0.05011872336272722, "TrainingMemory" -> 344232, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5811640552381859, 0.05405795909830467]}, 
                    "AccuracyHistory" -> {
                    Around[0.7328718377865611, 0.031206434146189198`]}, 
                    "IterationHistory" -> {10}, 
                    "TimeHistory" -> {{
                    1.4617951`7.616431495272595, 
                    1.5375504`7.638374354095061}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.6619114316364313, 0.0983222308445512], 
                    "Accuracy" -> 
                    Around[0.7151135056570725, 0.04697732736287493], 
                    "EvaluationTime" -> 0.00019563691297431654`, "TestSize" -> 
                    183, "ModelMemory" -> 126744, 
                    "ModelUtility" -> -0.30982598949378803`, "Round" -> 4, 
                    "Iteration" -> 16, 
                    "Time" -> {
                    2.760975`7.892607467715383, 3.0294067`7.93290257508537}, 
                    "TrainingSize" -> 733, "TrainingTime" -> 
                    0.25118864315095796`, "TrainingMemory" -> 647656, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6619114316364313, 0.06952431617157127]}, 
                    "AccuracyHistory" -> {
                    Around[0.7151135056570725, 0.033217986740309215`]}, 
                    "IterationHistory" -> {16}, 
                    "TimeHistory" -> {{
                    2.760975`7.892607467715383, 
                    3.0294067`7.93290257508537}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 0.00019563691297431654`, 
                    "MeanCrossEntropy" -> 
                    Around[0.6619114316364313, 0.0983222308445512], 
                    "ModelMemory" -> 126744, "TrainingMemory" -> 647656, 
                    "TrainingTime" -> 0.3338527556548422|>, "Index" -> 5|>, <|
                 "Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 250|>, 
                    "LearningRate" -> <|"Value" -> 0.02|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 35|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.7501674494578778, 0.030161489776127655`], 
                    "Accuracy" -> 
                    Around[0.5581071261011948, 0.03467385154357829], 
                    "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 
                    400, "ModelMemory" -> 20408, 
                    "ModelUtility" -> -0.41371141943044065`, "Round" -> 1, 
                    "Iteration" -> 4, 
                    "Time" -> {
                    0.6275358`7.249183500221088, 0.6679413`7.276283290992104},
                     "TrainingSize" -> 10, "TrainingTime" -> 
                    0.01995262314968879, "TrainingMemory" -> 71560, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7501674494578778, 0.021327393951388586`]}, 
                    "AccuracyHistory" -> {
                    Around[0.5581071261011948, 0.024518115556319848`]}, 
                    "IterationHistory" -> {4}, 
                    "TimeHistory" -> {{
                    0.6275358`7.249183500221088, 
                    0.6679413`7.276283290992104}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.7144770034472671, 0.023128380941041672`], 
                    "Accuracy" -> 
                    Around[0.5817453136035826, 0.03073654457077169], 
                    "EvaluationTime" -> 0.000031622776601683795`, "TestSize" -> 
                    500, "ModelMemory" -> 20408, 
                    "ModelUtility" -> -0.36341001847036114`, "Round" -> 2, 
                    "Iteration" -> 6, 
                    "Time" -> {
                    0.7610455`7.332955615848956, 0.8106776`7.360393166598611},
                     "TrainingSize" -> 40, "TrainingTime" -> 
                    0.025118864315095794`, "TrainingMemory" -> 74952, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7144770034472671, 0.01635423500127627]}, 
                    "AccuracyHistory" -> {
                    Around[0.5817453136035826, 0.02173401909623522]}, 
                    "IterationHistory" -> {6}, 
                    "TimeHistory" -> {{
                    0.7610455`7.332955615848956, 
                    0.8106776`7.360393166598611}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.6219882040122822, 0.03416539511339028], 
                    "Accuracy" -> 
                    Around[0.7580392335776497, 0.03465098599375243], 
                    "EvaluationTime" -> 0.00008628854898161877, "TestSize" -> 
                    300, "ModelMemory" -> 116264, 
                    "ModelUtility" -> -0.22926416337578592`, "Round" -> 3, 
                    "Iteration" -> 11, 
                    "Time" -> {
                    1.541631`7.639525428273607, 1.6467425`7.668170687643206}, 
                    "TrainingSize" -> 150, "TrainingTime" -> 
                    0.07943282347242814, "TrainingMemory" -> 340624, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6219882040122822, 0.024158582566595997`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7580392335776497, 0.024501947170982422`]}, 
                    "IterationHistory" -> {11}, 
                    "TimeHistory" -> {{
                    1.541631`7.639525428273607, 
                    1.6467425`7.668170687643206}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5710632922634249, 0.0457030904868237], 
                    "Accuracy" -> 
                    Around[0.7137430526312046, 0.047120435442990764`], 
                    "EvaluationTime" -> 0.00028183278552662615`, "TestSize" -> 
                    183, "ModelMemory" -> 131000, 
                    "ModelUtility" -> -0.14879859815015772`, "Round" -> 4, 
                    "Iteration" -> 18, 
                    "Time" -> {
                    3.3696147`7.979125237622371, 3.786906`8.029829518530196}, 
                    "TrainingSize" -> 733, "TrainingTime" -> 
                    0.3981071705534972, "TrainingMemory" -> 750696, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5710632922634249, 0.032316965204415425`]}, 
                    "AccuracyHistory" -> {
                    Around[0.7137430526312046, 0.03331917943420171]}, 
                    "IterationHistory" -> {18}, 
                    "TimeHistory" -> {{
                    3.3696147`7.979125237622371, 
                    3.786906`8.029829518530196}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 0.00028183278552662615`, 
                    "MeanCrossEntropy" -> 
                    Around[0.5710632922634249, 0.0457030904868237], 
                    "ModelMemory" -> 131000, "TrainingMemory" -> 750696, 
                    "TrainingTime" -> 0.517450806269748|>, "Index" -> 6|>, <|
                 "Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 13|>, 
                    "LearningRate" -> <|"Value" -> 0.1|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 15|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 7|>, <|
                 "Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 500|>, 
                    "LearningRate" -> <|"Value" -> 0.04|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 35|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 8|>, <|
                 "Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 13|>, 
                    "LearningRate" -> <|"Value" -> 0.1|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 3|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[1.644142368662859, 0.388073456749626], "Accuracy" -> 
                    Around[0.7377640444607705, 0.06204864904812289], 
                    "EvaluationTime" -> 0.0006309573444801931, "TestSize" -> 
                    100, "ModelMemory" -> 115184, 
                    "ModelUtility" -> -1.236518089611049, "Round" -> 1, 
                    "Iteration" -> 13, 
                    "Time" -> {
                    1.7579557`7.69655292027015, 2.0639464`7.766243408114665}, 
                    "TrainingSize" -> 10, "TrainingTime" -> 
                    0.25118864315095796`, "TrainingMemory" -> 310664, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[1.644142368662859, 0.2744093728661649]}, 
                    "AccuracyHistory" -> {
                    Around[0.7377640444607705, 0.04387502050539191]}, 
                    "IterationHistory" -> {13}, 
                    "TimeHistory" -> {{
                    1.7579557`7.69655292027015, 
                    2.0639464`7.766243408114665}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 0.0006309573444801931, 
                    "MeanCrossEntropy" -> 
                    Around[1.644142368662859, 0.388073456749626], 
                    "ModelMemory" -> 115184, "TrainingMemory" -> 310664, 
                    "TrainingTime" -> 2.5520766144137323`|>, "Index" -> 9|>, <|
                 "Value" -> "GradientBoostedTrees", 
                  "Options" -> <|
                   "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                    MaxTrainingRounds -> <|"Value" -> 50|>, 
                    "LeavesNumber" -> <|"Value" -> 3|>, 
                    "LearningRate" -> <|"Value" -> 0.1|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "MaxBinNumber" -> <|"Value" -> 255|>, 
                    "ThreadNumber" -> <|"Value" -> 6|>, 
                    "MaxDepth" -> <|"Value" -> 6|>, 
                    "LeafSize" -> <|"Value" -> 15|>, 
                    "FeatureFraction" -> <|"Value" -> 1|>, 
                    "BaggingFraction" -> <|"Value" -> 1|>, 
                    "BaggingFrequency" -> <|"Value" -> 0|>, 
                    "MinGainToSplit" -> <|"Value" -> 0|>, 
                    "L1Regularization" -> <|"Value" -> 0|>, 
                    "L2Regularization" -> <|"Value" -> 0|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.7292212000857379, 0.0267820527255058], 
                    "Accuracy" -> 
                    Around[0.5817453136035826, 0.03073654457077169], 
                    "EvaluationTime" -> 0.000026419646772413396`, "TestSize" -> 
                    500, "ModelMemory" -> 20408, 
                    "ModelUtility" -> -0.3847015113993273, "Round" -> 1, 
                    "Iteration" -> 3, 
                    "Time" -> {
                    0.5851582`7.218818288806876, 
                    0.6245352`7.2471019145647295}, "TrainingSize" -> 10, 
                    "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                    71560, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7292212000857379, 0.018937771096300807`]}, 
                    "AccuracyHistory" -> {
                    Around[0.5817453136035826, 0.02173401909623522]}, 
                    "IterationHistory" -> {3}, 
                    "TimeHistory" -> {{
                    0.5851582`7.218818288806876, 
                    0.6245352`7.2471019145647295}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.7072613236167629, 0.0776220462310408], 
                    "Accuracy" -> 
                    Around[0.6585561236686911, 0.047300804880099266`], 
                    "EvaluationTime" -> 0.0001, "TestSize" -> 200, 
                    "ModelMemory" -> 115208, 
                    "ModelUtility" -> -0.3685297863614859, "Round" -> 2, 
                    "Iteration" -> 5, 
                    "Time" -> {
                    0.6710439`7.27829592633874, 0.7559393`7.330031917656687}, 
                    "TrainingSize" -> 40, "TrainingTime" -> 
                    0.0630957344480193, "TrainingMemory" -> 302720, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7072613236167629, 0.054887075259544636`]}, 
                    "AccuracyHistory" -> {
                    Around[0.6585561236686911, 0.03344671988629993]}, 
                    "IterationHistory" -> {5}, 
                    "TimeHistory" -> {{
                    0.6710439`7.27829592633874, 
                    0.7559393`7.330031917656687}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5691119844858452, 0.05434206074258742], 
                    "Accuracy" -> 
                    Around[0.7334427199216971, 0.035794666847866724`], 
                    "EvaluationTime" -> 0.00010177512155061496`, "TestSize" -> 
                    300, "ModelMemory" -> 116264, 
                    "ModelUtility" -> -0.14841139531738223`, "Round" -> 3, 
                    "Iteration" -> 12, 
                    "Time" -> {
                    1.6508251`7.669246056989828, 1.7539576`7.695564084060425},
                     "TrainingSize" -> 150, "TrainingTime" -> 
                    0.0630957344480193, "TrainingMemory" -> 339712, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5691119844858452, 0.03842563965473483]}, 
                    "AccuracyHistory" -> {
                    Around[0.7334427199216971, 0.02531065165843986]}, 
                    "IterationHistory" -> {12}, 
                    "TimeHistory" -> {{
                    1.6508251`7.669246056989828, 
                    1.7539576`7.695564084060425}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.5632726895592431, 0.06487961999444827], 
                    "Accuracy" -> 
                    Around[0.7245894532060074, 0.04656731185550783], 
                    "EvaluationTime" -> 0.00014125099412355812`, "TestSize" -> 
                    183, "ModelMemory" -> 116264, 
                    "ModelUtility" -> -0.14195631906534933`, "Round" -> 4, 
                    "Iteration" -> 17, 
                    "Time" -> {
                    3.2611775`7.964919430809331, 3.3644929`7.978464609655476},
                     "TrainingSize" -> 733, "TrainingTime" -> 
                    0.07943282347242814, "TrainingMemory" -> 423448, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.5632726895592431, 0.04587681925888069]}, 
                    "AccuracyHistory" -> {
                    Around[0.7245894532060074, 0.032928061994658295`]}, 
                    "IterationHistory" -> {17}, 
                    "TimeHistory" -> {{
                    3.2611775`7.964919430809331, 
                    3.3644929`7.978464609655476}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 0.00014125099412355812`, 
                    "MeanCrossEntropy" -> 
                    Around[0.5632726895592431, 0.06487961999444827], 
                    "ModelMemory" -> 116264, "TrainingMemory" -> 423448, 
                    "TrainingTime" -> 0.11921656080418289`|>, "Index" -> 
                  10|>|>, 
               TypeSystem`Assoc[
                TypeSystem`Struct[{"Value", "Options"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["GradientBoostedTrees"]], 
                  TypeSystem`Assoc[TypeSystem`AnyType, 
                   TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 16]}], 
                
                TypeSystem`Struct[{
                 "Experiments", "PredictedPerformances", "Index"}, {
                  TypeSystem`Vector[
                   
                   TypeSystem`Struct[{
                    "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                    "TestSize", "ModelMemory", "ModelUtility", "Round", 
                    "Iteration", "Time", "TrainingSize", "TrainingTime", 
                    "TrainingMemory", "ExperimentCount", 
                    "MeanCrossEntropyHistory", "AccuracyHistory", 
                    "IterationHistory", "TimeHistory"}, {
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`AnyLength], 
                  
                  TypeSystem`Struct[{
                   "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                    "TrainingMemory", "TrainingTime"}, {
                    TypeSystem`Atom[Real], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real]}], 
                  TypeSystem`Atom[Integer]}], 10], <||>], 
             "TrainingSizes" -> {10, 40, 150, 733}, "MaxTrainingSize" -> 916, 
             "PreprocessorEvaluationTime" -> 5.521875*^-6, 
             "PreprocessorMemory" -> 99192, "InputDimension" -> 6, 
             "OutputDimension" -> 1, 
             "BaselineLogProbability" -> -0.6652042646399302, 
             "VariableBudget" -> True, 
             "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
             False, "NaturalStop" -> True, "AbortStop" -> False, 
             "RoundPartitioning" -> 
             Dataset[{<|
                "TrainingSizes" -> 10, "TimeBudgets" -> 0.3412576088571056, 
                 "ElapsedTimes" -> 0.7909872, "ExperimentCounts" -> 6|>, <|
                "TrainingSizes" -> 40, "TimeBudgets" -> 0.4875108697958651, 
                 "ElapsedTimes" -> 0.7320677, "ExperimentCounts" -> 4|>, <|
                "TrainingSizes" -> 150, "TimeBudgets" -> 0.6964440997083794, 
                 "ElapsedTimes" -> 0.7198219, "ExperimentCounts" -> 5|>, <|
                "TrainingSizes" -> 733, "TimeBudgets" -> 0.9949201424405412, 
                 "ElapsedTimes" -> 1.2668333, "ExperimentCounts" -> 3|>}, 
               TypeSystem`Vector[
                
                TypeSystem`Struct[{
                 "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                  "ExperimentCounts"}, {
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
           None, "Log" -> <|
            "Example" -> 
             MachineLearning`MLDataset[<|
               "f1" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                  "ID" -> 7168142382301173801|>, 
                "f2" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                  "ID" -> 1978735388468315165|>, 
                "f3" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, 
                  "ID" -> 9071588231046195481|>|>, <|
               "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                "LogDensityRatios" -> 0, "RawExample" -> False|>], 
             "TrainingTime" -> 4.1799992, "MaxTrainingMemory" -> 2189072, 
             "DataMemory" -> 227152, "FunctionMemory" -> 428104, 
             "LanguageVersion" -> {14.1, 0}, "Date" -> 
             DateObject[{2024, 10, 11, 15, 6, 24.085697`9.134334142291314}, 
               "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
             "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
             "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
        "TestSet" -> <|
         "Input" -> {{"1st", 29., "female"}, {"1st", 0.9167, "male"}, {
            "1st", 2., "female"}, {"1st", 30., "male"}, {
            "1st", 48., "male"}, {"1st", 63., "female"}, {
            "1st", 71., "male"}, {"1st", 47., "male"}, {
            "1st", 18., "female"}, {"1st", 24., "female"}, {
            "1st", 26., "female"}, {"1st", 80., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 50., "female"}, {
            "1st", 32., "female"}, {"1st", 36., "male"}, {
            "1st", 47., "female"}, {"1st", 26., "male"}, {
            "1st", 42., "female"}, {"1st", 25., "male"}, {
            "1st", 35., "female"}, {"1st", 45., "male"}, {
            "1st", 40., "male"}, {"1st", 30., "female"}, {
            "1st", 22., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 41., "male"}, {"1st", 48., "male"}, {
            "1st", 
             Missing[], "male"}, {"1st", 44., "female"}, {
            "1st", 59., "female"}, {"1st", 45., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 42., "male"}, {
            "1st", 53., "female"}, {"1st", 36., "male"}, {
            "1st", 58., "female"}, {"1st", 28., "male"}, {
            "1st", 17., "male"}, {"1st", 14., "female"}, {
            "1st", 36., "female"}, {"1st", 49., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 36., "male"}, {
            "1st", 46., "male"}, {"1st", 33., "female"}, {
            "1st", 36., "female"}, {"1st", 30., "female"}, {
            "1st", 45., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 
             Missing[], "male"}, {"1st", 27., "male"}, {
            "1st", 26., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 47., "male"}, {"1st", 37., "male"}, {
            "1st", 39., "male"}, {"1st", 38., "female"}, {
            "1st", 51., "male"}, {"1st", 27., "male"}, {"1st", 31., "male"}, {
            "1st", 31., "male"}, {"1st", 17., "female"}, {
            "1st", 4., "male"}, {"1st", 54., "female"}, {
            "1st", 50., "male"}, {"1st", 48., "female"}, {
            "1st", 48., "female"}, {"1st", 49., "male"}, {
            "1st", 39., "male"}, {"1st", 54., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "female"}, {"1st", 36., "male"}, {
            "1st", 28., "female"}, {"1st", 23., "female"}, {
            "1st", 19., "male"}, {"1st", 64., "male"}, {"1st", 50., "male"}, {
            "1st", 43., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 22., "female"}, {
            "1st", 60., "male"}, {"1st", 48., "female"}, {
            "1st", 37., "male"}, {"1st", 35., "female"}, {
            "1st", 35., "female"}, {"1st", 22., "female"}, {
            "1st", 45., "female"}, {"1st", 24., "male"}, {
            "1st", 49., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 71., "male"}, {
            "1st", 19., "female"}, {"1st", 38., "male"}, {
            "1st", 58., "female"}, {"1st", 46., "male"}, {
            "1st", 25., "male"}, {"1st", 25., "female"}, {
            "1st", 48., "male"}, {"1st", 49., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 45., "male"}, {
            "1st", 35., "female"}, {"1st", 40., "male"}, {
            "1st", 27., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 24., "female"}, {
            "1st", 55., "male"}, {"1st", 52., "female"}, {
            "1st", 42., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 55., "male"}, {
            "1st", 16., "female"}, {"1st", 44., "female"}, {
            "1st", 51., "female"}, {"1st", 42., "male"}, {
            "1st", 35., "female"}, {"1st", 35., "male"}, {
            "1st", 38., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 38., "female"}, {
            "1st", 32.5, "male"}, {"1st", 58., "male"}, {
            "1st", 41., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 42., "male"}, {
            "1st", 45., "female"}, {"1st", 39., "female"}, {
            "1st", 49., "female"}, {"1st", 30., "female"}, {
            "1st", 35., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 42., "male"}, {
            "1st", 55., "female"}, {"1st", 16., "female"}, {
            "1st", 21., "female"}, {"1st", 30., "male"}, {
            "1st", 58., "female"}, {"1st", 30., "male"}, {
            "1st", 18., "female"}, {"1st", 24., "female"}, {
            "1st", 46., "male"}, {"1st", 54., "male"}, {"1st", 36., "male"}, {
            "1st", 
             Missing[], "female"}, {"1st", 30., "male"}, {
            "1st", 55., "male"}, {"1st", 47., "male"}, {"1st", 37., "male"}, {
            "1st", 31., "female"}, {"1st", 23., "female"}, {
            "1st", 58., "male"}, {"1st", 19., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 65., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 45.5, "male"}, {
            "1st", 23., "male"}, {"1st", 29., "male"}, {"1st", 18., "male"}, {
            "1st", 17., "female"}, {"1st", 30., "female"}, {
            "1st", 47., "male"}, {"1st", 56., "female"}, {
            "1st", 38., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "male"}, {"1st", 31., "male"}, {"1st", 45., "male"}, {
            "1st", 
             Missing[], "male"}, {"1st", 36., "male"}, {
            "1st", 33., "female"}, {"1st", 55., "male"}, {
            "1st", 54., "female"}, {"1st", 33., "male"}, {
            "1st", 13., "male"}, {"1st", 18., "female"}, {
            "1st", 21., "female"}, {"1st", 48., "female"}, {
            "1st", 24., "female"}, {"1st", 35., "female"}, {
            "1st", 40., "female"}, {"1st", 50., "male"}, {
            "1st", 39., "female"}, {"1st", 56., "male"}, {
            "1st", 28., "male"}, {"1st", 24., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 18., "female"}, {
            "1st", 24., "male"}, {"1st", 23., "female"}, {
            "1st", 6., "male"}, {"1st", 45., "male"}, {"1st", 
             Missing[], "female"}, {"1st", 32., "male"}, {
            "1st", 62., "male"}, {"1st", 43., "female"}, {
            "1st", 62., "female"}, {"1st", 67., "male"}, {
            "1st", 63., "female"}, {"1st", 48., "female"}, {
            "1st", 18., "female"}, {"1st", 52., "male"}, {
            "1st", 39., "female"}, {"1st", 49., "male"}, {
            "1st", 17., "male"}, {"1st", 39., "female"}, {"1st", 
             Missing[], "female"}, {"1st", 31., "male"}, {
            "1st", 40., "male"}, {"1st", 61., "male"}, {
            "1st", 35., "female"}, {"1st", 64., "male"}, {
            "1st", 60., "female"}, {"1st", 55., "female"}, {
            "1st", 31., "female"}, {"1st", 57., "male"}, {
            "1st", 50., "male"}, {"1st", 27., "male"}, {
            "1st", 21., "female"}, {"1st", 51., "male"}, {
            "1st", 31., "female"}, {"1st", 36., "female"}, {
            "2nd", 30., "male"}, {"2nd", 28., "female"}, {
            "2nd", 25., "male"}, {"2nd", 36., "female"}, {
            "2nd", 57., "male"}, {"2nd", 18., "male"}, {"2nd", 23., "male"}, {
            "2nd", 36., "female"}, {"2nd", 51., "male"}, {
            "2nd", 32., "male"}, {"2nd", 19., "female"}, {
            "2nd", 28., "male"}, {"2nd", 1., "male"}, {
            "2nd", 12., "female"}, {"2nd", 36., "female"}, {
            "2nd", 19., "female"}, {"2nd", 26., "male"}, {
            "2nd", 42., "male"}, {"2nd", 27., "male"}, {
            "2nd", 24., "female"}, {"2nd", 15., "female"}, {
            "2nd", 60., "male"}, {"2nd", 20., "female"}, {
            "2nd", 25., "male"}, {"2nd", 36., "female"}, {
            "2nd", 25., "male"}, {"2nd", 42., "female"}, {
            "2nd", 0.8333, "male"}, {"2nd", 26., "male"}, {
            "2nd", 35., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 44., "female"}, {
            "2nd", 52., "male"}, {"2nd", 29., "female"}, {
            "2nd", 25., "female"}, {"2nd", 45., "female"}, {
            "2nd", 29., "male"}, {"2nd", 28., "female"}, {
            "2nd", 29., "male"}, {"2nd", 28., "male"}, {
            "2nd", 8., "female"}, {"2nd", 31., "female"}, {
            "2nd", 30., "female"}, {"2nd", 
             Missing[], "female"}, {"2nd", 21., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 8., "male"}, {"2nd", 18., "male"}, {
            "2nd", 28., "female"}, {"2nd", 29., "male"}, {
            "2nd", 24., "female"}, {"2nd", 18., "female"}, {
            "2nd", 8., "male"}, {"2nd", 42., "male"}, {
            "2nd", 34., "female"}, {"2nd", 27., "female"}, {
            "2nd", 23., "male"}, {"2nd", 21., "male"}, {"2nd", 18., "male"}, {
            "2nd", 29., "female"}, {"2nd", 18., "male"}, {
            "2nd", 36., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 38., "female"}, {
            "2nd", 38., "male"}, {"2nd", 34., "male"}, {
            "2nd", 34., "female"}, {"2nd", 16., "male"}, {
            "2nd", 26., "male"}, {"2nd", 21., "male"}, {"2nd", 21., "male"}, {
            "2nd", 24., "male"}, {"2nd", 24., "male"}, {"2nd", 34., "male"}, {
            "2nd", 30., "male"}, {"2nd", 52., "male"}, {"2nd", 30., "male"}, {
            "2nd", 6., "female"}, {"2nd", 28., "male"}, {
            "2nd", 30., "male"}, {"2nd", 7., "female"}, {
            "2nd", 45., "female"}, {"2nd", 24., "female"}, {
            "2nd", 24., "female"}, {"2nd", 49., "male"}, {
            "2nd", 55., "female"}, {"2nd", 24., "male"}, {
            "2nd", 32., "male"}, {"2nd", 21., "male"}, {
            "2nd", 18., "female"}, {"2nd", 20., "female"}, {
            "2nd", 23., "male"}, {"2nd", 44., "male"}, {"2nd", 21., "male"}, {
            "2nd", 42., "male"}, {"2nd", 63., "male"}, {"2nd", 33., "male"}, {
            "2nd", 42., "male"}, {"2nd", 24., "female"}, {
            "2nd", 22., "male"}, {"2nd", 23., "female"}, {
            "2nd", 24., "female"}, {"2nd", 
             Missing[], "female"}, {"2nd", 45., "female"}, {
            "2nd", 57., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 26., "female"}, {
            "2nd", 30., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 1., "female"}, {
            "2nd", 25., "male"}, {"2nd", 22., "female"}, {
            "2nd", 17., "female"}, {"2nd", 24., "male"}, {
            "2nd", 50., "male"}, {"2nd", 57., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 1., "male"}, {"2nd", 31., "male"}, {
            "2nd", 24., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 40., "male"}, {"2nd", 32., "male"}, {
            "2nd", 30., "male"}, {"2nd", 13., "female"}, {
            "2nd", 48., "male"}, {"2nd", 70., "male"}, {"2nd", 27., "male"}, {
            "2nd", 54., "male"}, {"2nd", 39., "male"}, {"2nd", 16., "male"}, {
            "2nd", 62., "male"}, {"2nd", 14., "female"}, {
            "2nd", 2., "male"}, {"2nd", 3., "male"}, {"2nd", 26., "male"}, {
            "2nd", 28., "male"}, {"2nd", 39., "male"}, {"2nd", 22., "male"}, {
            "2nd", 
             Missing[], "male"}, {"2nd", 23., "male"}, {"2nd", 29., "male"}, {
            "2nd", 28., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 50., "female"}, {
            "2nd", 19., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 41., "male"}, {
            "2nd", 21., "female"}, {"2nd", 43., "male"}, {
            "2nd", 32., "female"}, {"2nd", 34., "male"}, {
            "2nd", 30., "male"}, {"2nd", 27., "male"}, {
            "2nd", 2., "female"}, {"2nd", 33., "female"}, {
            "2nd", 34., "male"}, {"2nd", 30., "female"}, {
            "2nd", 28., "female"}, {"2nd", 23., "male"}, {
            "2nd", 3., "male"}, {"2nd", 24., "female"}, {
            "2nd", 19., "male"}, {"2nd", 21., "female"}, {
            "2nd", 27., "male"}, {"2nd", 25., "female"}, {
            "2nd", 18., "female"}, {"2nd", 20., "female"}, {
            "2nd", 30., "female"}, {"2nd", 30., "female"}, {
            "2nd", 35., "male"}, {"2nd", 41., "male"}, {"2nd", 25., "male"}, {
            "2nd", 50., "female"}, {"2nd", 23., "male"}, {
            "2nd", 28., "female"}, {"2nd", 27., "female"}, {
            "2nd", 29., "male"}, {"2nd", 27., "female"}, {
            "2nd", 40., "male"}, {"2nd", 23., "male"}, {
            "2nd", 12., "female"}, {"2nd", 40., "female"}, {
            "2nd", 32.5, "female"}, {"2nd", 27., "male"}, {
            "2nd", 29., "female"}, {"2nd", 2., "male"}, {
            "2nd", 0.9167, "female"}, {"2nd", 5., "female"}, {
            "2nd", 33., "female"}, {"2nd", 66., "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 
             Missing[], "male"}, {"2nd", 26., "female"}, {
            "2nd", 24., "female"}, {"3rd", 16., "male"}, {
            "3rd", 35., "female"}, {"3rd", 16., "female"}, {
            "3rd", 25., "male"}, {"3rd", 20., "male"}, {
            "3rd", 18., "female"}, {"3rd", 30., "male"}, {
            "3rd", 26., "male"}, {"3rd", 0.8333, "male"}, {
            "3rd", 18., "female"}, {"3rd", 26., "male"}, {
            "3rd", 26., "male"}, {"3rd", 20., "male"}, {"3rd", 24., "male"}, {
            "3rd", 25., "male"}, {"3rd", 35., "male"}, {"3rd", 18., "male"}, {
            "3rd", 32., "male"}, {"3rd", 4., "male"}, {"3rd", 2., "female"}, {
            "3rd", 9., "female"}, {"3rd", 27., "male"}, {
            "3rd", 39., "female"}, {"3rd", 20., "male"}, {
            "3rd", 26., "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 24., "male"}, {
            "3rd", 35., "male"}, {"3rd", 5., "male"}, {"3rd", 3., "male"}, {
            "3rd", 13., "male"}, {"3rd", 5., "female"}, {
            "3rd", 23., "male"}, {"3rd", 38., "female"}, {
            "3rd", 45., "female"}, {"3rd", 21., "male"}, {
            "3rd", 23., "male"}, {"3rd", 17., "female"}, {
            "3rd", 30., "male"}, {"3rd", 23., "male"}, {
            "3rd", 13., "female"}, {"3rd", 32., "male"}, {
            "3rd", 33., "female"}, {"3rd", 0.75, "female"}, {
            "3rd", 0.75, "female"}, {"3rd", 24., "female"}, {
            "3rd", 18., "female"}, {"3rd", 40., "male"}, {
            "3rd", 26., "male"}, {"3rd", 20., "male"}, {
            "3rd", 45., "female"}, {"3rd", 27., "female"}, {
            "3rd", 22., "male"}, {"3rd", 19., "male"}, {"3rd", 22., "male"}, {
            "3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 32., "male"}, {
            "3rd", 21., "male"}, {"3rd", 18., "male"}, {"3rd", 6., "male"}, {
            "3rd", 9., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 40., "male"}, {
            "3rd", 32., "female"}, {"3rd", 21., "male"}, {
            "3rd", 22., "female"}, {"3rd", 20., "female"}, {
            "3rd", 29., "male"}, {"3rd", 35., "male"}, {"3rd", 19., "male"}, {
            "3rd", 21., "female"}, {"3rd", 30., "female"}, {
            "3rd", 18., "male"}, {"3rd", 38., "male"}, {"3rd", 17., "male"}, {
            "3rd", 17., "male"}, {"3rd", 21., "female"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 28., "male"}, {
            "3rd", 24., "male"}, {"3rd", 16., "female"}, {
            "3rd", 28., "male"}, {"3rd", 24., "male"}, {"3rd", 18., "male"}, {
            "3rd", 24., "male"}, {"3rd", 36., "male"}, {"3rd", 24., "male"}, {
            "3rd", 31., "male"}, {"3rd", 22., "female"}, {
            "3rd", 30., "female"}, {"3rd", 70.5, "male"}, {
            "3rd", 35., "male"}, {"3rd", 27., "male"}, {"3rd", 19., "male"}, {
            "3rd", 30., "male"}, {"3rd", 9., "male"}, {"3rd", 3., "male"}, {
            "3rd", 59., "male"}, {"3rd", 17., "female"}, {
            "3rd", 22.5, "male"}, {"3rd", 45., "male"}, {
            "3rd", 30., "female"}, {"3rd", 0.3333, "male"}, {
            "3rd", 28., "female"}, {"3rd", 25., "male"}, {
            "3rd", 24., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 36., "female"}, {
            "3rd", 16., "male"}, {"3rd", 1., "male"}, {"3rd", 26., "male"}, {
            "3rd", 33., "female"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 36., "male"}, {
            "3rd", 19., "female"}, {"3rd", 17., "male"}, {
            "3rd", 42., "male"}, {"3rd", 43., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32., "male"}, {"3rd", 19., "male"}, {
            "3rd", 30., "female"}, {"3rd", 24., "female"}, {
            "3rd", 23., "female"}, {"3rd", 33., "male"}, {
            "3rd", 65., "male"}, {"3rd", 18., "male"}, {"3rd", 45., "male"}, {
            "3rd", 
             Missing[], "male"}, {"3rd", 17., "male"}, {"3rd", 15., "male"}, {
            "3rd", 47., "male"}, {"3rd", 5., "female"}, {
            "3rd", 40.5, "male"}, {"3rd", 40.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 26., "male"}, {
            "3rd", 21., "female"}, {"3rd", 9., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {"3rd", 16., "male"}, {
            "3rd", 48., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 9., "male"}, {
            "3rd", 41., "male"}, {"3rd", 31., "female"}, {
            "3rd", 9., "male"}, {"3rd", 1., "male"}, {"3rd", 11., "male"}, {
            "3rd", 10., "female"}, {"3rd", 14., "male"}, {
            "3rd", 43., "female"}, {"3rd", 32., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 28., "male"}, {
            "3rd", 19., "male"}, {"3rd", 24., "female"}, {
            "3rd", 17., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28., "male"}, {"3rd", 20., "male"}, {
            "3rd", 23.5, "male"}, {"3rd", 41., "male"}, {
            "3rd", 26., "male"}, {"3rd", 21., "male"}, {
            "3rd", 45., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 11., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 27., "male"}, {
            "3rd", 26., "female"}, {"3rd", 22., "female"}, {
            "3rd", 28., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "female"}, {
            "3rd", 43., "male"}, {"3rd", 27., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 42., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "female"}, {
            "3rd", 29., "male"}, {"3rd", 21., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 20., "male"}, {"3rd", 48., "male"}, {
            "3rd", 17., "male"}, {"3rd", 34., "male"}, {"3rd", 26., "male"}, {
            "3rd", 29., "male"}, {"3rd", 1., "female"}, {
            "3rd", 19., "male"}, {"3rd", 27., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 23., "male"}, {"3rd", 32., "male"}, {
            "3rd", 27., "male"}, {"3rd", 20., "female"}, {
            "3rd", 21., "female"}, {"3rd", 17., "male"}, {
            "3rd", 30., "male"}, {"3rd", 21., "male"}, {"3rd", 33., "male"}, {
            "3rd", 22., "male"}, {"3rd", 4., "female"}, {
            "3rd", 39., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 44., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "female"}, {
            "3rd", 29., "male"}, {"3rd", 1., "female"}, {
            "3rd", 18., "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 26., "male"}, {"3rd", 29., "male"}, {
            "3rd", 29., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 32., "male"}, {
            "3rd", 34.5, "male"}, {"3rd", 39., "male"}, {
            "3rd", 24., "male"}, {"3rd", 25., "female"}, {
            "3rd", 45., "female"}, {"3rd", 36., "male"}, {
            "3rd", 20., "male"}, {"3rd", 26., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 27., "male"}, {"3rd", 51., "male"}, {
            "3rd", 32., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 29., "male"}, {
            "3rd", 30.5, "female"}, {"3rd", 35., "male"}, {
            "3rd", 33., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 15., "female"}, {
            "3rd", 35., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "male"}, {
            "3rd", 19., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 55.5, "male"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "male"}, {"3rd", 21., "male"}, {
            "3rd", 28., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 6., "male"}, {
            "3rd", 27., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 34., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "male"}, {
            "3rd", 1., "female"}, {"3rd", 20., "male"}, {
            "3rd", 19., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 12., "male"}, {
            "3rd", 14., "female"}, {"3rd", 29., "female"}, {
            "3rd", 28., "male"}, {"3rd", 18., "female"}, {
            "3rd", 26., "female"}, {"3rd", 21., "male"}, {
            "3rd", 39., "male"}, {"3rd", 21., "male"}, {
            "3rd", 28.5, "male"}, {"3rd", 22., "female"}, {
            "3rd", 61., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 23., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 9., "male"}, {
            "3rd", 28., "male"}, {"3rd", 42., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 31., "female"}, {
            "3rd", 28., "male"}, {"3rd", 20., "male"}, {
            "3rd", 23., "female"}, {"3rd", 20., "female"}, {
            "3rd", 20., "male"}, {"3rd", 31., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 2., "male"}, {"3rd", 6., "male"}, {
            "3rd", 8., "female"}, {"3rd", 29., "female"}, {
            "3rd", 1., "male"}, {"3rd", 7., "male"}, {"3rd", 2., "male"}, {
            "3rd", 41., "female"}, {"3rd", 19., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32., "male"}, {
            "3rd", 3., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 22., "male"}, {
            "3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 19., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 38., "male"}, {"3rd", 21., "male"}, {
            "3rd", 10., "male"}, {"3rd", 7., "male"}, {"3rd", 8., "male"}, {
            "3rd", 39., "female"}, {"3rd", 35., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 47., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "male"}, {
            "3rd", 41., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 50., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 14.5, "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "male"}, {
            "3rd", 21., "female"}, {"3rd", 39., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 24., "female"}, {
            "3rd", 4., "female"}, {"3rd", 25., "male"}, {
            "3rd", 20., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 29., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 40., "male"}, {
            "3rd", 21., "male"}, {"3rd", 18., "female"}, {
            "3rd", 10., "male"}, {"3rd", 9., "female"}, {
            "3rd", 40., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 19., "male"}, {
            "3rd", 30., "male"}, {"3rd", 21., "male"}, {
            "3rd", 60.5, "male"}, {"3rd", 19., "male"}, {
            "3rd", 22., "female"}, {"3rd", 31., "male"}, {
            "3rd", 27., "male"}, {"3rd", 2., "female"}, {
            "3rd", 16., "male"}, {"3rd", 44., "male"}, {"3rd", 25., "male"}, {
            "3rd", 74., "male"}, {"3rd", 14., "male"}, {"3rd", 24., "male"}, {
            "3rd", 34., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 16., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {
            "3rd", 18., "female"}, {"3rd", 63., "female"}, {
            "3rd", 11.5, "male"}, {"3rd", 10., "female"}, {
            "3rd", 36., "male"}, {"3rd", 30., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28., "male"}, {"3rd", 28., "male"}, {
            "3rd", 47., "male"}, {"3rd", 31., "male"}, {"3rd", 16., "male"}, {
            "3rd", 31., "female"}, {"3rd", 22., "male"}, {
            "3rd", 20., "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28.5, "male"}, {
            "3rd", 27., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 36., "male"}, {"3rd", 27., "male"}, {
            "3rd", 15., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 14.5, "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 26.5, "male"}, {
            "3rd", 29., "male"}}, 
          "Output" -> {
           "survived", "survived", "died", "died", "survived", "survived", 
            "died", "died", "survived", "survived", "survived", "survived", 
            "died", "survived", "survived", "died", "survived", "survived", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "survived", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "survived", "survived", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "survived", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "survived", "died", "survived", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "survived", "died", "died", "survived", "died", "died", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "survived", "survived", "survived", "survived", "survived", 
            "died", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "survived", "died", "survived", "survived", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "died", "survived", "survived", "survived", "died", 
            "died", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "survived", "died", "died", "died", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "survived", "survived", "survived", "died", "died", "died", 
            "survived", "survived", "died", "survived", "died", "survived", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "survived", "survived", "survived", "died", "survived", 
            "survived", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "survived", "died", "died", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "survived", "died", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "died", "survived", "died", "died", "died", "survived", "died", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "survived", "survived", "survived", "died", "survived", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "survived", "survived", "died", "died", "survived", "survived", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "survived", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "survived", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "survived", "survived", "survived", 
            "survived", "died", "died", "survived", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "died", "died", "survived", "died", "died", 
            "died", "died", "survived", "died", "died", "died", "died", 
            "died", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "survived", "died", "died", "died", "died", 
            "died", "died", "survived", "survived", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "died", "survived", "survived", "survived", "survived", "died", 
            "died", "survived", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "died", "died", "died", "survived", "died", "survived", 
            "died", "survived", "died", "died", "died", "survived", "died", 
            "died", "died", "died", "died", "survived", "died", "died", 
            "survived", "survived", "died", "died", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "survived", 
            "died", "died", "survived", "died", "survived", "survived", 
            "died", "survived", "died", "died", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "survived", "died", "died", "survived", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "died", "died", 
            "died", "died", "survived", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "died", 
            "survived", "survived", "died", "survived", "survived", "died", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "died", "died", "survived", "survived", "died", 
            "survived", "died", "died", "survived", "died", "died", 
            "survived", "died", "died", "died", "died", "survived", 
            "survived", "survived", "survived", "survived", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "survived", "survived", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "survived", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "died", "survived", "died", "died", "died", "died", 
            "survived", "survived", "survived", "died", "died", "died", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "survived", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "survived", "died", "died", "died", 
            "survived", "survived", "survived", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died"}|>, 
        "Predictions" -> {
         "survived", "survived", "survived", "died", "died", "survived", 
          "died", "died", "survived", "survived", "survived", "died", "died", 
          "survived", "survived", "died", "survived", "died", "survived", 
          "died", "survived", "died", "died", "survived", "survived", "died", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "died", "survived", "died", "survived", "died", "died", "survived", 
          "survived", "died", "survived", "died", "died", "survived", 
          "survived", "survived", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "died", "survived", "died", 
          "died", "died", "died", "survived", "survived", "survived", "died", 
          "survived", "survived", "died", "died", "survived", "died", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "died", "survived", "survived", "died", "survived", "died", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "survived", "died", "survived", "died", "survived", "died", "died", 
          "survived", "died", "survived", "died", "died", "survived", "died", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "died", "survived", "survived", "survived", "died", "survived", 
          "died", "died", "died", "survived", "died", "died", "died", 
          "survived", "died", "survived", "survived", "survived", "survived", 
          "died", "died", "died", "survived", "survived", "survived", "died", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "survived", "survived", 
          "died", "survived", "died", "died", "died", "died", "died", "died", 
          "died", "survived", "survived", "died", "survived", "died", "died", 
          "died", "died", "died", "died", "died", "survived", "died", 
          "survived", "died", "died", "survived", "survived", "survived", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "died", "died", "survived", "died", "survived", "survived", 
          "died", "survived", "died", "died", "survived", "survived", "died", 
          "survived", "survived", "survived", "died", "survived", "died", 
          "died", "survived", "survived", "died", "died", "died", "survived", 
          "died", "survived", "survived", "survived", "died", "died", "died", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "died", "survived", "died", "died", "died", "survived", "died", 
          "died", "survived", "died", "survived", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "survived", "died", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "died", "survived", "died", "survived", "died", "survived", 
          "survived", "survived", "died", "survived", "died", "died", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "died", "died", "survived", "died", "survived", "survived", "died", 
          "died", "survived", "survived", "died", "died", "died", "survived", 
          "died", "died", "died", "survived", "died", "died", "survived", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "survived", "survived", 
          "survived", "survived", "died", "survived", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "survived", "survived", 
          "survived", "survived", "died", "died", "survived", "died", "died", 
          "survived", "died", "survived", "survived", "died", "died", 
          "survived", "died", "survived", "died", "survived", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "survived", "died", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "died", "survived", "survived", "died", "survived", "survived", 
          "died", "died", "survived", "died", "survived", "died", "survived", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "died", "survived", "died", "survived", "survived", "died", 
          "survived", "died", "died", "survived", "survived", "survived", 
          "died", "survived", "died", "survived", "survived", "survived", 
          "died", "died", "died", "survived", "survived", "died", "survived", 
          "survived", "died", "died", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "survived", "died", "survived", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "survived", "died", "survived", "survived", "died", "died", 
          "survived", "died", "died", "survived", "died", "survived", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "died", "survived", "survived", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "survived", "died", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "survived", 
          "died", "survived", "died", "died", "died", "died", "survived", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "died", "died", "survived", "survived", "survived", "died", "died", 
          "died", "died", "died", "died", "died", "died", "survived", "died", 
          "died", "died", "died", "survived", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "survived", "died", 
          "died", "died", "died", "died", "died", "died", "died", "survived", 
          "died", "died", "died", "survived", "died", "survived", "died", 
          "died", "died", "died", "died", "survived", "survived", "died", 
          "died", "died", "died", "died", "died", "died", "died", "survived", 
          "survived", "died", "died", "survived", "died", "survived", 
          "survived", "died", "survived", "survived", "died", "survived", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "survived", 
          "died", "survived", "survived", "died", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "survived", "died", 
          "died", "died", "died", "died", "survived", "died", "survived", 
          "died", "died", "died", "died", "survived", "died", "died", "died", 
          "died", "died", "died", "survived", "survived", "survived", 
          "survived", "died", "died", "died", "died", "survived", "survived", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "survived", "died", "died", "survived", "died", 
          "died", "died", "survived", "survived", "survived", "survived", 
          "survived", "died", "died", "survived", "survived", "survived", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "survived", "died", "survived", "died", "died", "died", "died", 
          "died", "survived", "died", "survived", "survived", "died", 
          "survived", "survived", "died", "survived", "died", "survived", 
          "died", "died", "died", "survived", "survived", "died", "survived", 
          "survived", "died", "died", "died", "died", "survived", "died", 
          "died", "survived", "died", "died", "died", "survived", "survived", 
          "survived", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "survived", "survived", "died", 
          "survived", "survived", "died", "died", "survived", "survived", 
          "died", "died", "died", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", 
          "survived", "died", "survived", "survived", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "died", "survived", 
          "died", "died", "died", "died", "survived", "survived", "died", 
          "died", "died", "died", "died", "survived", "died", "died", "died", 
          "died", "died", "survived", "died", "survived", "died", "died", 
          "died", "died", "survived", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "survived", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "survived", 
          "died", "died", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "survived", "died", "survived", "died", 
          "died", "died", "died", "died", "died", "survived", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "survived", "died", "survived", 
          "survived", "died", "died"}, "LogProbabilities" -> CompressedData["
1:eJzFWXlQ1VUUhhhBYUhyz5apNEpSUyc3QBllUMslR3hqMZohECZpRaijuZUx
KWHhuCBgiA5ByARlqQl4n7I8d0FRwQUNHruKKKDYA7J/v98f35y5Nv315sz9
3XvO+c453zn3vpeDls4KecrOzm6rg53dv79d8xMjLYFO5qv2w9+aF5yhZjdW
nQ37/Y5KK2+I+LGuXPlbJwfZO7uYk3u3edzNSVbz743f8GnEBRWX09faGt5i
kGO8XROeneJo3hGb6lw6I0u94VHqnTCkWEU7h5anDnxg+D5x+YvjkzOdzLbq
XTnWMftU/+69M6OnO5mdCn0918ZlKLSPnXcs9cTUqRZH84d3F93YvOMXw378
XrreMPSnZW3+F1R2dFPu8K/5fnYe+s/2S8/HeEjPQzxZvHHdI/vo+G7DStTJ
JQ9zXRua1eAsi9nlbWdzV5db6eOi9mrHh33P5Cet70nHLy4p1bF6xHlVXfPr
q6FzWsXnYX55+20Ku5Zdr7z83n/GeUSFIb6oT4qfNH+k8UB+wPxCfmD4sXrE
86T2svMZv7Dz0T7GJ6xeUT/i/X/XC9qD8WX5hjLuZ/ykm8+6+LD+p5ufuvXO
6h/x1c1XNj+weEvxk/Ix4y9p/bL4s3pm/Znxk5Tf/2uZ9UtmX2lkj6yoA1Z1
JbKiu9uhGoP/DA82rzL7pP2exRPtZXyO84AuH7H5E7/HddYvGX4sv3X5jfnL
/GP3E+n8IsUHZdfFHvUdwwrUwukOlsJeHWrR8mtzR8W3qcDsC8nrrp1WIX28
QvL7FKrTQSm551e0G9YHnDgU32XWUbXlu4hl0zbamdOLmr7vN8CienvaZo48
ZaP73ccUjHAIP6a+8l/Qf09POzPa03YpYFHtxUeq9OD2c4tXnTTYO6Zs98se
X9SoUWXPf1TSbFU3raa66IWd6o570s2RIXkGfey8D0x9Py44nqcy6tPj3+nX
acTHKTLdb+gjZfKKC9t28JRBH+KB+hgeuN4WsHtmZ9pDZUmduPqly2cN/rL4
GfCE8xB/3I/+4n6pfpRZvJiM+Ybn+z7t7hz8yXX1itO7hz3uNhq+Z/Ya/Id4
4vmYP8x+jDfax+xl/uvGx1CvMdurdi05p1KKi3K9gh8avmf2o78oM3sYX0z8
ZpBb89/25vfS3LpFbckR5x/mN8YfZYz3pabCI5f3P1Ami9eqseuLqH+ID+YX
4w/Uj+fhOvIT4z/015CPBB8D/wK+zB5pvr5ePaNbj3UO5ucKcnxcwg4a+VSI
L+bb57GNjYHWVmXxW3MrYXUx7UeMT6T9h+WvNN7oH+7HesfzUP/xB/v6FA60
Pv6t2Tk6sNYgM39YPuP3Uv5AGeuV6UP7MH8Y/0vtQz6j/UrYbzA+rN7Z/MT6
JcrMXoY/+sP4V6oP15l+2k+E+jA+yG8sP1j90/yBeE4ybdw29UqhSvPwmRDR
ZlP+vewPO4bWKFOvmJTb9lXqr6Tc+bfn1amKpLri9VMqVWxDgO/a8AIVsSvM
80BDu6pPtXUu+axQ2ba2+wwe165Gv7CyuaRL3ePfqE09tlSqm0uzpvWPyVc2
14CAZd92GOQV3X2ydvasePyb8IOlsl68H/WjfSiz/bgeFT85/Or+cuV7xqek
4sYdVZTobjq2plEljU2Z5Hv/ugEf3N8Rm7g5/81q1R775fqjg6upPrQX8WD+
oL0o1/0Rbq49c16tHDJojaWyxeAPno/5wPxh9jN/GZ5oT9zOdbvv325SC0Kv
7OmYUGaQfWLn/pzxWq0aFxs8wHOW1WBPWVRcZuvQPHXVLdDqHdNJ8wP9R3vw
eyazemL2oIzxZvXL8GD+4X7d+sX9TL8UHzwf1zFfdPOVxZfVM1tneBnmO2E8
cH3DidlHjtsuqqDf9s7JyrtvyDfUx/Bm+Yb9AdcZ3zO8Md54PvZHtIfx05Pu
R1I8UZbqR38QL1YvmA/MXmYPxgP3Yz+T4sH8Z/XD4sX4gvmL/Yfll27+Yb2z
esXvsV5w/kA8cB39lfIr84/NB7r44fe68warN8SP9WOMH/ue9XuWH9L5i/G1
lD8Z/7D9TMb5k/GJbr+QxkeKD1tnfCvFD+Mr7V/S+5Q0frrxkOIh5RfWr3Xn
dRYP1Mf4m9UHwxvfO6X5wO4HTL90PmB4oX5cx37J9LP8Z/MvriPe0vcXKb+i
frxv6M5n0vsVix/K0u8RH8ZH0nmFzV8MT+n9XNpf8Xy8P0j5XFp/rB6ZvTj/
Mv6U8ol0fpXe59j7IcsXnPfZe4H0fRRlnD+k8Ze+F7D80X3flfKh9D6C9Y/x
QZn1b91+z+432G+k72VSGe/brF9K+UI6T0jfa3XnbfZ/gO79SDd/WT9BfFi/
071fSOsf19n7mJQfMH7svQz9RXsQP933avZ+LuVbXf2Ir7VlY6j9Kquqavkz
815bDc0faf1K71e4zv6v1f3/Sfd+qns/Z9+zfMF1li8o/wPFaZm5
         "], "CountMatrix" -> {{477, 89, 0}, {107, 243, 0}}, 
        "IndicesMatrix" -> {{CompressedData["
1:eJwl0/1zCAQcBvDNu9zWjFzMls1Y9sLCGsVuG+UlM00sM9kkTO3FsBMm12yK
YWlcrrDuJLVOQnrjSl0Xkbuy6hqq5XCyS6ZTLVmfu374PN8/4Hm+kXOKs4oC
AwICzokObme6EEQIPelFGH0Jpx+RDCSGWOJJYBjDuZdkRjCS0aTzIOPJYDLT
yGEWs8lnHvMpoJBiSljEUp5mBSspp5Iq1lHNJmqoZQtb2cYrbGcHO6njVXax
mz28QT1vsZd9vM9hjvA5xzjJKU7TwHc0coaz/EgT57nARS5xmWau0cJ1bvAX
rbQRqIuOdKYLQQQTQii96E0fwggngruIJIpoBjCQGO5mELHEEU8CQ0gkiWRG
MJJRjCaFVNJIZywTmMgkMsgki6lMI5sZ5DCTXB5jNnnkM4fHmcsCClhIIcWU
UMpillDGMpZTzmoqqGQ91WxgE5upZQvb2Ekdu3iTet5mH++wnwMc5F0O8RGH
OcLHfMJRPuMYxznBSU7RwLf8QCNnOBv4/1/9xM80cZ4LXOJXrtDMVX7nGi38
wQ3+5G9aucm/3KKNdu0CAtrTgY50oivdCCaE7oTSg17cSR/C6Es4EfQjkij6
E80gYokjngQGM4REhjKMJJIZwUhGMZoUUkkjnTGM5QHGMYGJPEQGmUzhYbKY
ynSyeZQZ5DCTXGaRRz7zKOApiihlMUtYShnLWE45q1hNBWuoYi3rWE81G6nh
BTazlZd4me3soI7X2M3r7KGevexjPwc4yCHe4wM+5Cif8gXH+ZITnOQrvuYb
TtPA9zRyjiZ+4SKXuUIzv3GVa7RwnVb+4Sa3aKNde5uhE125jW4EEcztdCeU
HvTkDnrThzDCiaAfkUTRn2gGEEMscQwmkXsYyjCGk8R93M8oUkgljXTGMI7x
TGASGUwmkylk8QjTmE42M8hhJrnMIo+5PMF8FlDAQp6kkCJKWEQpZSxjOStY
STmreIZnqWANlVSxlud4nnWsp5oNbKSGF6nlP5/33MY=
           "], CompressedData["
1:eJwlzzFKgmEAgOHv/xUMFOoAQbVUQrOVIR1AaSgbXBJd2nKMoCG7QUkHKFsK
GkNpCMEK6gI1hwkOtVhj0AMNz/Ju71y9sbkXhRAqJHgmCDFpMsySp0iZFm06
dLnjnhdeeeOdAUNGfPLFmB+iOIRJFsiRZ411SmxQZpsquzQ4pMkxLc4454I2
l1xxzQ23dOnR54FHnvjgm9/4fz4iSYoJMkwxzQzzLJJliRzLrLBKgS12qLHP
AUeccMofeckrNQ==
           "], {}}, {CompressedData["
1:eJwtz70rxHEAB+AvEsOVUlzZ6MxSNmJywy3kRoP6nU45r0nHdF0xmCRKOiXT
SZfrRm5QF2W7UowMtvsHJCmPMjzr52UwWp9bawsh5OgkRi9xBhgiwSjjTDDJ
NClmmCXNPBGLLP9n5tmhwB5HHFOizDU17qhzT4MHmjzT4oceQ/uYIssSOVb4
O7FLkRKXlLmiwg23NHjklTe+6WoPoZsYcYYZI0mGVTbYJE+BfQ445IRTzjjn
ggpVatR5oskL73zQ4pMv+jt0M0KSFAtEZMiyxTZFfgHqcjaM
           "], CompressedData["
1:eJwt0t1rDQAAxuHDtNoRWtuylSwtmmRsPi64GG2zaZKzNFMsjVOLtYUhpmFk
G20+LmwtXExTLpbymWKItqJxRtjytbRySmPFmEge5eLp/QN+74yyqqLKcYFA
4Cv/djyxxBFkIpOZQjwJJJFMCtNJJY2ZpDObOWQwj/lksYglZLOM5eSQSz4r
KWQVIYpYSzHrKGE9GyhlE5sJU04FlexgJ9XsZh+1HOQQdRymngYaOU4TzZym
hVbaaOcCHXRymStc5RrXucFNbtHFPe7zgG56eMRjeonQxwte0c8Ab3nPIB8Y
IsonhvnMF0b4xig/+MkvfvOHGDEnEEscQeJJIJGpJDONNDLIJIsFLGQxS8kh
jxXkU8Bq1hCimBI2EmY7u9hDDfup5QB1HOEo9TTQyDGaOckpztBCK22c5Rzn
aaeDi1yik4d000MvT4nQxzOeE2Xs/8mDTCKRJFJIZRbpZFJAKWVsIUw5W9nG
XmpooIk2bnOHLu7yhAgv6WeA17zhHYMM8ZEow4wwynfGiInRirlkk0sehYQo
oYIqqjnBX9UfeS8=
           "], {}}}, "ExtendedClasses" -> {"died", "survived"}, "Weights" -> 
        SparseArray[Automatic, {916}, 1., {1, {{0, 0}, {}}, {}}], 
        "BatchEvaluationTime" -> 0.00011578122270742357`, 
        "SingleEvaluationTime" -> 0.0097409, "Version" -> {14.1, 0}|>]]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.937623017494385*^9, 3.9376230794318123`*^9, {3.9376233210991974`*^9, 
   3.9376233618686275`*^9}, 3.9376234452112103`*^9, 3.937623638642887*^9},
 CellLabel->
  "Out[137]//TableForm=",ExpressionUUID->"de69447e-fe66-ba4a-979c-\
b1875fd11a45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"classifierDT", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"dt", ",", " ", "dftrain"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"classifierLR", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"lr", ",", " ", "dftrain"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"classifierRF", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"rf", ",", " ", "dftrain"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"classifierGB", " ", "=", " ", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"gb", ",", " ", "dftrain"}], "]"}]}], ";"}], "\n", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"metricsList", " ", "=", " ", 
    RowBox[{"{", "\n", "   ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<Classifier\>\"", ",", " ", "\"\<Accuracy\>\"", ",", " ", 
        "\"\<Precision\>\"", ",", " ", "\"\<Recall\>\"", ",", " ", 
        "\"\<F1 Score\>\""}], "}"}], ",", "\n", "   ", 
      RowBox[{"{", "\n", "     ", 
       RowBox[{"\"\<Decision Tree\>\"", ",", " ", "\n", "     ", 
        RowBox[{"classifierDT", "[", "\"\<Accuracy\>\"", "]"}], ",", " ", 
        "\n", "     ", 
        RowBox[{"classifierDT", "[", "\"\<Precision\>\"", "]"}], ",", " ", 
        "\n", "     ", 
        RowBox[{"classifierDT", "[", "\"\<Recall\>\"", "]"}], ",", " ", "\n", 
        "     ", 
        RowBox[{"classifierDT", "[", "\"\<F1Score\>\"", "]"}]}], "\n", "   ", 
       "}"}], ",", "\n", "   ", 
      RowBox[{"{", "\n", "     ", 
       RowBox[{"\"\<Logistic Regression\>\"", ",", " ", "\n", "     ", 
        RowBox[{"classifierLR", "[", "\"\<Accuracy\>\"", "]"}], ",", " ", 
        "\n", "     ", 
        RowBox[{"classifierLR", "[", "\"\<Precision\>\"", "]"}], ",", " ", 
        "\n", "     ", 
        RowBox[{"classifierLR", "[", "\"\<Recall\>\"", "]"}], ",", " ", "\n", 
        "     ", 
        RowBox[{"classifierLR", "[", "\"\<F1Score\>\"", "]"}]}], "\n", "   ", 
       "}"}], ",", "\n", "   ", 
      RowBox[{"{", "\n", "     ", 
       RowBox[{"\"\<Random Forest\>\"", ",", " ", "\n", "     ", 
        RowBox[{"classifierRF", "[", "\"\<Accuracy\>\"", "]"}], ",", " ", 
        "\n", "     ", 
        RowBox[{"classifierRF", "[", "\"\<Precision\>\"", "]"}], ",", " ", 
        "\n", "     ", 
        RowBox[{"classifierRF", "[", "\"\<Recall\>\"", "]"}], ",", " ", "\n", 
        "     ", 
        RowBox[{"classifierRF", "[", "\"\<F1Score\>\"", "]"}]}], "\n", "   ", 
       "}"}], ",", "\n", "   ", 
      RowBox[{"{", "\n", "     ", 
       RowBox[{"\"\<Gradient Boosting\>\"", ",", " ", "\n", "     ", 
        RowBox[{"classifierGB", "[", "\"\<Accuracy\>\"", "]"}], ",", " ", 
        "\n", "     ", 
        RowBox[{"classifierGB", "[", "\"\<Precision\>\"", "]"}], ",", " ", 
        "\n", "     ", 
        RowBox[{"classifierGB", "[", "\"\<Recall\>\"", "]"}], ",", " ", "\n", 
        "     ", 
        RowBox[{"classifierGB", "[", "\"\<F1Score\>\"", "]"}]}], "\n", "   ", 
       "}"}]}], "\n", "}"}]}], ";"}], "\n", "\n"}], "\n", 
 RowBox[{"TableForm", "[", 
  RowBox[{"metricsList", ",", " ", 
   RowBox[{"TableHeadings", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{"None", ",", " ", 
      RowBox[{"{", 
       RowBox[{"\"\<Metric\>\"", ",", " ", "\"\<Value\>\""}], "}"}]}], 
     "}"}]}]}], "]"}], "\n"}], "Code",
 CellChangeTimes->{3.937623456945215*^9},
 CellLabel->
  "In[127]:=",ExpressionUUID->"832094b3-044b-4943-9b2d-ab38378e007d"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"Metric\"\>",
       HoldForm], 
      TagBox["\<\"Value\"\>",
       HoldForm], 
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], 
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ], 
      TagBox[
       StyleBox["\<\"\[Null]\"\>",
        ShowStringCharacters->False],
       StyleForm[#, ShowStringCharacters -> False]& ]},
     {"\<\"Classifier\"\>", "\<\"Accuracy\"\>", "\<\"Precision\"\>", \
"\<\"Recall\"\>", "\<\"F1 Score\"\>"},
     {"\<\"Decision Tree\"\>", "0.7925764192139738`", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.7618384401114207`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.9040404040404041`"}]}], 
       "\[RightAssociation]"}], 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.9664310954063604`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.5114285714285715`"}]}], 
       "\[RightAssociation]"}], 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.8520249221183801`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6532846715328468`"}]}], 
       "\[RightAssociation]"}]},
     {"\<\"Logistic Regression\"\>", "0.7882096069868996`", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.8110367892976589`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7452830188679245`"}]}], 
       "\[RightAssociation]"}], 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.8568904593639576`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6771428571428572`"}]}], 
       "\[RightAssociation]"}], 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.8333333333333334`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7095808383233533`"}]}], 
       "\[RightAssociation]"}]},
     {"\<\"Random Forest\"\>", "0.7969432314410481`", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.8198653198653199`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7546583850931676`"}]}], 
       "\[RightAssociation]"}], 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.8604240282685512`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6942857142857143`"}]}], 
       "\[RightAssociation]"}], 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.8396551724137931`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7232142857142857`"}]}], 
       "\[RightAssociation]"}]},
     {"\<\"Gradient Boosting\"\>", "0.7860262008733624`", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.8167808219178082`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7319277108433735`"}]}], 
       "\[RightAssociation]"}], 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.842756183745583`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6942857142857143`"}]}], 
       "\[RightAssociation]"}], 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"died\"\>", "\[Rule]", "0.8295652173913044`"}], ",", 
        RowBox[{"\<\"survived\"\>", "\[Rule]", "0.7126099706744868`"}]}], 
       "\[RightAssociation]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, TableHeadings -> {None, {"Metric", "Value"}}]]]], "Output",
 CellChangeTimes->{3.9376234593718185`*^9},
 CellLabel->
  "Out[132]//TableForm=",ExpressionUUID->"9be95111-b4f3-5f42-9dc6-\
ea3dd5b6d131"]
}, Open  ]],

Cell[TextData[{
 "we see that the ",
 StyleBox["Random Forest ",
  FontWeight->"Bold"],
 "has the best performance among the others."
}], "Abstract",
 CellChangeTimes->{{3.9376235132742443`*^9, 3.937623576172947*^9}, 
   3.9376236506145782`*^9},ExpressionUUID->"c261a772-77c7-2a4d-a15d-\
268710c58a03"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fit to Data Test", "Subsection",
 CellChangeTimes->{{3.937623579605341*^9, 
  3.937623593597166*^9}},ExpressionUUID->"8bc5b44a-8b49-8949-8a83-\
cb436e0a0431"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testRF", " ", "=", " ", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"rf", ",", " ", "dftest"}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"TableForm", "[", 
  RowBox[{"{", "\n", "  ", 
   RowBox[{
    RowBox[{"{", "\"\<Random Forest on Test Dataset\>\"", "}"}], ",", "\n", 
    "  ", 
    RowBox[{"{", "testRF", "}"}]}], "\n", "}"}], "]"}]}], "Code",
 CellChangeTimes->{{3.93762360173757*^9, 3.93762362214966*^9}, {
  3.9376236559474697`*^9, 3.937623687586828*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"b4054837-146f-2c42-8039-3cb0b3f024d4"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Random Forest on Test Dataset\"\>"},
    {
     InterpretationBox[
      TagBox[
       StyleBox[
        FrameBox[GridBox[{
           {
            ItemBox[
             FrameBox[
              StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
               StripOnInput->False,
               FontSize->12],
              FrameMargins->{{10, 5}, {-4, 2}},
              FrameStyle->None,
              StripOnInput->False],
             Alignment->{Left, Bottom},
             Background->RGBColor[0.96, 0.96, 0.96],
             Frame->{{False, False}, {True, False}},
             FrameStyle->Opacity[0.1],
             ItemSize->{Automatic, 1},
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              FrameBox[
               TagBox[GridBox[{
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   
                   InterpretationBox[Cell[
                    "RandomForest",ExpressionUUID->
                    "43a30f2f-0d22-194f-94b0-192a3288e094"],
                    TextCell["RandomForest"]]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], "393"},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"79.1", "2.1"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    79.1348600508905803963`3., 2.0523505251539302385`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"61.8", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    61.8320610687022949037`3., 2.4536532170120102236`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.6187471340979162626`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0145366625047983478`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.5896738090883195671`3.", "\", \"", 
                    "0.6478204591075129581`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.5896738090883195671`3., ", ", 0.6478204591075129581`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.4800585968709071283`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0234915440798406649`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4330755087112257984`3.", "\", \"", 
                    "0.5270416850305884582`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.4330755087112257984`3., ", ", 0.5270416850305884582`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"14.6`", 
                    
                    RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                    "milliseconds per example", 
                    FractionBox["\"Milliseconds\"", "\"Examples\""]},
                    "Quantity"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"4.04`", 
                    
                    RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                    "examples per millisecond", 
                    FractionBox["\"Examples\"", "\"Milliseconds\""]},
                    "Quantity"]},
                  {
                   ItemBox[
                    
                    GraphicsBox[
                    RasterBox[{{{0.9076622720477138, 0.7662014191692121, 
                    0.414765182491837}, {0.8689416805539734, 
                    0.5968714201667518, 0.0817670072704631}}, {{1., 0.42, 
                    0.}, {0.9307816358026949, 0.8568859850782816, 
                    0.6351329114978832}}}, {{0, 0}, {2, 2}}, {0, 1}],
                    Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["211", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "211", "\" examples of \"", "\"died\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8084291187739464`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8683127572016461`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8373015873015872`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{211, " examples of ", "died", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8084291187739464}], 
                    Row[{"Recall = ", 0.8683127572016461}], 
                    Row[{"FScore = ", 0.8373015873015872}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["50", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "50", "\" examples of \"", "\"survived\"", 
                    "\" misclassified as \"", "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.19157088122605365`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.3333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{50, " examples of ", "survived", 
                    " misclassified as ", "died"}], 
                    Row[{"Column fraction = ", 0.19157088122605365`}], 
                    Row[{"Row fraction = ", 0.3333333333333333}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["32", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "32", "\" examples of \"", "\"died\"", 
                    "\" misclassified as \"", "\"survived\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.24242424242424243`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.13168724279835392`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{32, " examples of ", "died", " misclassified as ", 
                    "survived"}], 
                    Row[{"Column fraction = ", 0.24242424242424243`}], 
                    Row[{"Row fraction = ", 0.13168724279835392`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["100", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "100", "\" examples of \"", "\"survived\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7575757575757576`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.7092198581560283`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{100, " examples of ", "survived", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7575757575757576}], 
                    Row[{"Recall = ", 0.6666666666666666}], 
                    Row[{"FScore = ", 0.7092198581560283}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "243", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8683127572016461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{243, " example", "s", " of class ", "died"}], 
                    Row[{"Recall = ", 0.8683127572016461}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "150", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{150, " example", "s", " of class ", "survived"}], 
                    Row[{"Recall = ", 0.6666666666666666}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "261", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"died\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8084291187739464`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{261, " example", "s", " classified as ", "died"}], 
                    Row[{"Precision = ", 0.8084291187739464}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "132", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"survived\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7575757575757576`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{132, " example", "s", " classified as ", 
                    "survived"}], 
                    Row[{"Precision = ", 0.7575757575757576}]}], 
                    "Tooltip"]& ]},
                    Frame->True,
                    FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                    FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"died\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"survived\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["243", TraditionalForm]}, {0.5, 
                    FormBox["150", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["261", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["132", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"died\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"survived\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                    FrameTicksStyle->13,
                    GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                    ImageSize->181.2,
                    
                    Method->{
                    "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02],
                     "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                    PlotRangePadding->None],
                    Alignment->Center,
                    StripOnInput->False], "\[SpanFromLeft]"}
                 },
                 AutoDelete->False,
                 ColumnsEqual->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
                 GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], 
                    Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}],
                "Grid"],
               FrameMargins->{{10, 10}, {10, 5}},
               FrameStyle->None,
               StripOnInput->False],
              Deploy,
              DefaultBaseStyle->"Deploy"],
             Alignment->Center,
             
             BaseStyle->{
              FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI",
                NumberMarks -> False, Deployed -> False},
             StripOnInput->False]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], 
              Offset[0.8], {
               Offset[0.4]}, 
              Offset[0.2]}}],
         Background->GrayLevel[1],
         FrameMargins->{{0, 0}, {0, 0}},
         FrameStyle->GrayLevel[0.85],
         RoundingRadius->5,
         StripOnInput->False],
        StripOnInput->False,
        LineBreakWithin->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      ClassifierMeasurementsObject[<|
       "Model" -> ClassifierFunction[<|
          "ExampleNumber" -> 916, "ClassNumber" -> 2, 
           "Input" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal"|>, 
                  "f2" -> <|"Type" -> "Numerical"|>, 
                  "f3" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor[
                    "Transpose", <|"FeatureNumber" -> 3|>], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                    "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                    Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Processors" -> {
                  MachineLearning`MLProcessor[
                  "SynthesizeMissingValues", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Distribution" -> 
                    LearnedDistribution[<|
                    "ExampleNumber" -> 916, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|"f2" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|"(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                    "DirectTraining", "BatchProcessing" -> Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{0.9924763087166281, 
                    0.06962246892396884, -0.10071488696884714`}, \
{-0.12176028349302224`, 0.6475982344553933, -0.7521907737362618}, {
                    0.012853404215050985`, 0.7587945957577639, 
                    0.6512031568173609}}, 
                    "Precisions" -> {1.1096705122951698`, 11.071379162604247`,
                     14.504654820468707`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0001752264873371586, 0.09643725350844203, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|"(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715433`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.99992435443287, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 3, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.2031236, "MaxTrainingMemory" -> 
                    2050104, "DataMemory" -> 106416, "FunctionMemory" -> 
                    64512, "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 10, 11, 15, 6, 19.189783`9.03564500105436}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146168`, -1.997829760914916, -1.976574768503185, \
-1.9695170466598357`, -1.9059724997243812`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714302`, -1.7810711623410056`}, 
                    "LeftBoundary" -> -2.0628669170146168`, "LeftScale" -> 
                    0.12459852713774523`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[5.892604950680779, 0.13867820062256261`], 
                    "EntropySampleSize" -> 10|>], 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "EvaluationStrategy" -> "ModeFinding", 
                    "Version" -> {14.1, 0}, "ID" -> 616651398117295976|>], 
                  MachineLearning`MLProcessor[
                  "Threads", <|
                   "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                  MachineLearning`MLProcessor[
                  "Standardize", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.018970775438927`}, 
                    "StandardDeviation" -> {12.892103992603547`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
                  MachineLearning`MLProcessor[
                  "EmbedNominalVector", <|
                   "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
                    "EmbeddingVectors" -> {
                    RawArray["Real32",{{0., 0., 0.}, {
                    0.21963098645210266`, -0.1438339650630951, 
                    0.544792890548706}, {-0.2416929453611374, 
                    0.3798814117908478, 
                    0.6873865127563477}, {-0.9437126517295837, 
                    0.4273325502872467, -1.2217921018600464`}}], 
                    RawArray["Real32",{{0., 0.}, {-0.12253803759813309`, 
                    0.6071814894676208}, {-0.6194148659706116, \
-0.98703533411026}}]}, "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
                  MachineLearning`MLProcessor[
                  "MergeVectors", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    7619735631186802745|>]}, "Invertibility" -> "Impossible", 
                "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
           "Output" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"died" -> 1, "survived" -> 2|>}, 
                    "MissingCode" -> 0, "Version" -> {14.1, 0}, "ID" -> 
                    2833981340056725226, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FromVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
             "Marginal" -> <|
              "died" -> 0.6176470588235294, "survived" -> 
               0.3823529411764706|>|>, "LabelSplitter" -> 
           MachineLearning`MLProcessor[
            "FeatureLabelSplit", <|
             "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
              "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
           "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic,
            "Prior" -> Automatic, "Utility" -> 
           SparseArray[
            Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
           "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
           Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 4, 4, 2, 4, 1, 3, 1, 1, 6, 2, 5, 
                   4, 5, 1, 5, 5, 3, 2, 2, 6, 5, 1, 5, 4, 6, 5, 1, 2, 4, 2, 6,
                    4, 4, 3, 1, 3, 1, 4, 1, 4, 4, 1, 1, 5, 5, 6, 6, 5, 2, 1, 
                   4, 6, 5, 3, 3, 4, 1, 2, 5, 2, 3}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZwADhZNT3+8H0gueypwBCS0o7fkM4h8og9AJz4zegflQ
8YQyxk0gdQqZkbdB9IFivnsgcYdzhc/A5kDNO/AEom+B/aXHYHmYfgcI/0BM
xUewuB2EvwBKM2RBzX0K0e9wDeIuh7MQcx9A1TWUTn8IVg8zT/j/U7CXTkHt
h4ov2OH8GyTecA9izoMPeQ/B5t2E8qHqHT5DxBM+QeUVMg+BxBVerAGbq6AJ
4T/Y7cfmAKJLoOGkxnEFbA48fCC0Qsq/B2B3nqsBh4vD+rj9YP3bIHQDZ95j
sHvZIPSBtRBxBqi/GTR2XQHTUHMZOCDqFiyHqHOAhn9CNoSGxRsD62EGkPsc
Tr0/B1a3EGruBQi/4bf/DXsAF8m2pA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, -39}, {4, 12}, {-1, 5}, {
                   6, 8}, {7, -4}, {-2, -3}, {-5, 9}, {10, 
                   11}, {-6, -7}, {-8, -9}, {13, 21}, {14, 16}, {-10, 
                   15}, {-11, -12}, {-13, 17}, {18, 20}, {
                   19, -16}, {-14, -15}, {-17, -18}, {22, 29}, {-19, 23}, {
                   24, -26}, {25, 26}, {-20, -21}, {27, -25}, {-22, 
                   28}, {-23, -24}, {30, 39}, {31, 36}, {32, 
                   33}, {-27, -28}, {34, 35}, {-29, -30}, {-31, -32}, {
                   37, -36}, {-33, 38}, {-34, -35}, {-37, -38}, {41, 59}, {42,
                    58}, {43, 51}, {44, 48}, {45, 46}, {-40, -41}, {
                   47, -44}, {-42, -43}, {49, -48}, {-45, 50}, {-46, -47}, {
                   52, 56}, {53, -53}, {54, -52}, {55, -51}, {-49, -50}, {-54,
                    57}, {-55, -56}, {-57, -58}, {60, -64}, {61, -63}, {
                   62, -62}, {-59, 63}, {-60, -61}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 
                   1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2,
                    2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 6, 1, 4, 3, 4, 3, 2, 3, 3, 6, 1, 
                   5, 4, 5, 3, 4, 3, 1, 1, 6, 4, 5, 4, 1, 6, 2, 6, 3, 5, 1, 1,
                    5, 3, 2, 5, 4, 3, 2, 3, 2, 5, 4, 2, 5, 2, 1, 3, 3, 1, 1, 
                   6, 4, 2, 4, 5, 5, 5, 4, 4, 2, 3}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZ4AA20uP9wOpA49kzoCEFpya+h7EXzBHleEAiC7t+Qzi
K2RF3gbJHyiD8B2yIfwFj43egfgJipmHwOpUIbTDaYg5B96+OwK2yhFiTwPU
PAcHKD8DYo6C8P+nYPN/+98A0Qnfjx0GyTNUMV4HuwdqngJU/wM7qLth+gTm
PgPzT0LtfQJxFwPUPwdyIPbA3MGwUPc3WF8x3z2wPNS8BJg/n0L0N0DDJ+FT
3kOwf+Uh/mN4CgmvhjRoOJx4fw6sbl3cfjAtBHGXwymI+IMVEPGGJxB9DKyH
GRyQ3NUADU8GjV1XwOpKJkLcyZ73GGwONNxh/oLxGbZB7dsCoQ+sgtAPYOEM
Uwf1j0Me0B4A21+2DA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 41}, {3, 38}, {4, 25}, {-1, 5}, {6,
                    10}, {-2, 7}, {-3, 8}, {-4, 9}, {-5, -6}, {11, 15}, {
                   12, -11}, {13, -10}, {-7, 14}, {-8, -9}, {-12, 16}, {-13, 
                   17}, {18, 21}, {19, 20}, {-14, -15}, {-16, -17}, {22, 
                   23}, {-18, -19}, {-20, 24}, {-21, -22}, {26, -36}, {27, 
                   29}, {-23, 28}, {-24, -25}, {-26, 30}, {31, -35}, {-27, 
                   32}, {33, -34}, {-28, 34}, {-29, 35}, {36, -33}, {-30, 
                   37}, {-31, -32}, {39, -40}, {40, -39}, {-37, -38}, {42, 
                   49}, {43, 47}, {-41, 44}, {45, -45}, {
                   46, -44}, {-42, -43}, {48, -48}, {-46, -47}, {50, 61}, {51,
                    60}, {52, 58}, {53, 56}, {54, 
                   55}, {-49, -50}, {-51, -52}, {-53, 57}, {-54, -55}, {-56, 
                   59}, {-57, -58}, {-59, -60}, {62, 
                   63}, {-61, -62}, {-63, -64}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2,
                    2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2,
                    1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 4, 5, 6, 3, 6, 1, 6, 3, 1, 2, 4, 1, 
                   2, 3, 3, 1, 4, 1, 3, 6, 6, 1, 3, 3, 1, 4, 4, 5, 5, 2, 1, 4,
                    3, 5, 4, 3, 5, 4, 6, 1, 1, 1, 1, 3, 4, 2, 5, 5, 2, 1, 6, 
                   6, 6, 2, 3, 5, 5, 3, 2, 1, 1, 1, 6, 3, 3, 2, 1, 1, 4, 1, 
                   5}], "NumericalThresholds" -> CompressedData["
1:eJxNkDFLA0EQhcdCxUYiNhYipyAIprLRRt3STrCzkSUgUdRYKYoW9wPSWgpb
CVYqCBYWtySC5IyNIahns8l5h4UoeCBEFL2dmYDbfOzsezNvZzi3ubDcAQBz
gMf8zD/MphSZ38hSTt+FXkqnevBuaUZXS8gbuov6JYiUyqe7w+/iuje2fn0/
WMU+H4WGpdrJ1iwhoLoZI72TJUJnmfolpDdOlNi626JcursQWjoVmidfh0Bb
fnJupvHreZzTT//QfUQ4XvLQd0HU8cQbzt2dusW+W0WcJ1YWn9An+P/bVHe5
LmaoLljfzuMejZex/lV8QfbsfyOv9hqoWyO/YR9EPJ/nKKbkus4cxt6//bb3
LpkmJJ27QX2Bc+kz+p9Y57zPrBt4bKJ/slXD95NTzGW6aK+K86k85+Qc0k8C
9JsR1APvQwXNc9yTSuf9AewS0JI=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 30}, {3, 22}, {4, 17}, {5, 
                   6}, {-1, -2}, {-3, 7}, {8, 16}, {9, 12}, {10, 
                   11}, {-4, -5}, {-6, -7}, {13, -12}, {-8, 14}, {-9, 
                   15}, {-10, -11}, {-13, -14}, {18, -20}, {19, 
                   20}, {-15, -16}, {-17, 21}, {-18, -19}, {23, 28}, {-21, 
                   24}, {25, 26}, {-22, -23}, {-24, 27}, {-25, -26}, {
                   29, -29}, {-27, -28}, {31, 58}, {32, 35}, {33, -33}, {
                   34, -32}, {-30, -31}, {36, 38}, {37, -36}, {-34, -35}, {39,
                    55}, {40, 50}, {41, -47}, {42, 48}, {43, 
                   44}, {-37, -38}, {-39, 45}, {46, -43}, {-40, 
                   47}, {-41, -42}, {49, -46}, {-44, -45}, {51, 
                   52}, {-48, -49}, {53, -53}, {-50, 54}, {-51, -52}, {56, 
                   57}, {-54, -55}, {-56, -57}, {59, 62}, {60, -61}, {
                   61, -60}, {-58, -59}, {63, 70}, {64, 67}, {-62, 65}, {
                   66, -65}, {-63, -64}, {-66, 68}, {69, -69}, {-67, -68}, {
                   71, 72}, {-70, -71}, {-72, -73}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1,
                    1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 
                   1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
                    2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 
                   1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 5, 2, 5, 3, 4, 6, 1, 1, 6, 3, 5, 6, 
                   5, 2, 2, 1, 6, 5, 4, 6, 5, 6, 4, 1, 6, 6, 3, 1, 4, 2, 6, 2,
                    6, 3, 4, 4, 2, 6, 5, 2, 6, 5, 4, 2, 3, 5, 5, 6, 5, 5, 4, 
                   3, 4, 5, 4, 4, 3, 2, 3, 6, 1, 5, 6, 3, 3, 5, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxNUTEvBEEYHR0dtSvmRKLRUFzHjkQrEp1GJhLFCqeinh+gVejmCtT8gLsJ
hWBPoZJcM5t1GomLKEWw33uT2Obte/O+75v3TXP7YGNnTCm1quQLN6PHXv2z
9FTVqF8X3wUz8LC3Ocj+0B8ef9bcP5yMxD993qvRdtdK8d1Djzn8Zpn97qBb
cv+C/nYINBd5X3x9+Dzn6iPMs2neCnTHOW7yZ5hJgtbtf58pgHoX94hF503O
2U+l+clXgbuJdiX9WJf8kbkjfXocPn+5Jfkjczjq8Qx62pdJ/ffR153iXHeA
gXXhCtxSj8znvtafBafALd8pfrRLuQfRzubXMrdsFOKfB4/ci134lnrD/Trm
jzPwhTmg5juFblOZX2iTyyo=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 55}, {3, 33}, {4, 13}, {5, 8}, {
                   6, -4}, {-1, 7}, {-2, -3}, {9, 10}, {-5, -6}, {11, 
                   12}, {-7, -8}, {-9, -10}, {14, -31}, {15, 30}, {16, 
                   18}, {-11, 17}, {-12, -13}, {-14, 19}, {20, 26}, {21, 
                   22}, {-15, -16}, {-17, 23}, {-18, 24}, {
                   25, -21}, {-19, -20}, {27, 29}, {
                   28, -24}, {-22, -23}, {-25, -26}, {31, -30}, {-27, 
                   32}, {-28, -29}, {34, 51}, {35, 50}, {36, 42}, {-32, 
                   37}, {-33, 38}, {39, -38}, {40, -37}, {-34, 
                   41}, {-35, -36}, {43, 49}, {44, 47}, {45, -42}, {
                   46, -41}, {-39, -40}, {
                   48, -45}, {-43, -44}, {-46, -47}, {-48, -49}, {52, 54}, {
                   53, -52}, {-50, -51}, {-53, -54}, {56, 68}, {57, 64}, {
                   58, -62}, {59, -61}, {60, 63}, {-55, 61}, {-56, 
                   62}, {-57, -58}, {-59, -60}, {-63, 65}, {66, 
                   67}, {-64, -65}, {-66, -67}, {-68, -69}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
                   1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
                    2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 6, 3, 6, 2, 6, 2, 1, 3, 1, 3, 4, 4, 
                   5, 6, 1, 4, 6, 4, 1, 3, 3, 6, 5, 1, 6, 5, 6, 6, 5, 3, 4, 1,
                    3, 4, 4, 2, 3, 2, 5, 6, 5, 5, 2, 1, 1, 2, 1, 4, 4, 2, 1, 
                   2, 1, 3, 2, 1, 6, 2, 5, 3, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYwCDhvd5D+1BjJNT3+8H0dmRt0H8A6ch/APPjN6B6AQo
fwGUf6CY7x5YfQZEfcLFvW9AtANUv0JZz2eQfEMphGawu/QYrA9qz4Kr7VfA
5kLVwcRh/AeVfofB7sqDmg81t4E97zHY/IVx+8HqNWdcBZsHFXfYAhE/wAbh
J3BA6AXLIeILoOYsgLrrgBrHFbB5WRBxhg+Q8FgADReH2zJnwOI6mYdA6h0e
QfgJDhD/KMDCzRHCf2ALoRluQtW95XkNtneT+gewuSffnwObs8/3Jpgv8P8p
2H5hCJ1wB6JvwQ7n32DxBxC+whu3u2B5VYg7Eh5Czf+lx+AAkof60+ECxHyF
+dBw+OF/AyT+YD2QDwDsPKsY
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 35}, {3, 19}, {4, 10}, {5, 
                   6}, {-1, -2}, {7, 8}, {-3, -4}, {9, -7}, {-5, -6}, {
                   11, -17}, {12, 13}, {-8, -9}, {14, 18}, {15, 
                   16}, {-10, -11}, {-12, 17}, {-13, -14}, {-15, -16}, {20, 
                   24}, {21, -22}, {22, -21}, {23, -20}, {-18, -19}, {25, 
                   33}, {26, 31}, {27, 29}, {-23, 28}, {-24, -25}, {-26, 
                   30}, {-27, -28}, {32, -31}, {-29, -30}, {
                   34, -34}, {-32, -33}, {36, 38}, {-35, 37}, {-36, -37}, {39,
                    41}, {40, -40}, {-38, -39}, {42, 56}, {-41, 43}, {
                   44, -55}, {45, 51}, {-42, 46}, {47, -48}, {48, -47}, {
                   49, -46}, {-43, 50}, {-44, -45}, {-49, 52}, {53, -54}, {54,
                    55}, {-50, -51}, {-52, -53}, {57, -63}, {58, -62}, {59, 
                   60}, {-56, -57}, {61, -61}, {-58, 62}, {-59, -60}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1,
                    1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 
                   1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 4, 4, 3, 1, 4, 4, 2, 4, 5, 6, 2, 
                   5, 6, 2, 4, 6, 1, 5, 5, 4, 1, 5, 2, 1, 3, 6, 1, 6, 4, 1, 2,
                    1, 4, 4, 2, 2, 1, 1, 4, 3, 2, 4, 6, 5, 5, 3, 5, 2, 5, 3, 
                   6, 3, 6, 4, 5, 4, 5, 4, 3, 4, 3, 6, 4, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYoAA20uP9wOpBrnMQyD6wce8h/YgPpROUIGIM9yKAfMX
fICKQ2mHGzJnQPQDKP8B1DyHU1Pfg+iEuxB5BjuIuAJU3OGZ0TuwvaU9n0H0
gtNQccmSZyD6AEw9jIaqa3hUdQUsD7VnwROIOQcE5oL1OeRE3ga74yTU/mSz
X2BxqPkNAv+fgt0v+BDiTpj+Ty8uI7snoQzqrsdQ+TPvz4Fp9Yoj4PCoYrwO
dpcwxLwDP/xvgM29AFUnCBFfwJn3GBxO0+P2g9UvhNAPMiDuVNgA4R94CrHH
YRWUnwWRP8AO0Z+QC1UP5TvA3Dcfoh7mboVZEP4CqP0P1KHxB41PBi0IX4ED
aq4QRB0DyH8A+oXBSQ==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 16}, {4, 14}, {5, 12}, {6,
                    11}, {-1, 7}, {8, 10}, {
                   9, -4}, {-2, -3}, {-5, -6}, {-7, -8}, {
                   13, -11}, {-9, -10}, {15, -14}, {-12, -13}, {17, 24}, {18, 
                   22}, {19, 20}, {-15, -16}, {-17, 21}, {-18, -19}, {
                   23, -22}, {-20, -21}, {25, -42}, {26, 29}, {27, 
                   28}, {-23, -24}, {-25, -26}, {30, 31}, {-27, -28}, {32, 
                   41}, {-29, 33}, {34, 35}, {-30, -31}, {36, 38}, {
                   37, -34}, {-32, -33}, {39, -38}, {
                   40, -37}, {-35, -36}, {-39, 42}, {-40, -41}, {44, 60}, {
                   45, -59}, {46, -58}, {47, -57}, {48, 56}, {49, 51}, {
                   50, -45}, {-43, -44}, {52, 55}, {-46, 53}, {
                   54, -49}, {-47, -48}, {-50, -51}, {-52, 57}, {-53, 
                   58}, {-54, 59}, {-55, -56}, {61, 64}, {62, -63}, {
                   63, -62}, {-60, -61}, {65, 66}, {-64, -65}, {-66, -67}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1,
                    1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 
                   1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
                    2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 6, 1, 2, 3, 3, 1, 5, 1, 4, 2, 4, 6, 
                   5, 2, 3, 2, 2, 3, 4, 2, 2, 1, 1, 2, 1, 4, 4, 2, 4, 2, 1, 4,
                    1, 3, 4, 1, 2, 1, 6, 1, 1, 1, 4, 6, 5, 5, 6, 6, 1, 2, 3, 
                   6, 5, 5, 3, 2, 4, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZoAA20uP9wMphZNT34PoBwpPP4Noh8dG70B0Q2bkbXsQ
nQGlqzvZHUD67CH6FmzbdgYkvqC0B6yv4RlE3wMoPwFqrgNU/YOnEHmFbIh5
CaffnwOLn4PQDlB7DnzKewiiH9yQAZuvcAoif6CH6QPYHZcYn4HV3YXK9338
CaY/Q/QteA+hD0Dd41AGcc8BqL8WcCW9BovD3PlC+xqYVso8BHbfB4h+hgnx
EBqm75H7RbA+9rzHIHGHD49vgP09pRQSjkd5XiPbxwBVl7Ahbj/Y/K0QWoED
It7ACaUzdkPCExo+C6DhvgCmfwtE34JZUPq3/w2wf59C/P9A4P9TMD0DKA8A
aDKq6Q==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 38}, {3, -37}, {4, 7}, {5, -4}, {
                   6, -3}, {-1, -2}, {8, -36}, {9, 27}, {10, 21}, {11, 14}, {
                   12, 13}, {-5, -6}, {-7, -8}, {15, -16}, {-9, 16}, {
                   17, -15}, {18, 20}, {19, -12}, {-10, -11}, {-13, -14}, {22,
                    24}, {-17, 23}, {-18, -19}, {-20, 25}, {-21, 
                   26}, {-22, -23}, {28, -35}, {29, 35}, {-24, 30}, {31, 
                   33}, {32, -27}, {-25, -26}, {-28, 34}, {-29, -30}, {36, 
                   37}, {-31, -32}, {-33, -34}, {39, 55}, {40, 52}, {41, 
                   46}, {42, 45}, {43, 
                   44}, {-38, -39}, {-40, -41}, {-42, -43}, {47, 
                   48}, {-44, -45}, {-46, 49}, {50, -50}, {
                   51, -49}, {-47, -48}, {53, 54}, {-51, -52}, {-53, -54}, {
                   56, 59}, {57, 58}, {-55, -56}, {-57, -58}, {-59, -60}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2,
                    2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1,
                    1, 2, 1, 1, 2, 2, 2, 2, 1, 2}], "NominalSplits" -> {}, 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 4, 3, 3, 6, 1, 4, 5, 5, 5, 5, 1, 
                   6, 6, 3, 6, 1, 5, 3, 5, 6, 3, 1, 1, 2, 6, 3, 5, 5, 2, 2, 6,
                    1, 6, 4, 2, 3, 3, 2, 6, 2, 4, 4, 6, 2, 6, 5, 1, 5, 2, 1, 
                   2, 2, 6, 5, 2, 4, 6, 1, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZQCDhO1x+/cD6Qa5zEMg+sHHvIf2IFoJwj+gDqETTk99
D6YLC8DyCz5A1CnYX3oMEl8ApRnsUGmFF2uegtWdgeh/AKUZsiJvg8XPQs2d
xvwVTEP1NWRC5BkcIXyHU6j6ErrMF4P1/w86C+affH8O7I6TEHUNuVDzofof
QN3X8MToHdi8pxD6AdTcB5mHj4PFYf4s6/kMNu8ZRN2Cv/43QOY1/ILQC57K
nAGbz5b3GBxeZyD2Jwj+B/sXpr+BAyK/AGovAzuE77AGEu4KHgpXwOZsgPAZ
oPYx+EdfQXZvA9S9DFDzGGD6ofIPSiH2PYC6h2Gv/muwPMg+AP17rzE=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 38}, {3, 15}, {4, 12}, {5, -9}, {6,
                    10}, {7, 8}, {-1, -2}, {-3, 9}, {-4, -5}, {-6, 
                   11}, {-7, -8}, {13, -13}, {-10, 14}, {-11, -12}, {16, 
                   18}, {17, -16}, {-14, -15}, {19, 23}, {20, 22}, {
                   21, -19}, {-17, -18}, {-20, -21}, {24, 28}, {-22, 25}, {26,
                    27}, {-23, -24}, {-25, -26}, {29, 37}, {-27, 30}, {-28, 
                   31}, {32, 36}, {33, 35}, {-29, 
                   34}, {-30, -31}, {-32, -33}, {-34, -35}, {-36, -37}, {39, 
                   44}, {40, 42}, {41, -40}, {-38, -39}, {
                   43, -43}, {-41, -42}, {45, 49}, {46, 48}, {
                   47, -46}, {-44, -45}, {-47, -48}, {50, 61}, {51, 54}, {52, 
                   53}, {-49, -50}, {-51, -52}, {55, 57}, {
                   56, -55}, {-53, -54}, {58, 60}, {-56, 
                   59}, {-57, -58}, {-59, -60}, {-61, -62}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1,
                    2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
                   2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
                    2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 6, 4, 3, 5, 6, 3, 6, 3, 4, 6, 6, 
                   6, 2, 2, 6, 1, 2, 5, 1, 6, 4, 5, 1, 6, 1, 4, 4, 1, 2, 6, 2,
                    6, 5, 1, 5, 1, 1, 6, 3, 2, 1, 1, 2, 5, 6, 4, 6, 1, 2, 6, 
                   1, 3, 2, 2, 5, 5, 6, 6, 3, 2, 6, 3, 3, 3, 2, 6, 6, 3, 2, 5,
                    1}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDwZACDhO1x+/cD6QXf/G/YA+mGM1Pfg/gNn/MegvnymYfA
8raXHoNoh1MQ+QPKEPEHUP4DVQi/4SNEX8JpqDknIXQCjL4lcwYsf/L9ObA5
UPsefL/xAmzfE6N3YPvsIfY1nN/6A0QrQM1LKOv5DKYdoPIzZywFy0PNOVDM
dw9Z3QIY3Rb3ECz+FGK+AtTdDlD7FKDuO2AH9We8ylFkexxCVlwGm6Pef20/
kv8YciJvg/1zDuKfhK/2a0B8hWsF38H0M4j5CVBzG2DhVQL1B3veY5C6BXan
z4LNfwxVzwYRP9CueRPsvkyIPQug5j2A0gsWQuKvYQWETuCA6GOA0g3pUH1Q
f8LkHbKh4j8h8b5ADhJ/CU8h8aMA0w8z7wdE3YMzEH8qzIfaeyH3yH4AEtbb
MA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 48}, {3, 16}, {4, 5}, {-1, -2}, {6,
                    15}, {7, -12}, {8, 13}, {9, -8}, {10, -7}, {11, -6}, {-3, 
                   12}, {-4, -5}, {-9, 14}, {-10, -11}, {-13, -14}, {
                   17, -47}, {18, 21}, {19, -18}, {20, -17}, {-15, -16}, {22, 
                   25}, {23, 24}, {-19, -20}, {-21, -22}, {26, 41}, {-23, 
                   27}, {28, 34}, {29, 30}, {-24, -25}, {31, -30}, {32, 
                   33}, {-26, -27}, {-28, -29}, {35, -38}, {36, 38}, {-31, 
                   37}, {-32, -33}, {39, 40}, {-34, -35}, {-36, -37}, {42, 
                   45}, {43, -42}, {-39, 44}, {-40, -41}, {-43, 46}, {
                   47, -46}, {-44, -45}, {49, 65}, {50, 56}, {51, 55}, {
                   52, -52}, {-48, 53}, {
                   54, -51}, {-49, -50}, {-53, -54}, {-55, 57}, {58, 63}, {
                   59, -61}, {60, 61}, {-56, -57}, {-58, 62}, {-59, -60}, {
                   64, -64}, {-62, -63}, {66, 71}, {67, 70}, {68, -68}, {-65, 
                   69}, {-66, -67}, {-69, -70}, {72, 
                   73}, {-71, -72}, {-73, -74}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
                    2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
                   1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2,
                    2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 
                   2, 1, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 3, 5, 5, 2, 1, 4, 5, 4, 1, 5, 4, 4, 
                   2, 6, 5, 5, 4, 6, 6, 6, 6, 5, 3, 6, 5, 2, 5, 3, 1, 2, 1, 3,
                    6, 4, 2, 5, 4, 1, 5, 2, 4, 6, 2, 1, 4, 6, 6, 2, 2, 5, 5, 
                   6, 1, 5, 1, 4, 4, 2, 2, 3, 4, 6, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYAADhXPvz+0H0gnf/W/Yg4TtLz0G8Q9sj9sPFn9s9A5E
P/D6dBZEN5T1fAbRDHYQdQlQvoMzzyUQvQAqrgATL4XQC55AzGE4M/U9WNwB
qh9GQ9UpwOShdMJJKH0aSsPszYm8DXIvw1mIuMJCiHsXPIO6dymE/+AXxF8N
bzffB/sL6g6HPX/+IZvTwJH3GGwezN1QdQ/WQ8yBiSuIrwb7M2EuRLwBpg7m
fqh7GZ7JnAGZ90DhKVj8wfu8h/ZI/ngAU3cToi7hNCQeFkDD4wA0HhSg6hVO
vQa77wDU/wt2OP8G6/sEMfeA0P+nIHrBCYg5Daeg9B+I/w8IQOQZ2CH+THgK
tBcAEAzGOw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 4}, {-1, -2}, {5, 26}, {6,
                    25}, {7, 19}, {8, 9}, {-3, -4}, {-5, 10}, {11, 18}, {
                   12, -13}, {-6, 13}, {14, 17}, {15, -10}, {-7, 
                   16}, {-8, -9}, {-11, -12}, {-14, -15}, {20, 
                   21}, {-16, -17}, {22, 24}, {
                   23, -20}, {-18, -19}, {-21, -22}, {-23, -24}, {27, 
                   39}, {-25, 28}, {29, 38}, {-26, 30}, {31, 35}, {32, 
                   33}, {-27, -28}, {34, -31}, {-29, -30}, {36, 
                   37}, {-32, -33}, {-34, -35}, {-36, -37}, {40, 42}, {-38, 
                   41}, {-39, -40}, {-41, -42}, {44, 59}, {45, -58}, {-43, 
                   46}, {47, 48}, {-44, -45}, {49, 55}, {50, 
                   51}, {-46, -47}, {-48, 52}, {-49, 53}, {
                   54, -52}, {-50, -51}, {56, -57}, {57, -56}, {-53, 
                   58}, {-54, -55}, {60, 63}, {61, 
                   62}, {-59, -60}, {-61, -62}, {64, -65}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2,
                    1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 
                   2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
                    1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 1, 5, 3, 5, 1, 2, 1, 3, 1, 4, 4, 1, 
                   2, 1, 2, 5, 3, 5, 2, 4, 3, 6, 2, 3, 4, 6, 5, 1, 5, 1, 5, 6,
                    3, 6, 2, 5, 6, 1, 4, 4, 2, 6, 2, 5, 1, 5, 4, 2, 4, 4, 1, 
                   3, 2, 5, 5, 2, 4, 4, 2, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZQCDByU9n/cDaYeQFZdBdIPtpcdgOjfytj1I3A7CPyBg
dgVEP3hq9A6sXrLkGVhdOkQdQxXjdbB4KdS8Mijd9hus3+ExRF/Ch0cfweZB
+Qqz4vaD+VkQcxQ2QPgMzyDyDTBzYO5hz3sMoh9A5R9kQMWh9iqcnPoebJ49
xN0Mx3uKwLQDhO8Q6nwY7I4tEHsesEHMa8iGmJNwGqJ/AdT8A1D/w8xl0Dj2
Fiz/Ke8hWN9HCO1wQ+YMmD4F1f8Qwl8AdYdC8+nPYP9B+Q4w/VB1DgL/n4L9
xQ+hE84nvAbRB/763wCbc+L9ObA586HhsxJCN5yHigtB9B0QhNALrkHMVeAA
+g8A8Gyw5g==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 38}, {3, 24}, {4, 14}, {5, -11}, {
                   6, 12}, {7, -7}, {8, 10}, {-1, 9}, {-2, -3}, {
                   11, -6}, {-4, -5}, {13, -10}, {-8, -9}, {15, 23}, {-12, 
                   16}, {17, -20}, {18, -19}, {19, 22}, {20, 
                   21}, {-13, -14}, {-15, -16}, {-17, -18}, {-21, -22}, {-23, 
                   25}, {-24, 26}, {27, 35}, {28, 31}, {29, -28}, {
                   30, -27}, {-25, -26}, {-29, 32}, {-30, 33}, {-31, 
                   34}, {-32, -33}, {36, 37}, {-34, -35}, {-36, -37}, {39, 
                   54}, {-38, 40}, {41, 50}, {42, 46}, {-39, 43}, {44, -43}, {
                   45, -42}, {-40, -41}, {47, 49}, {
                   48, -46}, {-44, -45}, {-47, -48}, {51, 53}, {
                   52, -51}, {-49, -50}, {-52, -53}, {55, 60}, {56, -59}, {57,
                    59}, {58, -56}, {-54, -55}, {-57, -58}, {
                   61, -62}, {-60, -61}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
                    1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 
                   1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1,
                    1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 3, 1, 1, 6, 5, 3, 6, 6, 3, 3, 4, 4, 
                   5, 5, 6, 5, 1, 5, 1, 6, 3, 6, 3, 4, 4, 6, 5, 1, 6, 1, 3, 6,
                    4, 1, 2, 1, 3, 1, 4, 3, 3, 1, 2, 2, 6, 1, 1, 1, 1, 1, 1, 
                   3, 1, 2, 6, 5, 5, 2, 2, 5, 2, 2, 4, 1, 3, 3, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYQADhZNT3+8H0d/9b9iDBDSOvQXxF+xw/g3iN0DlFzhc
egyiE75B1D04AxF3OAWhE7QzD4HoAzoQOuFD3kOwuo8QWsEOol/BHkI/gOp7
ABU/kMTL5ADSB+U3nN/6A2z+aYi6hrTI22DzoO5JyIbwHQT+PwXTZT2fkdUv
gNrD8H/HZTAfKn7AzXgTSP2BTKh+qDsUhCHmJPycsQpsz/n358DqP70A64ep
X7Bt2xmwOqh9D6DiDVlQ991Lfg2275nRO7C5jyE0A1veY7C+hsyLYPn/Rd/B
/tCccRWs7mneXbC6rOUvwPTnKWBzHKD+ZJDdCQm3pxDzHkDNe7Akbj9Y/VYI
3QCVX/AEQh9YABF3OAXxTwOUPiAI9W+y8BWweb8g8bpAAxJ/DKB4AwCdTs6m

                  "], "Children" -> 
                 RawArray["Integer16",{{2, 45}, {3, 19}, {-1, 4}, {5, 18}, {6,
                    17}, {-2, 7}, {8, -13}, {-3, 9}, {10, -12}, {11, 
                   12}, {-4, -5}, {-6, 13}, {-7, 14}, {15, -11}, {
                   16, -10}, {-8, -9}, {-14, -15}, {-16, -17}, {20, 41}, {21, 
                   23}, {22, -20}, {-18, -19}, {24, 36}, {25, -33}, {26, 
                   34}, {-21, 27}, {28, 32}, {29, 31}, {-22, 
                   30}, {-23, -24}, {-25, -26}, {33, -29}, {-27, -28}, {-30, 
                   35}, {-31, -32}, {37, -39}, {-34, 38}, {-35, 39}, {
                   40, -38}, {-36, -37}, {-40, 42}, {-41, 43}, {-42, 
                   44}, {-43, -44}, {46, 62}, {47, 48}, {-45, -46}, {-47, 
                   49}, {50, 57}, {51, 56}, {52, 53}, {-48, -49}, {54, 
                   55}, {-50, -51}, {-52, -53}, {-54, -55}, {58, 
                   59}, {-56, -57}, {-58, 60}, {-59, 61}, {-60, -61}, {63, 
                   67}, {64, -66}, {65, -65}, {-62, 66}, {-63, -64}, {
                   68, -69}, {-67, -68}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
                    1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1,
                    1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 1, 6, 6, 6, 6, 4, 3, 5, 6, 2, 5, 
                   1, 2, 2, 3, 3, 3, 3, 6, 1, 6, 4, 3, 6, 5, 2, 4, 5, 6, 3, 2,
                    2, 1, 3, 5, 2, 2, 2, 6, 5, 5, 6, 5, 5, 6, 5, 1, 1, 1, 3, 
                   1, 3, 2, 5, 3, 1, 2, 5, 6, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwY4CAk1Pf7wdSDtdkztgD6YRpzF/B/FMQ8QOnIbQCjD4L
oRlKez6D6AeZkbdB+hbYXXoMFofpe2b0Dsy3h4g3zJyxFEQnPIGINzyF0lkQ
/QowOhdCH8iB0A1Q9x0QMLsCNu8MhL8Aar9CNkSdA8x9UPsSoPYnfMp7CJJn
gLrvAdQ8Bp3MQ2D5uxB/H7gOoRl0/jwGh4MmRL7BFmreHYj8gltQdY+h/mPL
A6tvmB23H2z/Qgi9gBMi/mAJhN+wFSrPDhXfBuU/zbsLDu8NCYfB9PoND8Hu
TIP4i+FZ0EcwPx3Ch/lLYR5E/wN1iDsVrvh8ALsT6o8FsyDyMPcl/F73yR4A
+EqwYw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, 29}, {4, 7}, {5, -4}, {-1,
                    6}, {-2, -3}, {8, 9}, {-5, -6}, {10, 17}, {11, -14}, {12, 
                   14}, {-7, 13}, {-8, -9}, {15, -13}, {
                   16, -12}, {-10, -11}, {18, 19}, {-15, -16}, {20, 28}, {21, 
                   27}, {22, -23}, {23, 24}, {-17, -18}, {25, 
                   26}, {-19, -20}, {-21, -22}, {-24, -25}, {-26, -27}, {30, 
                   38}, {31, 37}, {32, 36}, {33, 34}, {-28, -29}, {-30, 
                   35}, {-31, -32}, {-33, -34}, {-35, -36}, {
                   39, -39}, {-37, -38}, {41, 57}, {-40, 42}, {43, -56}, {44, 
                   56}, {45, -53}, {46, -52}, {47, 50}, {48, 
                   49}, {-41, -42}, {-43, -44}, {51, -51}, {52, 54}, {-45, 
                   53}, {-46, -47}, {-48, 55}, {-49, -50}, {-54, -55}, {58, 
                   60}, {-57, 59}, {-58, -59}, {61, -63}, {-60, 
                   62}, {-61, -62}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
                   1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2,
                    1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 1, 4, 1, 6, 6, 3, 1, 1, 2, 3, 3, 4, 
                   2, 3, 2, 4, 2, 5, 6, 6, 1, 4, 2, 2, 5, 1, 4, 5, 5, 6, 6, 5,
                    2, 5, 6, 1, 3, 3, 4, 1, 4, 3, 1, 2, 1, 4, 5, 1, 2, 2, 1, 
                   5, 1, 3, 1, 5, 3, 2, 5, 3, 1, 2, 3}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYICAk1Pf7wdSDxSefgbRCqU9YDoh+9wPMP80RP4AVB2D
TuYhsHji58/2QLrBfOILMP1U5gyIVsiNvA2iGbIgtILw/6cg+sA1iHxDBkR8
waX350DmOAhA5Bc8NnoH4jc4XHoMps9A7FsAtT+hxvADSF3Cx7yHIPrBOYj+
hicQfQ72EH0Hdhg9BIuXQfzhYAcRZ4DKM8D8cwpCN0DlD9yFuO8AlO8A9e+B
Yr57YH4mxN0JORD6QQnE/AX/i76D3QezD+p/haATh8HizyDuezB/NdhdD6Dh
u2BO3H6werXjt8HiUH/A1CtUr7gCdu82iDoGjV1g/oE0iPkNbzffB+ufBZFf
8Nv/BjgcT0DCZcEyiHjDT4j4g/qgo2B7zkDlvwPFAYmBw+M=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, 6}, {4, -4}, {
                   5, -3}, {-1, -2}, {7, 33}, {8, 10}, {9, -7}, {-5, -6}, {
                   11, -31}, {12, -30}, {13, 25}, {14, 24}, {15, 20}, {16, 
                   18}, {-8, 17}, {-9, -10}, {19, -13}, {-11, -12}, {-14, 
                   21}, {22, 23}, {-15, -16}, {-17, -18}, {-19, -20}, {26, 
                   31}, {27, 28}, {-21, -22}, {-23, 29}, {
                   30, -26}, {-24, -25}, {-27, 32}, {-28, -29}, {34, 39}, {
                   35, -37}, {36, -36}, {37, -35}, {-32, 
                   38}, {-33, -34}, {-38, -39}, {41, 57}, {-40, 42}, {43, 
                   47}, {44, -45}, {45, -44}, {-41, 46}, {-42, -43}, {48, 
                   51}, {49, -49}, {-46, 50}, {-47, -48}, {52, 
                   53}, {-50, -51}, {-52, 54}, {55, -56}, {-53, 
                   56}, {-54, -55}, {58, 64}, {59, 63}, {60, -61}, {
                   61, -60}, {-57, 62}, {-58, -59}, {-62, -63}, {-64, -65}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
                    1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 
                   1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1,
                    2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 5, 5, 1, 1, 1, 2, 6, 4, 6, 2, 5, 
                   2, 1, 3, 5, 1, 1, 1, 5, 6, 5, 4, 4, 3, 6, 3, 6, 5, 1, 4, 6,
                    6, 2, 2, 3, 2, 3, 1, 6, 3, 5, 6, 6, 3, 6, 6, 1, 5, 6, 1, 
                   6, 1, 6, 1, 6, 2, 4, 6, 4, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYwADBdtLj/cD6YRv/jfsQTSUf8ABQj9Q+nQTJL5g2fyn
IFqhcM0NsPqnMmfA4ienvgfxGT7lPQTxHU5D+AkPoPL2UPNvQflzVBkOgNRn
Rd4G22cHkW84v/UH2F43401g8a/2a0D0Aaj8A5g9UHcdEP4Pds+Bsp7PYP25
EPMOQNU1QM1/cAZVn8OR6ocgekEpRB/MvQ5QdQ5Pjd6B6WcQekEaxJwF1yDu
Z/gBCScG/TdHwOHBkfcY7O9fEPEH6+P2g+1jh4gfYIPQC9Kh/oWKL+CE0jo9
h8DmbIPoa4DKM2QtfwG2H6be7vRZMB9q3wPhv9fB9sD4UHcvgIYHTF8CjD+r
8pk9AMqXrrw=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 37}, {3, 15}, {4, -13}, {5, 
                   6}, {-1, -2}, {7, 11}, {-3, 8}, {9, -7}, {
                   10, -6}, {-4, -5}, {-8, 12}, {13, -12}, {-9, 
                   14}, {-10, -11}, {-14, 16}, {17, 25}, {18, -23}, {-15, 
                   19}, {20, 24}, {21, -20}, {22, -19}, {-16, 
                   23}, {-17, -18}, {-21, -22}, {-24, 26}, {27, -36}, {28, 
                   36}, {-25, 29}, {-26, 30}, {-27, 31}, {-28, 32}, {-29, 
                   33}, {34, -33}, {-30, 35}, {-31, -32}, {-34, -35}, {38, 
                   46}, {39, 44}, {40, 41}, {-37, -38}, {-39, 42}, {-40, 
                   43}, {-41, -42}, {45, -45}, {-43, -44}, {47, 
                   48}, {-46, -47}, {49, -63}, {50, 62}, {51, 
                   52}, {-48, -49}, {53, 54}, {-50, -51}, {55, 60}, {
                   56, -57}, {57, -56}, {58, -55}, {-52, 59}, {-53, -54}, {
                   61, -60}, {-58, -59}, {-61, -62}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2,
                    1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
                   1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2,
                    2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 1, 6, 4, 3, 5, 1, 2, 3, 6, 6, 3, 4, 
                   1, 2, 2, 5, 1, 5, 3, 5, 5, 1, 5, 1, 1, 5, 6, 2, 4, 3, 3, 1,
                    5, 4, 5, 1, 1, 3, 5, 1, 1, 6, 1, 4, 5, 6, 4, 1, 3, 6, 2, 
                   2, 5, 1, 5, 2, 2, 3, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYQCDByU9n/eDGBq7roDpk1Pfg+iGMoh4Q0bkbXsg7eBw
6TGIf6CY7x5Y/KnROzCdC5FXOAPRp3AKSmdCxaHmMBTI3gDRCVB9B6D0goVx
+8HiU9MegWiH2RB+QzZE/4JNEP6BtVDxOvYnYPNsIe5hqLQ4C1LXoLnuDFg9
VPwB1D0PoPYwQN3hkAP1D9R9CxaYXwbbbw/Rt6AU6t7NEPseVPodBqk7oMZx
Bawe5i+YPQpPweoVFlbfBYufhdh7wM14E4if8CnvIYhmsIOafxoaPgL/n4LV
F64Bh0uDXOah/Ujh6PBQBuyfhAcQWgEa/g73jb4hm3fgEUTe4dT7c2B//PW/
AeaDzAcAtQ2qgw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, 24}, {4, 15}, {-1, 5}, {6,
                    7}, {-2, -3}, {8, 14}, {9, 12}, {10, -7}, {-4, 
                   11}, {-5, -6}, {-8, 13}, {-9, -10}, {-11, -12}, {16, 19}, {
                   17, -16}, {18, -15}, {-13, -14}, {20, -22}, {
                   21, -21}, {-17, 22}, {-18, 23}, {-19, -20}, {25, 35}, {
                   26, -33}, {27, -32}, {28, -31}, {-23, 29}, {-24, 30}, {-25,
                    31}, {32, -30}, {33, 34}, {-26, -27}, {-28, -29}, {
                   36, -39}, {37, 38}, {-34, -35}, {39, -38}, {-36, -37}, {41,
                    58}, {-40, 42}, {43, 50}, {44, 45}, {-41, -42}, {46, 
                   48}, {47, -45}, {-43, -44}, {49, -48}, {-46, -47}, {
                   51, -57}, {52, 53}, {-49, -50}, {54, 56}, {-51, 
                   55}, {-52, -53}, {57, -56}, {-54, -55}, {59, -61}, {
                   60, -60}, {-58, -59}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1,
                    1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
                   1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
                    2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2}], "NominalSplits" -> {}, 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 1, 2, 5, 5, 1, 3, 1, 2, 5, 4, 5, 5, 
                   6, 6, 6, 1, 4, 1, 3, 1, 1, 4, 2, 6, 6, 1, 5, 1, 2, 3, 3, 1,
                    5, 4, 1, 3, 5, 4, 2, 4, 6, 5, 5, 3, 5, 5, 2, 2, 1, 2, 4, 
                   4, 6, 6, 4, 5, 4, 2, 1, 2, 4, 5, 6, 3}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZAADhX/+N+xBDI1jb/cDqQVH3p8D07aXHoNoBSi94Pva
JhDdoJh5CEQn/JyxCqRvwVOZMyC6AaZe4P9TEP+AA4TvYA+hGU5PfQ825ySU
hvITzie8Bql/8DHvIYhWaD79GWzeH4i7HKScboLlj3/4Z49kfsN5qDvZ8h6D
xaHmNpzf+gPsDqj9C+aoMhwA6X9i9A7sjuzI22D9GRA6gYP5JtgddlD1pT2f
we4Wf3MZLJ4FVQ+VTyiDyC94DDHvAFT9Aaj9D2D+hdIOUPvg5sPC6RlE/wIo
7dAsf8QeyZ0wexqgtAI7xJ8HOKD+hdqbsCpuP7I7HjyF6H8g/Pc6Mh/mL4at
EPULoOY5gPwHAMZ0waY=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 26}, {3, 5}, {-1, 4}, {-2, -3}, {6,
                    22}, {7, 8}, {-4, -5}, {-6, 9}, {10, -20}, {11, 21}, {12, 
                   20}, {-7, 13}, {14, 16}, {-8, 15}, {-9, -10}, {17, 
                   18}, {-11, -12}, {
                   19, -15}, {-13, -14}, {-16, -17}, {-18, -19}, {
                   23, -25}, {-21, 24}, {-22, 25}, {-23, -24}, {27, 51}, {28, 
                   31}, {29, 30}, {-26, -27}, {-28, -29}, {32, 42}, {33, 
                   36}, {34, -33}, {35, -32}, {-30, -31}, {37, 40}, {
                   38, -37}, {39, -36}, {-34, -35}, {-38, 41}, {-39, -40}, {
                   43, 49}, {-41, 44}, {45, 46}, {-42, -43}, {-44, 47}, {
                   48, -47}, {-45, -46}, {-48, 50}, {-49, -50}, {52, 62}, {53,
                    55}, {54, -53}, {-51, -52}, {56, 61}, {57, 60}, {58, 
                   59}, {-54, -55}, {-56, -57}, {-58, -59}, {-60, -61}, {
                   63, -66}, {-62, 64}, {-63, 65}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1,
                    2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 
                   1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
                    2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 2, 6, 1, 2, 4, 4, 3, 6, 4, 1, 3, 
                   2, 2, 5, 5, 6, 4, 5, 1, 3, 3, 6, 3, 6, 5, 1, 1, 1, 5, 4, 5,
                    6, 5, 4, 3, 5, 6, 1, 6, 6, 2, 6, 2, 5, 2, 5, 3, 2, 1, 4, 
                   1, 2, 1, 4, 4, 5, 1, 2, 3, 2, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZ4CAk1Pf7wdSC57KnAEJPbgGoRXOQsQT3sgxHADRj43e
gfgMpT2fweqhtEJm5G2Q+gNQcxTKIOIHivnugWiHbIi8whOI/gdQ2sHh0mOw
eTD6FNQdUP0PbCHiCQ2ZF8Hqc6D2QO1bcBpqXxaEnwDlP7CD6nuhfQ3sjpiK
j2D9HsGNYP1Q+QNC/5+CzYHZAzMPKr/gQ95DkHyDVuYhMB8q7gBzp2jWC5C8
Ayz8YP6HhtMCzrzHYPOfQflr4/aD3fcUwm9YAeEvSIO6Hyr+oMzpNZiGhm9D
xm6Ie6DhxlDPfQ7sDmg4OUDVMWyDmv8u7w/Ene/B6hp++9+AhBeEv2AZUB0A
ET6/yA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, -42}, {4, 33}, {-1, 5}, {
                   6, 7}, {-2, -3}, {8, 29}, {9, 22}, {10, 12}, {-4, 
                   11}, {-5, -6}, {13, 17}, {14, 15}, {-7, -8}, {
                   16, -11}, {-9, -10}, {18, 19}, {-12, -13}, {20, 
                   21}, {-14, -15}, {-16, -17}, {23, 28}, {24, 
                   25}, {-18, -19}, {-20, 26}, {
                   27, -23}, {-21, -22}, {-24, -25}, {-26, 30}, {-27, 
                   31}, {-28, 32}, {-29, -30}, {34, -41}, {35, 38}, {
                   36, -34}, {37, -33}, {-31, -32}, {39, -40}, {40, 
                   41}, {-35, -36}, {42, -39}, {-37, -38}, {44, 59}, {
                   45, -58}, {46, 47}, {-43, -44}, {48, 49}, {-45, -46}, {-47,
                    50}, {51, 52}, {-48, -49}, {53, 57}, {-50, 54}, {55, 
                   56}, {-51, -52}, {-53, -54}, {58, -57}, {-55, -56}, {-59, 
                   60}, {61, -64}, {62, -63}, {63, -62}, {-60, -61}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
                   1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1,
                    1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 1, 4, 3, 1, 3, 5, 3, 4, 6, 1, 4, 
                   3, 1, 5, 1, 4, 5, 1, 6, 3, 1, 2, 1, 2, 5, 4, 6, 3, 5, 3, 3,
                    5, 6, 3, 2, 3, 1, 1, 3, 1, 4, 5, 1, 5, 3, 6, 5, 4, 4, 1, 
                   1, 4, 6, 1, 1, 5, 1, 4, 2, 2, 5, 4, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZAADBdtLj/cD6QPPjN6BaIbaebdAtENpz2cQveCX/w17
IP1A4SmYn/ANwl8A1eegk3kIRDd8zHsIEk84PfU9WF/H4nsgvsMHiLiCBkTd
g3l9W0G0gj3U3rfvjoDlP0HV2UHEE84nvAbbAzWvISPyNoh/oIfpA5h+CnGv
g6/8EbD8uffnwPpg+ssg7k84CdGvkAvV7wC1NwfCd8iG0A1Q8QVQ9QuyIOIM
UHsaMiH8BZniz8D6Yyo+gs2FmsPwbssGsP9KIPYe2Bi3H2y/5oyrYHozhK8A
tY+BPe8x2L8bIOIN0PCGuVsh6MRhsP8+PL4Bdg9UnIEDqk989SWwukkPwO5W
WAi1z/znZbD9Av+fQuIDEi4OT2TOgO2FqjsgCJFfcAIoDwB76b6d
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 5}, {-1, 4}, {-2, -3}, {6,
                    22}, {-4, 7}, {8, -20}, {9, 21}, {-5, 10}, {11, 15}, {12, 
                   13}, {-6, -7}, {-8, 14}, {-9, -10}, {-11, 16}, {17, 
                   18}, {-12, -13}, {-14, 19}, {-15, 
                   20}, {-16, -17}, {-18, -19}, {23, 27}, {24, 26}, {
                   25, -23}, {-21, -22}, {-24, -25}, {28, 39}, {29, 
                   30}, {-26, -27}, {31, -37}, {-28, 32}, {33, -36}, {
                   34, -35}, {-29, 35}, {36, -34}, {37, -33}, {-30, 
                   38}, {-31, -32}, {40, 41}, {-38, -39}, {-40, 
                   42}, {-41, -42}, {44, 60}, {45, 49}, {46, 48}, {
                   47, -45}, {-43, -44}, {-46, -47}, {-48, 50}, {51, 58}, {52,
                    56}, {53, -53}, {54, -52}, {-49, 55}, {-50, -51}, {
                   57, -56}, {-54, -55}, {59, -59}, {-57, -58}, {61, 
                   63}, {-60, 62}, {-61, -62}, {64, 
                   65}, {-63, -64}, {-65, -66}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1,
                    2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
                    1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 2, 5, 6, 3, 1, 5, 6, 2, 3, 4, 2, 5, 
                   2, 5, 2, 1, 1, 1, 1, 5, 5, 1, 1, 2, 3, 1, 3, 5, 2, 6, 5, 1,
                    1, 4, 3, 6, 5, 3, 6, 4, 6, 4, 1, 5, 5, 6, 2, 3, 3, 1, 3, 
                   3, 3, 6, 2, 2, 4, 6, 5, 3, 2, 3, 2, 5, 6, 5, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJw1UT1LA0EUXKt0Wtim2FQWWtlrttBW8aPRQhdFYhTORi1lf4Cd2Ni4Nkdq
bYU7tEnIoZA0BiGsJCeCYARBEQR137y9Zpi3M7M770obe4tbQ0KIGUGf2z/+
SP5R9yffPIqpVs+jy04HxHdWHsukK957rqZxnjb4PIfPsE4dIC99xtyVodfM
NfsVc7Vca5Ouu/lKvpOR2KOsTHQIz9YSj/YCaI4KfZovnZPecI6t4n69Olen
vG1wccV+7mcLUc/PJfc08fgt5UXrTfKF91e4TxM9rYJe7vKcc+wh9JL3Yd+j
J8r/Gb6jPO6r2R/ydF7MSPc1/0D4CUyvF7rUo1S9oXeMAW1A9osO/LoxoHvk
6G9OnP9b2LP+Rq7NoDOB18FtjP1I7uNq4G725TL5AwOVyc4=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 32}, {4, 20}, {5, 7}, {-1,
                    6}, {-2, -3}, {8, 18}, {9, 16}, {10, 15}, {11, 13}, {
                   12, -6}, {-4, -5}, {-7, 14}, {-8, -9}, {-10, -11}, {-12, 
                   17}, {-13, -14}, {-15, 19}, {-16, -17}, {21, 27}, {
                   22, -24}, {23, 25}, {24, -20}, {-18, -19}, {-21, 
                   26}, {-22, -23}, {28, 29}, {-25, -26}, {-27, 30}, {
                   31, -30}, {-28, -29}, {33, 39}, {34, -37}, {35, -36}, {
                   36, -35}, {-31, 37}, {-32, 38}, {-33, -34}, {40, 
                   41}, {-38, -39}, {-40, -41}, {43, 63}, {44, 48}, {-42, 
                   45}, {46, 47}, {-43, -44}, {-45, -46}, {49, -62}, {50, 
                   57}, {51, -54}, {52, 54}, {53, -49}, {-47, -48}, {
                   55, -53}, {-50, 56}, {-51, -52}, {58, -61}, {59, 62}, {60, 
                   61}, {-55, -56}, {-57, -58}, {-59, -60}, {64, 66}, {
                   65, -65}, {-63, -64}, {-66, 67}, {68, -69}, {-67, -68}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 
                   1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1,
                    1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 1, 2, 5, 2, 6, 1, 3, 2, 1, 5, 4, 
                   2, 6, 1, 1, 6, 2, 6, 3, 1, 6, 3, 1, 5, 2, 5, 5, 1, 2, 5, 5,
                    5, 4, 6, 3, 3, 5, 5, 4, 2, 4, 4, 3, 3, 6, 4, 4, 1, 1, 3, 
                   1, 2, 5, 2, 3, 1, 6, 1, 2, 1, 6, 6, 2, 3, 3, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYYCAk1Pf7wdSDtdkztgD6YQ3cgwHQPxnRu9A4gccLj0G
0Q1QfsJpiHqGFp8rYH525G2wPpj8NOavYNoOom9Bac9nEP3gCUSe4RRE/4Gj
mhVgWujBJrD5UHMboOoOnIHwEzIh5isszj8M5kP1N+RAxA8U890D2wNz5+n3
58D2QPkJUNrB6wrYfw43If5kgLqvwR5Cw/gH3uc9BKuDumeBWuYhsDmaENrB
HlWfwieI+gcPIOY2fITySyD+ZsiDuNMhF0Iv4Mx7bI8ULg5lEFoh6ATYfw7r
NzwE86H+XjDr4DWwu6DhsmBT3H6we55CwzMDoo4ha/kLMJ8DYr5Cus5NsPoT
kPB44PoCHM4K7BD5BjYIzXAGKv/L/wbYPg2IPxlA/gAA0zPFog==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 44}, {3, 31}, {-1, 4}, {5, 
                   11}, {-2, 6}, {7, 10}, {8, -6}, {-3, 
                   9}, {-4, -5}, {-7, -8}, {12, 15}, {13, -12}, {
                   14, -11}, {-9, -10}, {16, 25}, {17, -22}, {18, -21}, {19, 
                   21}, {20, -15}, {-13, -14}, {-16, 22}, {23, -20}, {
                   24, -19}, {-17, -18}, {26, 27}, {-23, -24}, {28, 30}, {
                   29, -27}, {-25, -26}, {-28, -29}, {32, 34}, {
                   33, -32}, {-30, -31}, {35, 42}, {-33, 36}, {37, 
                   38}, {-34, -35}, {39, 40}, {-36, -37}, {-38, 
                   41}, {-39, -40}, {43, -43}, {-41, -42}, {45, 61}, {46, 
                   60}, {47, -58}, {48, -57}, {49, 56}, {50, 54}, {51, -48}, {
                   52, 53}, {-44, -45}, {-46, -47}, {-49, 55}, {-50, -51}, {
                   57, 59}, {-52, 58}, {-53, -54}, {-55, -56}, {-59, -60}, {
                   62, 67}, {63, 65}, {64, -63}, {-61, -62}, {
                   66, -66}, {-64, -65}, {68, -69}, {-67, -68}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
                   1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1,
                    1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 3, 1, 2, 2, 5, 3, 6, 6, 2, 3, 1, 
                   2, 1, 3, 5, 1, 5, 4, 2, 3, 3, 4, 1, 6, 1, 6, 4, 2, 3, 4, 1,
                    6, 4, 3, 3, 3, 3, 1, 3, 6, 4, 2, 2, 3, 4, 3, 5, 1, 5, 2, 
                   6, 4, 6, 4, 1, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYoAA20uP94NojWNvQfSCX/437IF0w/nPP0F8h6dG70C0
whMo7QBRn/ANqu7k1PdgdacgdMIdmTMg8QeKmYfA4sf5noH4C55CxW87fADR
DJoQeQVHqHk/Z6wCiTvYQfgKwv+fgvgKj6H2ZkbeBstnQ+gFpT2fweaLv7kM
og+chtof9fwimA91F0zdAaj7H8DMKYOIM3BPv4KsfwHU3gO5EHUH/kL8mfAd
SstD/SUVkA/2z0+I+AO2vMdgeUGo/jPvz4HUNTyD2OuQBTHvAdQ9DekQfsPK
uP1g/u7Fm8H8FRB+AjTcYebC/JHADuHD3K+QrnMTLA6SBwB656gg
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 37}, {3, 8}, {4, 5}, {-1, -2}, {-3,
                    6}, {7, -6}, {-4, -5}, {9, 17}, {10, 16}, {11, -13}, {12, 
                   14}, {13, -9}, {-7, -8}, {
                   15, -12}, {-10, -11}, {-14, -15}, {-16, 18}, {19, 35}, {20,
                    31}, {21, -28}, {22, -27}, {-17, 23}, {24, 28}, {25, 
                   27}, {26, -20}, {-18, -19}, {-21, -22}, {29, -26}, {-23, 
                   30}, {-24, -25}, {-29, 32}, {33, 
                   34}, {-30, -31}, {-32, -33}, {36, -36}, {-34, -35}, {38, 
                   45}, {39, 41}, {-37, 40}, {-38, -39}, {42, 
                   43}, {-40, -41}, {44, -44}, {-42, -43}, {-45, 46}, {47, 
                   53}, {48, 50}, {-46, 49}, {-47, -48}, {51, -52}, {
                   52, -51}, {-49, -50}, {54, 55}, {-53, -54}, {-55, 
                   56}, {-56, 57}, {58, -59}, {-57, -58}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1,
                    2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 
                   1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1,
                    1, 2, 1, 1, 2, 1, 2, 1, 1}], "NominalSplits" -> {}, 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 2, 3, 5, 6, 1, 6, 3, 1, 2, 4, 5, 
                   2, 5, 4, 4, 3, 3, 5, 4, 6, 3, 1, 4, 2, 5, 3, 4, 4, 5, 1, 3,
                    3, 4, 6, 4, 6, 4, 2, 3, 5, 4, 4, 3, 1, 4, 3, 5, 6, 5, 6, 
                   3, 1, 1, 1, 5, 1, 1, 4, 4, 1, 5, 3, 3, 4, 6, 6, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZYAA20uP94NoQYP/INrhmswZeyB9IDPyNoheYAeVPzX1
PVh+yi4wP+EMhH/gh/8NkLqEnzNWgegH59+fA4k/KO35DKIbHCD6HZ4YvQPR
Co4Q/oEyiPwCKJ2QDbGPAUo/sIfqg5pzAGq/Qg5E3kGy5BlYHmbOU4j5CVD3
OshnHgK7433eQ7B/oHQC1NwF/z//BNunBlGXoAlV/xGizgFqXwKUD/Ovwyeo
eY8g4bQgDeruhXH7wf79AJWHunvBb2j4hLNuBfM/Q+QX/IKIP5gH0cfAlvcY
rG8VhP8AyneA+veB8N/r4HDoWvYC7K61n9+CzVsOUa9wlOc12BzZnSjhlgCL
h+zrb8H2Qt2pkAcxNwEaz7D4UuCA2ssOoRPMf17eDwDEgMom
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 41}, {-1, 3}, {4, 28}, {5, 13}, {
                   6, -10}, {7, 11}, {8, 9}, {-2, -3}, {10, -6}, {-4, -5}, {
                   12, -9}, {-7, -8}, {14, 16}, {15, -13}, {-11, -12}, {-14, 
                   17}, {-15, 18}, {19, 23}, {20, -20}, {-16, 21}, {
                   22, -19}, {-17, -18}, {-21, 24}, {25, 
                   26}, {-22, -23}, {-24, 27}, {-25, -26}, {29, -40}, {30, 
                   32}, {31, -29}, {-27, -28}, {33, 40}, {34, 37}, {
                   35, -33}, {36, -32}, {-30, -31}, {-34, 38}, {-35, 
                   39}, {-36, -37}, {-38, -39}, {42, 50}, {43, 47}, {44, 
                   45}, {-41, -42}, {-43, 46}, {-44, -45}, {-46, 48}, {
                   49, -49}, {-47, -48}, {51, 52}, {-50, -51}, {53, 56}, {
                   54, -55}, {55, -54}, {-52, -53}, {57, 
                   58}, {-56, -57}, {-58, 59}, {-59, 60}, {61, 69}, {
                   62, -68}, {63, -67}, {64, 68}, {65, -64}, {-60, 66}, {
                   67, -63}, {-61, -62}, {-65, -66}, {-69, -70}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
                    1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 
                   1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
                    2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 
                   1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 3, 6, 6, 3, 1, 2, 4, 1, 2, 2, 5, 1, 
                   3, 1, 3, 4, 6, 5, 4, 1, 5, 2, 2, 5, 4, 5, 2, 6, 1, 5, 2, 4,
                    3, 1, 2, 2, 2, 2, 1, 1, 5, 1, 2, 2, 5, 3, 5, 6, 2, 6, 3, 
                   5, 3, 6, 1, 2, 3, 1, 6, 1, 4, 4, 3, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZICAk1Pf7wdSC77537AH0glQvsNpCM2glnkIRCu87LwB
Fn8ocwakruFD3kMQfWBNXTVI/ME1iPiBxxA6we7SY5B4wjTmryC6ITPyNkhc
ISbhN4h/AMpvEPj/FKwPai+DPUTfgtKez2D7QlZcBos7QMQdnhi9A7vnKYRu
gNrjAFW/AKqu4RlEHuaPBXtnnEY2p+ExVL4Moi8hB+KeBZniz8D+gdrz4Cma
feffnwPzxVdfAssL/70O1r8tbj+Y/5P3CbL5DVBzGmZB5BkyIPY4rIbwD7Dn
PQbzYfbA+NlQ98yHqGuA6nvABpFnkInfbY/kzgVQ9Q/W7vsMDn+oOQ9mWxwB
q4eGswOUfvATEt8NAae27QcAvwW9Aw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 39}, {3, 12}, {4, -10}, {5, 
                   10}, {-1, 6}, {-2, 7}, {8, -6}, {-3, 9}, {-4, -5}, {-7, 
                   11}, {-8, -9}, {13, 32}, {14, 16}, {-11, 15}, {-12, -13}, {
                   17, 23}, {18, -20}, {19, 21}, {-14, 20}, {-15, -16}, {
                   22, -19}, {-17, -18}, {24, 30}, {25, 29}, {26, -25}, {
                   27, -24}, {28, -23}, {-21, -22}, {-26, -27}, {-28, 
                   31}, {-29, -30}, {33, -38}, {34, 37}, {35, -34}, {
                   36, -33}, {-31, -32}, {-35, 38}, {-36, -37}, {40, 62}, {41,
                    55}, {42, 54}, {-39, 43}, {44, 48}, {45, -44}, {
                   46, -43}, {47, -42}, {-40, -41}, {49, 50}, {-45, -46}, {51,
                    52}, {-47, -48}, {53, -51}, {-49, -50}, {-52, -53}, {56, 
                   57}, {-54, -55}, {58, 59}, {-56, -57}, {60, -61}, {-58, 
                   61}, {-59, -60}, {-62, 63}, {-63, 64}, {
                   65, -66}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2,
                    1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 
                   1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1,
                    2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 4, 1, 6, 5, 3, 2, 4, 3, 5, 3, 4, 5, 
                   2, 5, 2, 2, 6, 5, 4, 1, 3, 4, 1, 6, 3, 6, 2, 1, 5, 3, 2, 2,
                    6, 1, 6, 2, 3, 2, 6, 3, 2, 4, 4, 2, 6, 4, 6, 4, 2, 1, 2, 
                   1, 3, 3, 5, 1, 3, 2, 1, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZQCDA9vj9u8H0gtKez6D6ISIg39B9IGTU9+DaAa7S49B
tEJO5G17EP+J0TswvwyqHiq+AKou4Zv/DRD/wfu8h2DaASL+4JbMGRBfwR7C
Z3gK4R+AiZ+G2PcAKr/gA0S/wh++c2BzlTIPgeU/QsQZqp9/Bpt/CqKvIQPq
Piif4cJ7sL4DbsabkN134AfEfQ2nIfIJJ6E0VN8BAcdLYHug7lF4CvHvg0yo
P59B+A5Q+YRsqL2PoeLQcHSAhs8CaHgxcOY9BuuHhRs7hJ8AVQ8P13Sdm5Dw
gfAXvNq6FUxD7VFIh9q3FBpvO92vg9VnQcQdTkH9E84K1ndA8P9TewAIrbP+

                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 11}, {-1, 4}, {5, 8}, {-2,
                    6}, {7, -5}, {-3, -4}, {9, 10}, {-6, -7}, {-8, -9}, {12, 
                   26}, {13, 15}, {-10, 14}, {-11, -12}, {16, 21}, {
                   17, -18}, {18, 20}, {-13, 
                   19}, {-14, -15}, {-16, -17}, {-19, 22}, {23, -24}, {
                   24, -23}, {-20, 25}, {-21, -22}, {27, 34}, {28, 32}, {-25, 
                   29}, {30, -29}, {31, -28}, {-26, -27}, {-30, 
                   33}, {-31, -32}, {35, -41}, {36, 38}, {-33, 
                   37}, {-34, -35}, {39, 40}, {-36, -37}, {
                   41, -40}, {-38, -39}, {43, 59}, {44, 56}, {45, 49}, {46, 
                   48}, {47, -44}, {-42, -43}, {-45, -46}, {50, 55}, {
                   51, -52}, {52, 53}, {-47, -48}, {-49, 
                   54}, {-50, -51}, {-53, -54}, {57, -58}, {
                   58, -57}, {-55, -56}, {60, -62}, {-59, 61}, {-60, -61}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
                    1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2,
                    1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 6, 1, 5, 6, 4, 1, 1, 3, 4, 2, 5, 5, 
                   4, 5, 5, 5, 4, 2, 5, 5, 4, 6, 2, 1, 2, 2, 2, 4, 4, 2, 6, 1,
                    1, 4, 2, 1, 4, 1, 5, 6, 6, 6, 5, 2, 5, 4, 4, 1, 1, 5, 1, 
                   4, 5, 2, 3, 6, 5, 1, 5, 4, 6, 5, 2, 1, 6, 1, 5, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZQADh3Pvz+0H0gonp74H0Qd2GD0E0Ql2lx6D6VMQ8Yay
ns9g+vzWHyB6wRxVhgNA+kFO5G17kHgpVP6p0TuwvC1EfwOUfgCVV3CE8Bmg
5h+AyjPA9D+D6G+wh4grOEBoB5j+0xD3LHgMUecQsuIy2JwnUD7UfgaYOVB9
BwT/P7VHMp+BPe8xiP/geirEv+Y/IeZA/QnXXzIRbP8CmPsydkPcszBuP1gc
ag4DG9Q8KM2wDSIPc8+CLRA+LBxgNMPk1K0g9Q6Xyjcjh1vCu3V/wPwPeQ/t
kcQf3JA5A+Ir/PS/AfYPLN6g4eVgo/8BLA8Lv48Q/QlnIOpg4Z7wAGpO4ufP
YHlouD5oPXUU7B5YvMwCuhsAOkvRYA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 50}, {3, 30}, {4, 14}, {5, 12}, {6,
                    11}, {-1, 7}, {8, 9}, {-2, -3}, {
                   10, -6}, {-4, -5}, {-7, -8}, {-9, 13}, {-10, -11}, {15, 
                   18}, {-12, 16}, {-13, 17}, {-14, -15}, {19, -28}, {20, 
                   24}, {21, 23}, {22, -18}, {-16, -17}, {-19, -20}, {25, 
                   29}, {26, 27}, {-21, -22}, {
                   28, -25}, {-23, -24}, {-26, -27}, {31, -49}, {32, 
                   34}, {-29, 33}, {-30, -31}, {35, 46}, {-32, 36}, {37, 
                   39}, {38, -35}, {-33, -34}, {40, 43}, {41, -39}, {
                   42, -38}, {-36, -37}, {-40, 44}, {-41, 45}, {-42, -43}, {
                   47, 48}, {-44, -45}, {49, -48}, {-46, -47}, {51, 54}, {
                   52, -53}, {-50, 53}, {-51, -52}, {55, 67}, {56, 59}, {57, 
                   58}, {-54, -55}, {-56, -57}, {60, 64}, {61, 63}, {-58, 
                   62}, {-59, -60}, {-61, -62}, {65, 
                   66}, {-63, -64}, {-65, -66}, {-67, 68}, {-68, 
                   69}, {-69, -70}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
                   2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2,
                    2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 
                   2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 1, 6, 2, 5, 1, 3, 2, 5, 3, 3, 2, 5, 
                   6, 5, 4, 4, 6, 6, 1, 1, 5, 4, 3, 6, 2, 3, 5, 6, 2, 5, 3, 3,
                    1, 2, 2, 5, 6, 2, 6, 2, 6, 4, 4, 2, 5, 3, 4, 5, 1, 4, 3, 
                   3, 6, 3, 2, 5, 5, 4, 2, 5, 1, 6, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYAADhXPvz+0H0gfeF96wBwmcnPoezH9m9A5ENzhcegyi
GWrn3QLRCRmRt0HqGs5D9D2whcgnZEHEGaB0wxOI/gd2UPlTEHMToOYdKO35
DDa3DEIfOA2RfwBT58d0EyzfbncALA/V9wCqXiEXYs8CzrzHYPug7oXZr7Ah
bj+YzwGRZ4DKOyyEiC9Ig+r/5Q/29wLtmVfB6p9C1CnA3L8Mqp4dYg4sXBSg
4fTgqswZsH1Qdz8Q+v8U7B5hCJ1wEhJOCtBweKCUeQjsv095D+2RwuOB0qeb
YHd8hIgf0IGoe6AFoR3OQMxfoAnhH3gAsfeAPTQ8ofHw4D1EP8NDqLtmQsOB
9TA4yh9Aw8PhFNBdAN4GvNI=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 40}, {3, 39}, {4, 23}, {5, 7}, {-1,
                    6}, {-2, -3}, {8, 9}, {-4, -5}, {10, -20}, {11, 16}, {
                   12, -11}, {13, 14}, {-6, -7}, {-8, 15}, {-9, -10}, {
                   17, -19}, {18, 22}, {-12, 19}, {20, 
                   21}, {-13, -14}, {-15, -16}, {-17, -18}, {-21, 24}, {25, 
                   37}, {26, -34}, {-22, 27}, {28, 34}, {29, 31}, {
                   30, -25}, {-23, -24}, {32, 33}, {-26, -27}, {-28, -29}, {
                   35, -33}, {-30, 36}, {-31, -32}, {
                   38, -37}, {-35, -36}, {-38, -39}, {41, 61}, {42, 46}, {43, 
                   45}, {-40, 44}, {-41, -42}, {-43, -44}, {47, 58}, {
                   48, -56}, {49, 57}, {50, 51}, {-45, -46}, {52, 55}, {-47, 
                   53}, {-48, 54}, {-49, -50}, {
                   56, -53}, {-51, -52}, {-54, -55}, {-57, 59}, {-58, 
                   60}, {-59, -60}, {62, -65}, {63, -64}, {-61, 
                   64}, {-62, -63}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2,
                    1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 
                   1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
                    1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 3, 4, 2, 2, 4, 2, 1, 6, 6, 4, 5, 3, 
                   3, 6, 6, 4, 5, 3, 4, 5, 4, 2, 3, 6, 5, 2, 6, 3, 5, 3, 3, 1,
                    1, 2, 1, 2, 5, 3, 6, 5, 1, 3, 3, 4, 2, 2, 2, 2, 6, 5, 4, 
                   5, 3, 2, 3, 4, 3, 2, 3, 5, 2, 2, 5, 2, 4, 5, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYYCAk1Pf7wdSC77537AH0Z/yHoLppzJnQHTCAwi94ANE
3OEmlL9j/WcwfQqq/zSEPvARoo7B7tJjEF9BLfMQmIaa/wCq3gGqvqGs5zOY
toWqz4i8DVYn9P8p2BxHiPiDEoi6A0+N3oH1p0PUMZyF2g+z78z7cyA6AWpP
QjZEXQJU/kAW1PxMCN2wTPswWB9f7x+wOx5DzZcseQaiGaD2KcDMz4Xaewbq
X5i5AnOfIdsHUwdzd8MziDkHoLQClE6Amn+ALe8x2J2b4/aD1ZdC9D1YCOEr
QN3N8ASqD2qPAzT8GKD2OUDlF8Dk50H0LzgBCxcI7QA1l+EChH9AEBLeDWug
9s0E0gBShMf9
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 45}, {3, 17}, {4, 14}, {5, -11}, {
                   6, 12}, {7, 9}, {8, -3}, {-1, -2}, {10, 
                   11}, {-4, -5}, {-6, -7}, {13, -10}, {-8, -9}, {15, -15}, {
                   16, -14}, {-12, -13}, {18, 19}, {-16, -17}, {20, 28}, {21, 
                   26}, {22, 23}, {-18, -19}, {24, 
                   25}, {-20, -21}, {-22, -23}, {27, -26}, {-24, -25}, {29, 
                   42}, {30, 36}, {31, -33}, {32, -32}, {33, -31}, {
                   34, -30}, {-27, 35}, {-28, -29}, {-34, 37}, {38, 
                   39}, {-35, -36}, {40, -40}, {-37, 41}, {-38, -39}, {-41, 
                   43}, {-42, 44}, {-43, -44}, {46, 62}, {47, 
                   48}, {-45, -46}, {-47, 49}, {50, 53}, {-48, 51}, {-49, 
                   52}, {-50, -51}, {54, 60}, {55, 56}, {-52, -53}, {57, 
                   58}, {-54, -55}, {-56, 59}, {-57, -58}, {-59, 
                   61}, {-60, -61}, {63, 68}, {64, -67}, {65, -66}, {-62, 
                   66}, {67, -65}, {-63, -64}, {-68, -69}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2,
                    1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 
                   1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2,
                    1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 6, 5, 1, 6, 6, 6, 2, 5, 2, 6, 1, 2, 
                   1, 1, 2, 3, 4, 2, 4, 2, 4, 4, 6, 2, 5, 5, 4, 1, 1, 4, 1, 3,
                    6, 5, 2, 1, 4, 2, 2, 3, 4, 6, 1, 1, 1, 5, 1, 1, 2, 6, 6, 
                   3, 6, 1, 6, 6, 1, 2, 5, 6, 1, 3, 5, 5, 6, 6, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYQCDByU9n/cDaYWTU9+DaAe7S49B9AOvT2fB/NNQ8TMQ
egGUZnhi9A6szwGifsEzCH8BVH3ClW+XwXyougPFfPfA4pOWg8UTnkLEGbIi
b9uDzC+FuCPhMdRcGB9qrkMZhN8AFWdgy3tsj2R+w+y4/WDxzRC6Aaa+Zc4D
sPjk1K0g9QlQcYf1Gx6C3ZcNsZ+BHWJewgaIfgeoOxg0dl3Zj+S+AzB3Q+kE
qH6HD3kPQfQDaDgemN30DOy+jsX3QLRC4ufPYHW2kPBqOP/5J5iO+LMRLH5H
5gyIPgANX7g5CpmHwPacgob7dftzYHug4QwLb4fjfGD7Ep5CzGmwh9hzAGpO
wtujh8Hu0YaYpzAT4s8HKyD0Amh4KnBA6AeuLzbtBwDDlM1s
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 23}, {4, 21}, {5, 16}, {6,
                    12}, {7, 9}, {8, -3}, {-1, -2}, {10, 
                   11}, {-4, -5}, {-6, -7}, {13, 15}, {-8, 
                   14}, {-9, -10}, {-11, -12}, {-13, 17}, {-14, 18}, {19, 
                   20}, {-15, -16}, {-17, -18}, {22, -21}, {-19, -20}, {24, 
                   37}, {25, 26}, {-22, -23}, {27, 36}, {28, 30}, {-24, 
                   29}, {-25, -26}, {31, -33}, {32, 34}, {-27, 
                   33}, {-28, -29}, {-30, 35}, {-31, -32}, {-34, -35}, {
                   38, -41}, {39, 40}, {-36, -37}, {41, -40}, {-38, -39}, {43,
                    47}, {44, -46}, {45, 46}, {-42, -43}, {-44, -45}, {48, 
                   64}, {-47, 49}, {50, 54}, {51, -52}, {-48, 52}, {-49, 
                   53}, {-50, -51}, {55, 59}, {-53, 56}, {-54, 57}, {-55, 
                   58}, {-56, -57}, {60, -63}, {61, 63}, {-58, 
                   62}, {-59, -60}, {-61, -62}, {65, -69}, {66, -68}, {-64, 
                   67}, {-65, 68}, {-66, -67}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 
                   1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1,
                    1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 6, 2, 5, 6, 6, 1, 6, 3, 6, 4, 5, 1, 
                   5, 5, 2, 5, 1, 5, 4, 2, 5, 3, 2, 2, 3, 2, 1, 2, 2, 5, 5, 1,
                    6, 5, 1, 1, 6, 1, 2, 1, 4, 2, 3, 4, 4, 5, 1, 4, 5, 1, 6, 
                   4, 3, 5, 3, 5, 1, 4, 6, 4, 1, 2, 4, 2, 4, 1, 2, 2, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYwCDA5fen9sPpBVOTn0Pog88M3oHohscLj0G0QvOQMQb
TkNoh3fiB8A0jJ8dedsepA7GL+v5DFZvB9H/wOvTWbC4PYTvABU/8ARqD4xf
zHcPbJ8tVF0p1ByYOqj+A5kQ+xKg4g8eQ2iGLKg7oO5fsG3bGbC6pxC+A8yc
2XH7wf5dCKEd1m94CFbPnvcYrH8jVJwz4ibYfKcYsHwCG1R+1sFrYP1QexKi
/E6A7Yf6G+YvWLg0QP0BCxcHqP8Sks1+ge39lPcQ7E5oeCu8WPMUrA8aHwkf
IPIKmpmHwObDwkEHwleA8hMKC8DqHnyEqGc4C9Gv8BnCf2D4+AXY/Sch8f1A
6D/YngXXZMDhpCAA4R+QFTgCNu80RF3CcWj6uOLzYT8AJqvVaw==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 47}, {3, 31}, {4, 7}, {-1, 5}, {-2,
                    6}, {-3, -4}, {8, 26}, {9, 18}, {10, 14}, {11, 13}, {-5, 
                   12}, {-6, -7}, {-8, -9}, {-10, 15}, {16, -14}, {
                   17, -13}, {-11, -12}, {19, 23}, {20, -19}, {21, 
                   22}, {-15, -16}, {-17, -18}, {-20, 24}, {-21, 
                   25}, {-22, -23}, {-24, 27}, {-25, 28}, {29, -29}, {-26, 
                   30}, {-27, -28}, {32, 45}, {33, 44}, {34, 36}, {
                   35, -32}, {-30, -31}, {37, 38}, {-33, -34}, {-35, 
                   39}, {-36, 40}, {41, 42}, {-37, -38}, {
                   43, -41}, {-39, -40}, {-42, -43}, {46, -46}, {-44, -45}, {
                   48, 65}, {-47, 49}, {50, 60}, {51, 52}, {-48, -49}, {
                   53, -58}, {54, 55}, {-50, -51}, {-52, 56}, {-53, 57}, {58, 
                   59}, {-54, -55}, {-56, -57}, {-59, 61}, {62, 
                   63}, {-60, -61}, {64, -64}, {-62, -63}, {66, 70}, {67, 
                   68}, {-65, -66}, {-67, 69}, {-68, -69}, {-70, -71}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
                    2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                   2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1,
                    1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 
                   2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 2, 6, 4, 1, 2, 2, 3, 4, 5, 3, 1, 
                   2, 5, 5, 3, 1, 2, 3, 1, 3, 5, 6, 6, 3, 6, 2, 2, 6, 5, 3, 3,
                    1, 4, 4, 1, 3, 2, 2, 1, 1, 5, 5, 1, 3, 6, 4, 1, 1, 3, 6, 
                   1, 2, 1, 2, 5, 4, 2, 4, 4, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwY4CAk1Pf7wfRz43egegFT2XO2APpA1DxBaU9n0G0g/ib
yyD6wBOIuoRnENohJ/I2SL1DGURdgt2lx2B1mRDxhvNbf4DFH0PNh8ovsIfQ
DhkQdQov1jwF0Qmn358DiTf89L8B4i/Ysf4zWD4bqs4Bav5pqLvPQmgFhcxD
YHOh4gtg9p2EmPfgFFQd1N4DUHcv+A21Z9l8sP0LBP6D6QOf8h6C3SNj/AFs
L9Q/B55C/Q31f0JD5kWwO95t2QA2d03cfrD4ZgjtEOp8GCyeDtHPwJn3GDm8
GGR3gt2jcJTnNdidfyHucWCDqGuQ1PsFdscpiD8ULss+Q/Hfcog9sHg6AIsX
qPkPYPHHATQPAOTNuIs=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {-1, 3}, {4, -42}, {5, 32}, {
                   6, 13}, {7, -9}, {8, 10}, {9, -4}, {-2, -3}, {11, 
                   12}, {-5, -6}, {-7, -8}, {14, 16}, {15, -12}, {-10, -11}, {
                   17, 24}, {18, 22}, {19, 21}, {
                   20, -15}, {-13, -14}, {-16, -17}, {23, -20}, {-18, -19}, {
                   25, 27}, {26, -23}, {-21, -22}, {-24, 28}, {-25, 29}, {30, 
                   31}, {-26, -27}, {-28, -29}, {33, 42}, {34, 38}, {35, 
                   37}, {36, -32}, {-30, -31}, {-33, -34}, {39, 
                   40}, {-35, -36}, {-37, 41}, {-38, -39}, {-40, -41}, {44, 
                   51}, {45, 49}, {46, -47}, {-43, 47}, {
                   48, -46}, {-44, -45}, {50, -50}, {-48, -49}, {52, 
                   56}, {-51, 53}, {54, -55}, {55, -54}, {-52, -53}, {
                   57, -63}, {58, 59}, {-56, -57}, {-58, 60}, {-59, 61}, {-60,
                    62}, {-61, -62}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
                    2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 
                   2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2,
                    1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 2, 3, 3, 6, 5, 6, 6, 6, 5, 3, 1, 
                   3, 3, 2, 4, 2, 2, 6, 2, 2, 1, 3, 1, 4, 1, 6, 1, 6, 2, 3, 2,
                    4, 5, 6, 1, 4, 6, 4, 6, 1, 1, 4, 2, 3, 5, 4, 4, 2, 5, 5, 
                   5, 5, 5, 1, 6, 5, 5, 6, 1, 1, 1, 1, 4, 2, 2, 1, 1, 5, 5, 4,
                    5}], "NumericalThresholds" -> CompressedData["
1:eJxVUD1LQ0EQXBtLCdYW0drKH6DXWgXERgQ5BL8hgqAIae4H2ImogcB1BkEJ
CmnzxIDRRAsjUUyT8JIgQhI1hY0S3+3OK7xmmJndvZ0dXdycWRogommSd3vQ
zQWgKiOlqQC91kSH+dpc1XG1IkglqfMmH33GsA+6uhfU8NUG+vOJuuN2VbjG
XFPsPjidhvtN1m+EW1/+9+4wN9ynAf19/5zrfmMvPH82XXbc7Oz12I+kWrwH
9rPZLOey4LrxP5/3LLntV7zOObG/LiJvu5NnHb4K9/oQbsJ/dsfLjkd/hjiH
/hTfvmL+Mv5LLuScH40gN/LbguTXGfFraeCRoDpEH/pVRl9z/WDc5/0uRDcp
QQvd1Mb4/rR+8sb1Z702+/2tb56zLXejJu4CpNj8E9clryrML2WuPgXi3uY4
4H8qCdpv
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 46}, {3, 33}, {4, 8}, {5, 
                   6}, {-1, -2}, {-3, 7}, {-4, -5}, {9, 25}, {10, 
                   11}, {-6, -7}, {12, 22}, {13, 21}, {14, 15}, {-8, -9}, {16,
                    19}, {-10, 17}, {18, -13}, {-11, -12}, {
                   20, -16}, {-14, -15}, {-17, -18}, {23, 
                   24}, {-19, -20}, {-21, -22}, {26, 29}, {-23, 27}, {-24, 
                   28}, {-25, -26}, {30, -31}, {-27, 31}, {-28, 
                   32}, {-29, -30}, {-32, 34}, {35, 45}, {36, 43}, {37, 39}, {
                   38, -35}, {-33, -34}, {40, 41}, {-36, -37}, {-38, 
                   42}, {-39, -40}, {-41, 44}, {-42, -43}, {-44, -45}, {47, 
                   54}, {48, 53}, {-46, 49}, {50, -51}, {51, -50}, {-47, 
                   52}, {-48, -49}, {-52, -53}, {55, -74}, {56, 73}, {57, 
                   70}, {58, 59}, {-54, -55}, {60, -67}, {-56, 61}, {62, 
                   67}, {63, 65}, {64, -59}, {-57, -58}, {
                   66, -62}, {-60, -61}, {68, 
                   69}, {-63, -64}, {-65, -66}, {-68, 71}, {-69, 
                   72}, {-70, -71}, {-72, -73}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1,
                    1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 
                   1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2,
                    2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 
                   1, 1, 1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 1, 1, 3, 3, 4, 4, 5, 4, 2, 2, 3, 2, 
                   1, 6, 3, 6, 2, 4, 3, 1, 6, 2, 3, 6, 2, 1, 2, 3, 6, 6, 3, 1,
                    2, 4, 2, 6, 5, 4, 6, 5, 4, 2, 3, 3, 5, 1, 2, 6, 1, 3, 6, 
                   2, 5, 1, 3, 5, 5, 4, 4, 1, 2, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZwCDA9vj9u8H0gnJZr/A9Bs5hgNAukEj8xCIz6AJoRd8
zHsI0nLgPYR2sL/0GCT+ACrO8EDmDIhWgNIHMiNvg+lnRu/A5r7jOgqiFc5O
fQ8274f/DZB8wxko/wZUv/D/p2Aaqr/h/OefIPkDJyHqDjyFmLfgN0Q/TLzh
MUT8geOpw2D77kDMc1CFuL/hNFQdVL1CFsT8B/eSX4P1Qd3JUNbzGazuCYTv
AHWfgx3EvwmlEHkHqHkMDtBwKIGIL4Ca05ABMd8hB2rPQkg4M0xO3Qr2H8w+
9rzHIP6CtriHYH3ZEPUJHBBxB6g7DkyH6s/ig5gPNddhFlQcar6CACT8HsBo
1xebwO468f4c2P2smTf3AwAlPrhc
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 4}, {-1, -2}, {5, 12}, {
                   6, -10}, {7, 9}, {-3, 8}, {-4, -5}, {10, 
                   11}, {-6, -7}, {-8, -9}, {13, 31}, {14, 15}, {-11, -12}, {
                   16, 17}, {-13, -14}, {-15, 18}, {19, 28}, {20, 27}, {21, 
                   25}, {-16, 22}, {-17, 23}, {-18, 24}, {-19, -20}, {-21, 
                   26}, {-22, -23}, {-24, -25}, {29, -29}, {-26, 
                   30}, {-27, -28}, {32, 41}, {-30, 33}, {-31, 34}, {-32, 
                   35}, {-33, 36}, {37, -39}, {-34, 38}, {39, -38}, {
                   40, -37}, {-35, -36}, {-40, -41}, {43, 57}, {44, 46}, {-42,
                    45}, {-43, -44}, {47, 54}, {48, -52}, {-45, 49}, {-46, 
                   50}, {51, 52}, {-47, -48}, {53, -51}, {-49, -50}, {
                   55, -56}, {-53, 56}, {-54, -55}, {58, 63}, {59, 62}, {-57, 
                   60}, {-58, 61}, {-59, -60}, {-61, -62}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
                   1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1,
                    2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 3, 6, 6, 2, 3, 1, 1, 1, 3, 1, 6, 3, 
                   5, 1, 5, 2, 1, 4, 4, 2, 1, 3, 2, 5, 6, 1, 2, 3, 1, 4, 6, 1,
                    2, 6, 5, 3, 1, 2, 3, 6, 6, 6, 4, 2, 4, 1, 2, 5, 3, 3, 6, 
                   1, 4, 5, 3, 3, 2, 1, 6, 6, 2, 4, 6, 5, 3, 4, 2, 4, 6, 1, 
                   6}], "NumericalThresholds" -> CompressedData["
1:eJxVUT1LA0EQHQWxs7AUi/MH2NjLrZ2deJ2NLIKGqMRKGxH3B6S1lVXBzkrs
hByagMZ8oGCQHMiGMzaiiQYlaqGZjwPd5vFm3rz52LGFtWCxDwCmgZ6rjZb8
HtqluQjRDWRiRK+808r10FRbFUT7MXPnE+98ItfPhXPmJ13SfXPeFW9TiHAl
9V2Oh+omRh5m+9vI1dF87p//yFANEV4zDczr4Z8mzXXBebcdFEj/xX72ceIF
uZpkXyP9YGu3Tvokv8J7eVNBRP03sh1E75L1Kr/ZIHxgvSmKj8++Sb3JH7/T
nDHrwmWOh+JjBbXModa5jxO9EW4OD8rk3+S43eM7qFW5f0r6DfI/aJO+Jh+p
1/usB+nvJfvJ/OHp7L3/Zz8oMbqI/1m/8X2tzKnlfjCePiOd3B/qom8zV3IX
XdVPxNH/FzU32fo=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 59}, {3, 24}, {4, 16}, {5, 
                   6}, {-1, -2}, {7, 9}, {-3, 8}, {-4, -5}, {-6, 10}, {11, 
                   14}, {-7, 12}, {-8, 13}, {-9, -10}, {-11, 
                   15}, {-12, -13}, {17, 19}, {18, -16}, {-14, -15}, {-17, 
                   20}, {21, -22}, {22, -21}, {23, -20}, {-18, -19}, {25, 
                   31}, {26, 30}, {27, -27}, {28, 
                   29}, {-23, -24}, {-25, -26}, {-28, -29}, {-30, 32}, {33, 
                   48}, {34, 40}, {35, 39}, {36, 38}, {
                   37, -33}, {-31, -32}, {-34, -35}, {-36, -37}, {41, 
                   43}, {-38, 42}, {-39, -40}, {44, 45}, {-41, -42}, {
                   46, -46}, {-43, 47}, {-44, -45}, {49, 53}, {50, -51}, {
                   51, -50}, {-47, 52}, {-48, -49}, {54, 58}, {55, 57}, {
                   56, -54}, {-52, -53}, {-55, -56}, {-57, -58}, {60, 65}, {
                   61, -64}, {62, 63}, {-59, -60}, {64, -63}, {-61, -62}, {66,
                    72}, {-65, 67}, {68, 71}, {-66, 69}, {-67, 
                   70}, {-68, -69}, {-70, -71}, {-72, -73}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,
                    1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 
                   1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2,
                    1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 
                   1, 1, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 5, 2, 6, 6, 1, 2, 1, 2, 1, 5, 3, 5, 
                   5, 5, 1, 1, 6, 5, 3, 4, 2, 2, 2, 6, 1, 1, 3, 2, 6, 3, 2, 3,
                    4, 2, 5, 1, 1, 1, 1, 5, 3, 1, 4, 3, 5, 2, 4, 1, 6, 6, 2, 
                   5, 5, 6, 5, 4, 3, 2, 3, 4, 5, 2, 3, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJw1UTEsQ1EUvSYmkVhJvhmLdKWvk10YLPJDRCXyDcL8R4PEwmLxWM107I9Y
yq+kLQsir35ZJEq6SIjou+f0LSfnnfvuOfe+seXNudU+ESmIHnc/kua7GJaW
yuUuJm9THx7jm8O2R0mBwV/67dFk0N3C/q9HW2nfqv5wqn2CQj1TvrH4qH1n
wE0emBAl91NTvjX4rP0q8LEGul3De7e91/E8pK+0mI884TtXLDVUr+++K6e/
cB7TmyfCfVBFbkcfswMfU8O9PcI+Ajt/rnOsDN+p3+jQleovs5rfnqAuLNKv
c6D+MftJL8cF616Zh7o7Pmsq9keZr7MDwJi5xeKdmeYer/kf3Kv7ipq6p8n1
S+VP+E+ZAE8+oQfce9iiPk7d838q0MIr
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 54}, {3, 33}, {4, 6}, {
                   5, -3}, {-1, -2}, {7, 9}, {8, -6}, {-4, -5}, {10, -31}, {
                   11, 32}, {-7, 12}, {13, 25}, {14, 23}, {15, 21}, {
                   16, -14}, {17, 19}, {18, -10}, {-8, -9}, {-11, 
                   20}, {-12, -13}, {-15, 22}, {-16, -17}, {-18, 
                   24}, {-19, -20}, {26, 31}, {27, -26}, {-21, 28}, {29, 
                   30}, {-22, -23}, {-24, -25}, {-27, -28}, {-29, -30}, {34, 
                   40}, {-32, 35}, {-33, 36}, {37, -38}, {38, -37}, {-34, 
                   39}, {-35, -36}, {41, 51}, {42, 48}, {-39, 43}, {-40, 
                   44}, {-41, 45}, {46, 47}, {-42, -43}, {-44, -45}, {49, 
                   50}, {-46, -47}, {-48, -49}, {52, -53}, {-50, 
                   53}, {-51, -52}, {55, 65}, {56, 63}, {57, -61}, {58, 
                   62}, {-54, 59}, {-55, 60}, {
                   61, -58}, {-56, -57}, {-59, -60}, {
                   64, -64}, {-62, -63}, {-65, -66}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
                    1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
                   1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1,
                    1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 5, 1, 4, 4, 6, 2, 6, 2, 4, 4, 6, 4, 
                   4, 5, 4, 5, 4, 3, 4, 6, 2, 4, 2, 3, 4, 3, 5, 3, 1, 5, 3, 2,
                    4, 6, 1, 5, 1, 3, 4, 2, 3, 5, 4, 6, 5, 5, 1, 6, 1, 5, 5, 
                   1, 5, 5, 3, 3, 1, 2, 2, 4, 6, 2, 4, 5, 3, 6, 1, 2, 6, 1, 
                   1}], "NumericalThresholds" -> CompressedData["
1:eJxNUD0sg1EUfRZhI9YOz2wzWbRvIxaJzSIvEqGR1kSMX2KQiJEQ05uMVonl
u7oV1UREKpYn9TUSST+toRKUvnsu8ZaTc+7POfeNLq7NLfUppaYVP/qYreV6
qCdv6nEPbfPkM6BPi49Bd4LmYj8NurrPXHF/BdyW0+uAeuQ7CXo0BDSXqOs2
5u0rkLLwMS3wKAfuhduxfClwEq7FN6rCh4axXyfIYTrI70Snd3B7uhDzXGH+
gfv2zthHG/jpFej2abzJfH33Lf7nZ7Y2G4ySj3SG+yiPOSf3UoJ5swydZL/5
3Sf/YOTuSFAdTrS4v4y6n2lXuE/mvaCduq0FdMKVzPtV+Oku7qXSyxf3S56/
XBvIYfuLdb63IXXJZw7kn2SfGkQf7Rw/s6/8jx2A7o7O7zhHd7sT/wACX9f1

                  "], "Children" -> 
                 RawArray["Integer16",{{2, 28}, {3, 22}, {-1, 4}, {5, 7}, {-2,
                    6}, {-3, -4}, {8, 12}, {-5, 9}, {10, -9}, {
                   11, -8}, {-6, -7}, {13, 17}, {14, -14}, {-10, 15}, {
                   16, -13}, {-11, -12}, {18, 19}, {-15, -16}, {-17, 
                   20}, {-18, 21}, {-19, -20}, {23, 24}, {-21, -22}, {
                   25, -27}, {-23, 26}, {-24, 27}, {-25, -26}, {29, 57}, {
                   30, -56}, {31, 39}, {32, 34}, {-28, 33}, {-29, -30}, {
                   35, -36}, {36, -35}, {37, -34}, {-31, 38}, {-32, -33}, {40,
                    46}, {41, -43}, {42, 44}, {-37, 43}, {-38, -39}, {-40, 
                   45}, {-41, -42}, {47, 55}, {48, -52}, {49, -51}, {50, 
                   54}, {51, -48}, {52, 
                   53}, {-44, -45}, {-46, -47}, {-49, -50}, {-53, 
                   56}, {-54, -55}, {-57, 58}, {-58, 59}, {60, 65}, {
                   61, -64}, {62, 63}, {-59, -60}, {64, -63}, {-61, -62}, {
                   66, -73}, {67, 69}, {68, -67}, {-65, -66}, {-68, 70}, {71, 
                   72}, {-69, -70}, {-71, -72}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1,
                    1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 
                   1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1,
                    2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 
                   2, 1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{2, 5, 6, 2, 2, 1, 1, 1, 6, 2, 3, 4, 6, 
                   1, 3, 4, 6, 3, 1, 1, 3, 5, 1, 3, 3, 4, 5, 1, 4, 6, 1, 2, 3,
                    2, 1, 6, 5, 1, 2, 4, 6, 6, 1, 6, 4, 2, 6, 2, 6, 3, 6, 4, 
                   6, 5, 1, 2, 1, 5, 2, 5, 6, 6, 6, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYACDBRfen9sP4m6N2w+iD5ye+h5EL3hm9A5ENzyB0jrx
V8Dib/6usAepn7LrMYifAFXvAFOfEXkbLF/a8xnMPwWRT2jj/QWmcyDyD6Dy
DlD9DzIh4gu6iz+C6APmsU1g8SyoefaXwPY1LNM+DHYnVH1DOoROKIOaZwdR
d0CN4wqyeAJ73mMw//mpu2BzHkPcq5ALNR/Kb9i9eDOIr8ABUb9gJSRcHDgj
boLNfQpRlwB1/wE2qDqo+Q2Ser/A+k9Cw0Xg/1Ow+TdlzoDVQf174DaEzwDl
M+hmHgK75wyEr/Ax7yFYHzT8DkD9tUC+6QbY/pOQeEtINgOH6wEHiLzDKWh8
zoe4ewHUfQ5Q9xyA0gnXgfYDAAcZu6w=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 28}, {4, 8}, {-1, 5}, {
                   6, -5}, {-2, 7}, {-3, -4}, {9, 15}, {10, 11}, {-6, -7}, {
                   12, 13}, {-8, -9}, {14, -12}, {-10, -11}, {16, 26}, {-13, 
                   17}, {18, 19}, {-14, -15}, {20, -23}, {21, -22}, {
                   22, -21}, {23, 24}, {-16, -17}, {25, -20}, {-18, -19}, {
                   27, -26}, {-24, -25}, {29, -42}, {30, 33}, {31, 
                   32}, {-27, -28}, {-29, -30}, {34, 42}, {35, 41}, {
                   36, -37}, {37, -36}, {38, 40}, {
                   39, -33}, {-31, -32}, {-34, -35}, {-38, -39}, {-40, -41}, {
                   44, 62}, {45, 59}, {46, 56}, {47, 48}, {-43, -44}, {49, 
                   50}, {-45, -46}, {-47, 51}, {52, 53}, {-48, -49}, {54, 
                   55}, {-50, -51}, {-52, -53}, {57, -57}, {-54, 
                   58}, {-55, -56}, {60, -61}, {61, -60}, {-58, -59}, {63, 
                   64}, {-62, -63}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
                    1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 
                   2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
                    2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 4, 1, 5, 4, 3, 2, 6, 2, 1, 3, 2, 1, 
                   1, 1, 2, 3, 3, 6, 4, 3, 5, 2, 2, 4, 6, 4, 5, 5, 6, 2, 3, 2,
                    1, 5, 1, 1, 5, 4, 1, 5, 2, 2, 2, 2, 5, 1, 5, 1, 5, 1, 6, 
                   3, 6, 1, 5, 4, 6, 3, 5, 2, 3, 2, 5, 3, 4, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJw1UL8vREEY3GskGjlqiXdqUSh03Io/gOg08kLEIY6GehOtVv80CokolbcR
iTiXixxCIthznu7unVxCiPixM997zbyZ79uZ3cnNr88sZpRSkwqfSYr1vP/Z
3OmUPL+czljPx2oNz3WqF2bv/Z6NR1qeh+XdBPNXcr09cOrnZo17RnSbnah5
dIXjK5y7fgdGL+Kzwn29SozO6RtIbrAk+rjcR/Kt+Idb3HNdxQZyhdvDuRL0
fWLULXPJteJrxE8P9z1h/4D7Yfv5De92g3WczzNfddiXO2v/oDe5l4n7K/B7
JAa3RPVAtHLeNlvoKfVzGzdN5EvfwXdPFVx6UEPLJ9CFhwujX9C15GZ/Y/hX
OHc57qd9mYsEftHH1B16LpOHe3yn+qRue+njjv71P5ifyMw=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 39}, {3, 37}, {-1, 4}, {5, 25}, {6,
                    20}, {7, 9}, {8, -4}, {-2, -3}, {10, 14}, {11, -9}, {
                   12, -8}, {13, -7}, {-5, -6}, {15, 19}, {16, -14}, {-10, 
                   17}, {-11, 18}, {-12, -13}, {-15, -16}, {21, 24}, {-17, 
                   22}, {23, -20}, {-18, -19}, {-21, -22}, {26, 30}, {-23, 
                   27}, {28, -27}, {-24, 29}, {-25, -26}, {31, -35}, {32, 
                   35}, {-28, 33}, {-29, 34}, {-30, -31}, {-32, 
                   36}, {-33, -34}, {-36, 38}, {-37, -38}, {40, 54}, {41, 
                   52}, {42, 49}, {43, -46}, {44, 48}, {-39, 45}, {
                   46, -43}, {-40, 47}, {-41, -42}, {-44, -45}, {-47, 50}, {
                   51, -50}, {-48, -49}, {53, -53}, {-51, -52}, {55, 
                   63}, {-54, 56}, {57, 59}, {-55, 58}, {-56, -57}, {-58, 
                   60}, {61, -62}, {-59, 62}, {-60, -61}, {64, -68}, {
                   65, -67}, {-63, 66}, {67, -66}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
                    1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 
                   2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2,
                    1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 1, 5, 2, 5, 5, 2, 4, 3, 4, 4, 2, 6, 
                   1, 4, 4, 2, 3, 5, 4, 6, 3, 1, 5, 1, 6, 5, 5, 6, 4, 3, 1, 6,
                    2, 2, 1, 5, 3, 1, 1, 4, 2, 1, 3, 5, 4, 3, 3, 4, 1, 2, 6, 
                   2, 2, 1, 2, 3, 1, 5, 4, 1, 5, 2, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYICA7/437IHUAkXvu/tBwvaXHoPoA49kzoDFbSH8BjsI
/eAJRNzhQ95DEP1AK/MQWP1HCH/BJwid8ACi7sDJqe9B8gqnXj8G8RWE/j8F
0zB116DqlCDmOMDsg6mD6j+QE3kbrE47jfEAyB6oew4U890Dqz8NUQd3vwOE
XgDV/6C05zOYnwkxxyFkxWUQP+EUVP6x0TuwOVD6wKcXl5H97ZAL1Vdf8Axs
TuCrELD/SyDmNjyD6FMIOnEYzM+GqF+wLW4/2J4yiDqFLIh4ApSGuUuhVucO
WN8TqP3seeDwcoDyHzyF0AvsTp8F0QxQPgPUXQz/2r+D3bkVYt8CQUj4OVwq
3ww2HxquCqfenwPrA4UXAC6Lvlc=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 20}, {3, 5}, {-1, 4}, {-2, -3}, {6,
                    17}, {7, 16}, {8, -13}, {9, 10}, {-4, -5}, {-6, 11}, {12, 
                   15}, {13, 
                   14}, {-7, -8}, {-9, -10}, {-11, -12}, {-14, -15}, {-16, 
                   18}, {-17, 19}, {-18, -19}, {21, 62}, {22, 41}, {23, 
                   36}, {-20, 24}, {25, 34}, {26, 30}, {27, 
                   28}, {-21, -22}, {-23, 29}, {-24, -25}, {-26, 31}, {32, 
                   33}, {-27, -28}, {-29, -30}, {-31, 35}, {-32, -33}, {37, 
                   40}, {38, 39}, {-34, -35}, {-36, -37}, {-38, -39}, {42, 
                   60}, {43, 44}, {-40, -41}, {45, 53}, {-42, 46}, {47, 
                   49}, {-43, 48}, {-44, -45}, {50, 51}, {-46, -47}, {
                   52, -50}, {-48, -49}, {54, 57}, {-51, 55}, {
                   56, -54}, {-52, -53}, {58, 59}, {-55, -56}, {-57, -58}, {
                   61, -61}, {-59, -60}, {63, -65}, {-62, 64}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1,
                    1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 
                   1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1,
                    1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 4, 1, 3, 6, 4, 5, 3, 5, 4, 6, 2, 4, 
                   1, 5, 1, 2, 2, 2, 4, 4, 6, 2, 6, 5, 1, 5, 3, 1, 2, 2, 2, 5,
                    1, 2, 2, 5, 6, 2, 1, 2, 5, 2, 6, 5, 5, 2, 3, 3, 2, 2, 1, 
                   6, 5, 3, 1, 6, 5, 6, 6, 6, 1, 6, 6, 5, 1, 2, 4, 2, 2, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZwCDhO1x+/cD6QWlPZ9BdIJMPbMDkG7IiLxtD6QPnJz6
HixeBpV3uPQYRDvkQuQVHCH8A1B5hTMQ9QeeGL0Dq4OKOzTLHwGbZwvVf6T6
IVg9VF3DYwj94KrMGZC6BQL/n4LNh9IOp6HmPoOaC7XngR3UvCm7HiO7bwHU
/QnTmL+C9Z15fw4sfxJCH4DSC6D6E74fOwwWvw6x/8BTCM0AMx9qP8MdqPzb
d2D/JDyE8mHhApV3OAVRrwAVh7kz4RFUvULmIbB96hCaAep/hqdQWmPXFbA8
W95jkPoHsyHx5JAD8ZdDqDPYvQww+YXQeOSE8Bug9AIOKK098yrYfiifASY+
B6KPYa/+a7A7oeGk8CnvIdic89BwugSlJV/9swcA5EbQaQ==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 50}, {3, 19}, {4, -17}, {5, 
                   7}, {-1, 6}, {-2, -3}, {8, 10}, {9, -6}, {-4, -5}, {-7, 
                   11}, {-8, 12}, {13, 16}, {14, -12}, {
                   15, -11}, {-9, -10}, {-13, 17}, {-14, 18}, {-15, -16}, {20,
                    35}, {21, 31}, {22, 30}, {23, 27}, {-18, 24}, {-19, 25}, {
                   26, -22}, {-20, -21}, {28, 
                   29}, {-23, -24}, {-25, -26}, {-27, -28}, {32, -33}, {
                   33, -32}, {-29, 34}, {-30, -31}, {-34, 36}, {37, -49}, {38,
                    48}, {39, 43}, {40, 41}, {-35, -36}, {-37, 
                   42}, {-38, -39}, {44, 45}, {-40, -41}, {-42, 46}, {
                   47, -45}, {-43, -44}, {49, -48}, {-46, -47}, {51, 66}, {52,
                    57}, {53, 56}, {-50, 54}, {
                   55, -53}, {-51, -52}, {-54, -55}, {-56, 58}, {59, 65}, {
                   60, -63}, {61, -62}, {62, -61}, {63, -60}, {
                   64, -59}, {-57, -58}, {-64, -65}, {67, 69}, {-66, 
                   68}, {-67, -68}, {70, 71}, {-69, -70}, {-71, -72}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
                    1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
                   1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2,
                    2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 
                   2, 2, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 3, 2, 5, 5, 5, 6, 2, 2, 3, 2, 3, 1, 
                   3, 6, 2, 1, 1, 2, 1, 1, 4, 2, 3, 5, 2, 4, 6, 4, 2, 3, 4, 1,
                    6, 3, 2, 3, 6, 6, 5, 1, 2, 4, 4, 5, 6, 6, 2, 3, 1, 4, 6, 
                   5, 4, 6, 5, 3, 2, 5, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYYCAk1Pf7wdSCt/9b9gDaYdnMmdAdIPDpccgcQY7CJ0A
pR+cgahPOPn+HFj+JkT9A63MQyC+w10If4E6hH+gxe4BmK8J4Suchug/8Mzo
Hdicd1xHwfQ+34dg82HiATfCwXSy2S+wvtKez2D5pxB5hszI22Bzoe46AHXP
Aai6A1B/NQj9fwpSp/AEoq8hF6IvoQyizkGy5Bmy+gNQcxOg9jyA8hmg/l4A
VZcADZ8FmeJg/Q3nIfbDzF0ApR8si9sP5nPkPQaHKyeEhpnPkAMx32FDwmGw
/YIQ9zJA1TtsgeqH+osBqp9hFVT8LyTeDjyBhLvCTIh4wi89BgcA3QWvDA==

                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 16}, {4, -14}, {-1, 5}, {
                   6, 15}, {7, -11}, {-2, 8}, {-3, 9}, {10, 11}, {-4, -5}, {
                   12, 13}, {-6, -7}, {-8, 14}, {-9, -10}, {-12, -13}, {17, 
                   21}, {18, 20}, {-15, 19}, {-16, -17}, {-18, -19}, {22, 
                   24}, {23, -22}, {-20, -21}, {25, 30}, {26, -28}, {27, 
                   29}, {28, -25}, {-23, -24}, {-26, -27}, {31, 41}, {
                   32, -39}, {-29, 33}, {-30, 34}, {35, 39}, {-31, 36}, {37, 
                   38}, {-32, -33}, {-34, -35}, {
                   40, -38}, {-36, -37}, {-40, -41}, {43, 57}, {44, 47}, {45, 
                   46}, {-42, -43}, {-44, -45}, {48, -56}, {49, 51}, {
                   50, -48}, {-46, -47}, {52, -55}, {53, 55}, {-49, 
                   54}, {-50, -51}, {56, -54}, {-52, -53}, {58, -61}, {
                   59, -60}, {60, -59}, {-57, -58}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1,
                    2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 
                   1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2,
                    1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2}], "NominalSplits" -> {}, 
                 "RootIndex" -> 1, "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 1, 3, 6, 3, 1, 5, 2, 5, 6, 2, 1, 2, 
                   2, 6, 4, 2, 1, 3, 3, 6, 3, 2, 3, 1, 6, 1, 2, 1, 1, 2, 3, 1,
                    6, 4, 1, 4, 6, 4, 3, 1, 4, 3, 2, 4, 2, 4, 3, 6, 4, 2, 2, 
                   6, 5, 1, 1, 2, 1, 2, 2, 4, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwYwADhZNT3+8H0gnv1v0B0Qt++d+wB9IOp6Di3yB8huv2
50B0gsOlxyDxB/dlzoD4CvYQvsIZiPqGe1Bxns+fweofQvgHnhm9A5sPNbeh
rOcz2ByoOEPtvFtgOjPyNlj9D4i9Cach6h1yIOINT6HqoXyHI9UPweZAzT0g
YHYFbP4TiDoHyZJnYPe5zn0Ntv/I+3NgPlS/QnTKVbB6aDg8eJ/3ECxeuOYG
mF8CcWcDZ95jsP2lUHfnQvQvsDt9FhxOUP80ZEPEGaD+egBVD3P3Aqi6A1B/
MrBDzE2AqkuAqkuAhQsHRH7Bhrj9YPFfegwOIHNbTx2FxBPEPwnhrFvB9AUo
/yyEbvgA8U/CSqB+ADndtyE=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 37}, {3, 4}, {-1, -2}, {5, 31}, {6,
                    14}, {7, 10}, {-3, 8}, {9, -6}, {-4, -5}, {-7, 11}, {12, 
                   13}, {-8, -9}, {-10, -11}, {15, 19}, {16, -16}, {-12, 
                   17}, {-13, 18}, {-14, -15}, {20, 22}, {
                   21, -19}, {-17, -18}, {23, 29}, {-20, 24}, {25, -26}, {26, 
                   27}, {-21, -22}, {-23, 28}, {-24, -25}, {
                   30, -29}, {-27, -28}, {32, 34}, {-30, 
                   33}, {-31, -32}, {-33, 35}, {-34, 36}, {-35, -36}, {38, 
                   55}, {39, 54}, {40, 50}, {41, -47}, {42, 47}, {43, 
                   44}, {-37, -38}, {-39, 45}, {-40, 46}, {-41, -42}, {-43, 
                   48}, {49, -46}, {-44, -45}, {-48, 51}, {52, 
                   53}, {-49, -50}, {-51, -52}, {-53, -54}, {56, -63}, {
                   57, -62}, {58, 61}, {59, -58}, {-55, 60}, {-56, -57}, {
                   62, -61}, {-59, -60}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1,
                    1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 
                   1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2,
                    1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 2, 1, 5, 6, 3, 1, 1, 2, 1, 4, 4, 5, 
                   3, 4, 3, 1, 5, 4, 6, 2, 1, 2, 2, 5, 3, 2, 3, 2, 2, 1, 5, 3,
                    4, 3, 2, 4, 2, 5, 3, 6, 4, 5, 6, 4, 5, 4, 3, 5, 2, 6, 4, 
                   2, 2, 1, 3, 5, 1, 3, 6, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZYAA20uP9wOpBU9lztiD+IIG/8F8O4h4wpmp70G0g2rm
IRDNcPvQJRD9wEzwMFj8GkSfwv+gsyB6gcD/pyDaobTnM0hewQFqfk7kbbA8
VDwByk9oyLyIbB9DGUTe4RTE3gVPjd6BxdvtDoD1PYPyoeIJMH3pEPMcoOIK
UPcqXIe4L+EOhG64xPgM7A6ovx8oQdV9ynsIVqcJ4Tecf38ORB8QhPhnAcze
zXH7wfKZUP9w5D0G0Qdg/l4IkT/ADhGHhUPCNoh4AtR/DHkQ/Q9WQs17DDUf
qq8Bpg/qH1g4JGjOuApWDwu/mVBzOa6B1Tf89L8BdhcbxByw+wCWYKn8
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 36}, {3, 35}, {4, 5}, {-1, -2}, {6,
                    9}, {-3, 7}, {-4, 8}, {-5, -6}, {10, 28}, {11, -25}, {
                   12, -24}, {13, 25}, {14, 15}, {-7, -8}, {16, 23}, {17, 
                   20}, {18, -12}, {19, -11}, {-9, -10}, {21, 
                   22}, {-13, -14}, {-15, -16}, {-17, 24}, {-18, -19}, {
                   26, -23}, {-20, 27}, {-21, -22}, {29, 32}, {-26, 30}, {
                   31, -29}, {-27, -28}, {33, -33}, {-30, 
                   34}, {-31, -32}, {-34, -35}, {37, 57}, {38, -56}, {39, 
                   40}, {-36, -37}, {41, 47}, {42, -44}, {43, -43}, {
                   44, -42}, {45, -41}, {46, -40}, {-38, -39}, {48, 52}, {
                   49, -49}, {-45, 50}, {51, -48}, {-46, -47}, {53, 56}, {54, 
                   55}, {-50, -51}, {-52, -53}, {-54, -55}, {58, -62}, {-57, 
                   59}, {-58, 60}, {-59, 61}, {-60, -61}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
                    1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
                   1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2,
                    2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 3, 5, 2, 2, 6, 5, 6, 1, 3, 3, 6, 4, 
                   3, 2, 2, 4, 5, 2, 3, 1, 4, 4, 2, 3, 1, 5, 6, 6, 3, 4, 1, 1,
                    2, 1, 5, 6, 3, 6, 2, 1, 5, 4, 2, 3, 1, 1, 1, 3, 5, 5, 6, 
                   1, 1, 1, 3, 1, 2, 5, 6, 4, 5, 2, 4, 5, 2, 2, 1}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwYYAA20uP9wOpBrnMQyCawQ7CX/BU5ow9SPwxhH5wZup7
sLw9RD7hNITfcInxGUieQQWif4E2lD4JVf8p7yFI3kEDIq7wAGLegWdG70D8
B6U9n0G0gwPU3JPvz4H1/fO/AbF34WuwPuH/T0H8BQIQ+sE5iLoDmZG3weaH
rLgMthfq/gNQ+2F0QhZE3YIyiH0PvD6dBdt7pPoh2PynEPcwXOoA23cA6p4F
UH8qZEPtgfITYOqN92wGmwO190EJxHyY/IF0iL4H11PB9jz4yfsErM8/+gpY
HczcrXH7wfZsg9ANHHmPweGfEAnW57B+A4TeLPga2d8NJ5XB/lZ4ArGvYSVU
PydE/wFoeB2YBRFPOA0Jt4YPkHh5AFN/HiK+ACp/4N2kG/sBd07OoA==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 16}, {4, 14}, {5, -11}, {
                   6, -10}, {-1, 7}, {8, 11}, {-2, 9}, {
                   10, -5}, {-3, -4}, {-6, 12}, {13, -9}, {-7, -8}, {-12, 
                   15}, {-13, -14}, {17, 19}, {-15, 18}, {-16, -17}, {
                   20, -42}, {21, 25}, {-18, 22}, {23, 
                   24}, {-19, -20}, {-21, -22}, {26, 29}, {27, -26}, {
                   28, -25}, {-23, -24}, {30, 42}, {31, 33}, {-27, 
                   32}, {-28, -29}, {34, 38}, {35, 37}, {-30, 
                   36}, {-31, -32}, {-33, -34}, {39, 40}, {-35, -36}, {
                   41, -39}, {-37, -38}, {-40, -41}, {44, 61}, {45, 50}, {-43,
                    46}, {47, 48}, {-44, -45}, {-46, 49}, {-47, -48}, {51, 
                   52}, {-49, -50}, {53, 59}, {54, 56}, {
                   55, -53}, {-51, -52}, {57, 58}, {-54, -55}, {-56, -57}, {
                   60, -60}, {-58, -59}, {62, 66}, {63, -65}, {-61, 64}, {
                   65, -64}, {-62, -63}, {-66, 67}, {-67, 68}, {-68, -69}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
                    1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 
                   1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1,
                    2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2}],
                  "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{5, 4, 1, 1, 1, 1, 6, 3, 2, 5, 3, 2, 6, 
                   4, 3, 4, 2, 3, 3, 4, 2, 6, 5, 3, 6, 1, 3, 5, 4, 2, 3, 1, 3,
                    6, 6, 4, 4, 5, 6, 2, 1, 6, 1, 1, 3, 3, 4, 6, 1, 3, 1, 4, 
                   2, 5, 1, 6, 5, 2, 6, 3, 1, 2, 5, 5, 2, 4, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZoAA20uP9wMph9KezyD6wA6jhyCagSPuGYhuOL/1B4hO
yD4Hoc9MfQ+iF+RE3rYH6Xtm9A7Ef2AHMUcBKt7wBCKuAFX/AGp+QjpEfkEZ
hL/gKUSdQy5EPAGqf8GnvIcQ82XOgOlTUHuh7lXIgqqHih8wj20CuzsTKu4A
UZfwAWKOwnWIOQ9UMw+BzRHNegFWpwLhw/zFAKUVoO5teA/R3wD134KTUP/c
gJqn8BSsTuEsRNzB6wrEvcf5noH9oQ4x/8B3/xtg9SUQcxnY8h6D+T95n4D1
Q92tUKtzB2wP1H4FaPg6TI/bD7Z37b7PYPM5IfoVFkLEHaDhmMAOEW+AheOs
g9fA9j+Gxsc8iHqFmVB9p96fA9MC/5+C1B84A+QDAFGxwjM=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 47}, {3, 20}, {4, 11}, {5, 10}, {6,
                    8}, {7, -3}, {-1, -2}, {-4, 9}, {-5, -6}, {-7, -8}, {12, 
                   16}, {13, -13}, {-9, 14}, {-10, 15}, {-11, -12}, {-14, 
                   17}, {-15, 18}, {19, -18}, {-16, -17}, {21, 41}, {
                   22, -39}, {23, 36}, {24, 35}, {25, 34}, {26, -28}, {27, 
                   29}, {-19, 28}, {-20, -21}, {30, 31}, {-22, -23}, {32, 
                   33}, {-24, -25}, {-26, -27}, {-29, -30}, {-31, -32}, {-33, 
                   37}, {-34, 38}, {39, -38}, {-35, 40}, {-36, -37}, {-40, 
                   42}, {-41, 43}, {-42, 44}, {45, -46}, {-43, 
                   46}, {-44, -45}, {48, 64}, {49, 50}, {-47, -48}, {51, 
                   54}, {52, 53}, {-49, -50}, {-51, -52}, {55, -63}, {
                   56, -62}, {57, -61}, {58, 63}, {59, 61}, {
                   60, -55}, {-53, -54}, {62, -58}, {-56, -57}, {-59, -60}, {
                   65, -68}, {66, -67}, {-64, 67}, {-65, -66}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
                    1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 
                   2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
                    1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 5, 5, 3, 6, 5, 1, 1, 6, 2, 1, 2, 4, 
                   2, 5, 1, 3, 5, 4, 5, 2, 3, 4, 5, 6, 2, 6, 4, 2, 3, 6, 6, 1,
                    1, 2, 4, 1, 5, 6, 1, 2, 1, 6, 2, 5, 4, 4, 6, 6, 3, 1, 1, 
                   5, 1, 1, 6, 3, 4, 1, 1, 3, 1, 3, 5, 6, 1, 5, 1, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZQCDhvd5D+2BtMK2uP37gXSC3aXHIFohI/I2SPzAyanv
QXwGB6j4TNEPYDom4TdY/AxEfsEzo3dgmrV1M4h+AOU3lPZ8Bos/gfAV7CHm
LAh8FQIynyEHag/U3gSo+gNQdQ5Pofqg6hzKIPINtlD3QO1PgKpL4Mx7DFKX
AFW3ACrekA7Rz8AOkV8AVddwUvky2J71Gx6C1UHd+QDqjoaESLB4wiJI+ByA
6lfwULgCNg9q/gFFzlNg90DDq+GJzBmwvCPUnQL/n4L4D2DhfRaqDup+he/+
N8Du4j/zFuye3ozNYHXQcFlQoXMZrP+2wwewutPQcP8L0acgDDFfYWH1XbD/
CwvA9iyAmqtwxQccbws0Mg+BzZ8P8Y8CBzS8jsieA/t7MUTcweHTVrA+UDgB
ADrgwsA=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 43}, {3, 26}, {4, 22}, {5, 7}, {-1,
                    6}, {-2, -3}, {8, 10}, {9, -6}, {-4, -5}, {11, 13}, {
                   12, -9}, {-7, -8}, {14, 18}, {-10, 15}, {16, 
                   17}, {-11, -12}, {-13, -14}, {19, -19}, {20, 
                   21}, {-15, -16}, {-17, -18}, {-20, 23}, {24, 
                   25}, {-21, -22}, {-23, -24}, {27, 32}, {28, -30}, {-25, 
                   29}, {30, -29}, {-26, 31}, {-27, -28}, {33, -42}, {34, 
                   40}, {35, 37}, {-31, 36}, {-32, -33}, {-34, 38}, {
                   39, -37}, {-35, -36}, {41, -41}, {-38, 42}, {-39, -40}, {
                   44, 61}, {45, 60}, {46, 47}, {-43, -44}, {-45, 48}, {-46, 
                   49}, {-47, 50}, {51, 57}, {-48, 52}, {-49, 53}, {
                   54, -54}, {-50, 55}, {-51, 56}, {-52, -53}, {
                   58, -58}, {-55, 59}, {-56, -57}, {-59, -60}, {62, 
                   65}, {-61, 63}, {64, -64}, {-62, -63}, {66, 69}, {-65, 
                   67}, {68, -68}, {-66, -67}, {-69, -70}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
                    1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 
                   2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 
                   2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
                 "NominalDimension" -> 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{4, 5, 5, 6, 4, 2, 4, 6, 2, 5, 4, 6, 5, 
                   4, 1, 3, 3, 2, 5, 1, 5, 4, 1, 1, 2, 5, 4, 2, 4, 1, 2, 3, 5,
                    1, 6, 4, 3, 6, 6, 5, 6, 6, 3, 3, 5, 2, 2, 2, 4, 3, 3, 5, 
                   1, 5, 5, 5, 1, 3, 5, 2, 3, 1, 6, 3, 6, 3, 4}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZgCDByU9n/eDGLaXHoPoBDsofXLqexDtUAqVf2r0DkQ3
QPkJpyHyCk8g4gr2UH1lEPmGU1D9UHEGqL4FZ9x3g+gHmZG37UH6oPSBZxBz
GBwg6hdkij8D01B3NUDNZTDesxks/ubvCpC+Bqi+BWvj9oPdAVV34DFEHOb+
hpKJEHNg7oXa67AKoq+hZc4DsPmceY9B4g9g/syGqGPggIg3QOUXbILoc2CH
qmeF0Anf/G+A/QWlYe5nuClzBuzPaxCa4Q6EbviY9xCsTinzEDhcVKE0LB4K
CyDysHB0RI0nhRbOD2D//4DaC1W34OT7c2B//YaIN3ieYjgAkof6I0EeYk8D
lP/gJ0TdA4H/T+0BcNO/tQ==
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 42}, {3, 25}, {4, 20}, {5, 19}, {6,
                    14}, {7, 9}, {-1, 8}, {-2, -3}, {10, 13}, {11, -7}, {-4, 
                   12}, {-5, -6}, {-8, -9}, {15, -15}, {16, 18}, {
                   17, -12}, {-10, -11}, {-13, -14}, {-16, -17}, {21, 
                   23}, {-18, 22}, {-19, -20}, {-21, 24}, {-22, -23}, {26, 
                   28}, {27, -26}, {-24, -25}, {29, 40}, {30, -38}, {31, 
                   34}, {32, -30}, {-27, 33}, {-28, -29}, {-31, 35}, {36, 
                   39}, {37, -35}, {38, -34}, {-32, -33}, {-36, -37}, {-39, 
                   41}, {-40, -41}, {43, 62}, {44, 55}, {45, -53}, {
                   46, -52}, {47, 48}, {-42, -43}, {49, 50}, {-44, -45}, {
                   51, -51}, {52, -50}, {53, -49}, {-46, 
                   54}, {-47, -48}, {-54, 56}, {57, -61}, {-55, 58}, {-56, 
                   59}, {60, -60}, {61, -59}, {-57, -58}, {-62, 63}, {-63, 
                   64}, {65, 66}, {-64, -65}, {-66, 67}, {-67, -68}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2,
                    1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 
                   2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2,
                    1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 2, 5, 3, 1, 5, 1, 2, 4, 2, 1, 1, 1, 
                   2, 4, 1, 4, 5, 4, 3, 6, 2, 1, 3, 6, 3, 6, 1, 4, 6, 5, 5, 2,
                    6, 3, 1, 6, 1, 4, 5, 5, 6, 1, 2, 3, 4, 3, 5, 3, 6, 6, 2, 
                   3, 2, 1, 5, 4, 4, 3, 3, 5, 2, 2}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGCwZ4CAk1Pf7wdSB54ZvQPRDQ6XHoNoh4zI2yAlCRzMN0H8
B3YQcYV/Z36A6ITHEPULSns+g+knEL5Ds/wRkD6H5bJXQPSDjO2XwebC1JdB
1B9YshRsXgKUzwC1lwHKf6CYeQis7zTEfQx3ZM6A3VNY8BBEN6hA5B1OQeV1
oOph/nEz3gRSpwB1nwPUHAeoPxzsofRTiLsOQPU9+OV/A+z+lSWbwO6DmV8h
/hJsv/D/p2BzoeYwLIzbD9bPmfcYJL7gf9F3sDug4bHgB8Q8mD8bsiHh+mAl
RJ8ClN8A088GoR+ceX8O7L7fEP0PoO5USNcBx0fCZoh+eHiVQOgEmHmZEHrB
XKg6qP4FJ4DmAgDemblg
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 41}, {3, 7}, {-1, 4}, {5, 
                   6}, {-2, -3}, {-4, -5}, {8, 9}, {-6, -7}, {10, 20}, {11, 
                   13}, {-8, 12}, {-9, -10}, {14, 18}, {15, -15}, {-11, 16}, {
                   17, -14}, {-12, -13}, {19, -18}, {-16, -17}, {21, 28}, {22,
                    24}, {-19, 23}, {-20, -21}, {25, -26}, {26, 
                   27}, {-22, -23}, {-24, -25}, {29, 38}, {30, 34}, {31, 
                   33}, {32, -29}, {-27, -28}, {-30, -31}, {35, -36}, {
                   36, -35}, {-32, 37}, {-33, -34}, {-37, 39}, {
                   40, -40}, {-38, -39}, {42, 58}, {43, -57}, {44, 46}, {-41, 
                   45}, {-42, -43}, {47, 49}, {-44, 48}, {-45, -46}, {50, 
                   55}, {51, -52}, {52, 54}, {
                   53, -49}, {-47, -48}, {-50, -51}, {56, 
                   57}, {-53, -54}, {-55, -56}, {59, 63}, {60, 62}, {
                   61, -60}, {-58, -59}, {-61, -62}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1,
                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2,
                    2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{3, 1, 4, 6, 1, 4, 1, 4, 2, 1, 6, 3, 1, 
                   2, 5, 2, 4, 2, 1, 6, 2, 5, 6, 6, 4, 6, 6, 1, 6, 4, 2, 3, 1,
                    5, 5, 1, 1, 4, 4, 5, 1, 6, 6, 4, 1, 6, 3, 1, 6, 2, 3, 4, 
                   6, 6, 6, 4, 5, 5, 4, 3, 3, 2, 3, 4, 6}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZACDBWmRt+2BdMLc5ef2g2jh/09BfIWTU9+D+A8Unn4G
0Q0CEPEHD9Veg/kf8h6C1T2VOQOmg+dDxKH6GuQyD4FohgnxYHUHbkHULbC7
9BgkfuARlA81Z8EdKP//559g9acg5hy4DxF/ANXHcBYiDnffR6g7OPIeg+gG
KP2g9dRRZH84lPaA/fHgmdE7MJ0J8bdDyIrL+5HcxeAAoRds2wa2tyF37WYw
XQbRrwClYeoXcCWB/e1wGmrPGQjNALXvgMDcZ+BwhcrD7FWIUrwJVscGdfdT
iLsU0iHyDVD9DOxQ/0DVLYDyHWDuWBi3H2zuMgjNABV3yIKakw2NX6i/E2D+
hprvAAovAKdWu0U=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 29}, {3, 11}, {4, -9}, {5, 8}, {-1,
                    6}, {7, -4}, {-2, -3}, {9, -8}, {10, -7}, {-5, -6}, {12, 
                   24}, {13, 23}, {14, 16}, {-10, 15}, {-11, -12}, {17, 22}, {
                   18, 19}, {-13, -14}, {20, -18}, {
                   21, -17}, {-15, -16}, {-19, -20}, {-21, -22}, {25, 
                   26}, {-23, -24}, {-25, 27}, {-26, 28}, {-27, -28}, {30, 
                   49}, {31, 44}, {-29, 32}, {33, 36}, {34, -33}, {
                   35, -32}, {-30, -31}, {37, -42}, {38, -41}, {-34, 39}, {40,
                    42}, {-35, 41}, {-36, -37}, {43, -40}, {-38, -39}, {
                   45, -48}, {-43, 46}, {47, -47}, {-44, 48}, {-45, -46}, {50,
                    51}, {-49, -50}, {-51, 52}, {53, 62}, {54, 
                   55}, {-52, -53}, {56, 57}, {-54, -55}, {58, -61}, {
                   59, -60}, {60, -59}, {-56, 61}, {-57, -58}, {63, 
                   64}, {-62, -63}, {65, -66}, {-64, -65}}], "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
                    1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 
                   1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2,
                    1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>], 
               
               MachineLearning`DecisionTree[<|
                "FeatureIndices" -> 
                 RawArray["Integer16",{6, 1, 3, 2, 1, 5, 2, 1, 1, 1, 4, 1, 6, 
                   5, 3, 4, 2, 1, 2, 2, 5, 1, 3, 1, 3, 5, 6, 4, 1, 1, 1, 2, 3,
                    5, 6, 4, 1, 5, 1, 1, 2, 2, 1, 4, 1, 2, 1, 3, 4, 2, 5, 3, 
                   6, 3, 3, 3, 6, 1, 3, 1, 4, 3, 3, 5, 5}], 
                 "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBwZAADhZNT3+8H0gnTmL+C6Ia0yNv2QPrBE6N3YPGIg39B
9AK7S4/B9FOZMyD5Bd3FH0E0w3X7cyD6wHqnIyC6QeD/U7B+r09nQeoVzkDM
Z7CH6HfIhJjvUNrzGWwe1J4DO4wegu17DOE7QMVh+hZM3n8RzFfJPAQ29w7r
JrB9UPMSHCDqYPYtgJp/IPHkVpC8wq1FYHcnTNc9C+bfgfjjgDrUPKh+B6h+
hw95D8HqEj9/BttjC3XHDuffYPHjK3+Aaah7FZ5B6eoVV8D+gNqv4KFwBWzv
U2h4LgoG+1MhC+LuBWVQd8L8vSVuP1gdVP4BW95jcDjD+ND4SciB0uwQ+Qcz
TzEcAJknB/FPwi89BgeQedD4cPjlfwPs378QOmEhxJ4H64E0AEW0tlI=
                  "], "Children" -> 
                 RawArray["Integer16",{{2, 41}, {3, 7}, {-1, 4}, {5, -5}, {
                   6, -4}, {-2, -3}, {8, -40}, {9, 36}, {10, 32}, {11, 30}, {
                   12, -25}, {13, 24}, {14, 16}, {-6, 15}, {-7, -8}, {17, 
                   22}, {18, 19}, {-9, -10}, {20, -14}, {
                   21, -13}, {-11, -12}, {23, -17}, {-15, -16}, {25, 
                   29}, {-18, 26}, {-19, 27}, {
                   28, -22}, {-20, -21}, {-23, -24}, {-26, 
                   31}, {-27, -28}, {-29, 33}, {34, 
                   35}, {-30, -31}, {-32, -33}, {37, 39}, {-34, 
                   38}, {-35, -36}, {40, -39}, {-37, -38}, {42, 58}, {43, 
                   45}, {44, -43}, {-41, -42}, {46, -57}, {47, 49}, {
                   48, -46}, {-44, -45}, {50, 51}, {-47, -48}, {-49, 52}, {53,
                    56}, {-50, 54}, {55, -53}, {-51, -52}, {-54, 
                   57}, {-55, -56}, {-58, 59}, {60, 61}, {-59, -60}, {62, 
                   63}, {-61, -62}, {64, -66}, {65, -65}, {-63, -64}}], 
                 "LeafValues" -> 
                 RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 
                   1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
                    1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2}], 
                 "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
                 0|>]}, "Processor" -> 
             MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                  "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], 
             "OOBConfusionMatrix" -> {{0.7918367316325505, 
              0.20816326836744944`}, {0.20816326836744944`, 
              0.7918367316325505}}, "Calibrator" -> 
             MachineLearning`CalibratorFunction[
              "TemperatureScaling", <|"Theta" -> 1.3212087870574467`|>], 
             "Method" -> "RandomForest", "PostProcessor" -> 
             MachineLearning`MLProcessor["Identity"], 
             "Options" -> <|
              "FeatureFraction" -> <|
                "Value" -> 6^Rational[-1, 2], "Options" -> <||>|>, 
               "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
               "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
               "DistributionSmoothing" -> <|
                "Value" -> 0.5, "Options" -> <||>|>, 
               "Implementation" -> <|
                "Value" -> "DAAL", "Options" -> <||>|>|>|>, 
           "TrainingInformation" -> <|
            "Configurations" -> 
             Dataset[<|<|
                 "Value" -> "RandomForest", 
                  "Options" -> <|
                   "FeatureFraction" -> <|"Value" -> Automatic|>, 
                    "LeafSize" -> <|"Value" -> Automatic|>, 
                    "TreeNumber" -> <|"Value" -> Automatic|>, 
                    "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                    "Implementation" -> <|"Value" -> Automatic|>|>, 
                  "NaiveImputer" -> Missing["KeyAbsent", "NaiveImputer"], 
                  "EMIterations" -> 
                  Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
               TypeSystem`Assoc[
                
                TypeSystem`Struct[{
                 "Value", "Options", "NaiveImputer", "EMIterations"}, {
                  TypeSystem`Atom[String], 
                  TypeSystem`Assoc[
                   TypeSystem`Atom[String], 
                   TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
                  TypeSystem`UnknownType, TypeSystem`UnknownType}], 
                TypeSystem`Assoc[
                TypeSystem`UnknownType, TypeSystem`UnknownType, 
                 TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
             Dataset[<|
               "Configuration" -> {
                 "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
                  Automatic, "TreeNumber" -> Automatic, 
                  "DistributionSmoothing" -> 0.5, "Implementation" -> 
                  Automatic}, "ModelUtility" -> Missing[]|>, 
               TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                 TypeSystem`Tuple[{
                   TypeSystem`Atom[String], TypeSystem`AnyType, 
                   TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType,
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>], 
             "InputDimension" -> 6, "OutputDimension" -> 1|>, 
           "AnomalyDetector" -> None, 
           "Log" -> <|
            "Example" -> 
             MachineLearning`MLDataset[<|
               "f1" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                  "ID" -> 7168142382301173801|>, 
                "f2" -> <|
                 "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                  "ID" -> 1978735388468315165|>, 
                "f3" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, 
                  "ID" -> 9071588231046195481|>|>, <|
               "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                "LogDensityRatios" -> 0, "RawExample" -> False|>], 
             "TrainingTime" -> 0.8854806, "MaxTrainingMemory" -> 2183400, 
             "DataMemory" -> 227152, "FunctionMemory" -> 285440, 
             "LanguageVersion" -> {14.1, 0}, "Date" -> 
             DateObject[{2024, 10, 11, 15, 6, 19.863676`9.050634560085587}, 
               "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
             "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
             "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
        "TestSet" -> <|
         "Input" -> {{"1st", 25., "female"}, {"1st", 39., "male"}, {
            "1st", 53., "female"}, {"1st", 24., "male"}, {
            "1st", 37., "male"}, {"1st", 29., "female"}, {
            "1st", 25., "male"}, {"1st", 19., "female"}, {
            "1st", 28., "male"}, {"1st", 58., "female"}, {
            "1st", 42., "male"}, {"1st", 45., "female"}, {
            "1st", 60., "female"}, {"1st", 41., "female"}, {
            "1st", 33., "male"}, {"1st", 11., "male"}, {"1st", 36., "male"}, {
            "1st", 76., "female"}, {"1st", 47., "female"}, {
            "1st", 27., "male"}, {"1st", 22., "female"}, {
            "1st", 39., "female"}, {"1st", 64., "female"}, {
            "1st", 55., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 70., "male"}, {
            "1st", 36., "female"}, {"1st", 64., "female"}, {
            "1st", 33., "female"}, {"1st", 27., "female"}, {
            "1st", 53., "male"}, {"1st", 27., "female"}, {
            "1st", 23., "female"}, {"1st", 38., "female"}, {
            "1st", 36., "female"}, {"1st", 
             Missing[], "female"}, {"1st", 30., "male"}, {
            "1st", 24., "female"}, {"1st", 60., "female"}, {
            "1st", 30., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "male"}, {"1st", 47., "male"}, {"1st", 53., "male"}, {
            "1st", 23., "male"}, {"1st", 45., "female"}, {
            "1st", 35., "female"}, {"1st", 50., "female"}, {
            "1st", 49., "male"}, {"1st", 46., "male"}, {"1st", 50., "male"}, {
            "1st", 
             Missing[], "male"}, {"1st", 51., "female"}, {
            "1st", 29., "male"}, {"1st", 15., "female"}, {
            "1st", 16., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 19., "male"}, {"1st", 28., "male"}, {
            "1st", 65., "male"}, {"1st", 44., "male"}, {
            "1st", 33., "female"}, {"1st", 37., "female"}, {
            "1st", 64., "male"}, {"1st", 39., "female"}, {
            "1st", 22., "female"}, {"1st", 28.5, "male"}, {
            "1st", 22., "female"}, {"1st", 52., "male"}, {
            "1st", 22., "male"}, {"1st", 43., "female"}, {
            "1st", 33., "female"}, {"1st", 46., "male"}, {
            "1st", 61., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "male"}, {"1st", 30., "female"}, {
            "1st", 34., "male"}, {"1st", 35., "male"}, {"1st", 56., "male"}, {
            "1st", 56., "male"}, {"1st", 40., "female"}, {
            "1st", 57., "male"}, {"1st", 54., "male"}, {
            "1st", 52., "female"}, {"1st", 
             Missing[], "male"}, {"1st", 61., "male"}, {"1st", 48., "male"}, {
            "1st", 
             Missing[], "female"}, {"1st", 47., "male"}, {
            "1st", 60., "male"}, {"1st", 54., "male"}, {"1st", 21., "male"}, {
            "1st", 45., "female"}, {"1st", 50., "female"}, {
            "1st", 21., "male"}, {"1st", 
             Missing[], "male"}, {"1st", 
             Missing[], "male"}, {"1st", 62., "male"}, {"2nd", 30., "male"}, {
            "2nd", 18., "male"}, {"2nd", 34., "male"}, {"2nd", 28., "male"}, {
            "2nd", 4., "female"}, {"2nd", 34., "male"}, {
            "2nd", 23., "male"}, {"2nd", 40., "female"}, {
            "2nd", 42., "male"}, {"2nd", 22., "female"}, {
            "2nd", 19., "male"}, {"2nd", 54., "male"}, {"2nd", 37., "male"}, {
            "2nd", 24., "male"}, {"2nd", 31., "male"}, {
            "2nd", 22., "female"}, {"2nd", 48., "female"}, {
            "2nd", 32., "male"}, {"2nd", 17., "male"}, {"2nd", 25., "male"}, {
            "2nd", 18., "male"}, {"2nd", 34., "female"}, {
            "2nd", 54., "male"}, {"2nd", 30., "female"}, {
            "2nd", 40., "male"}, {"2nd", 35., "male"}, {"2nd", 47., "male"}, {
            "2nd", 0.6667, "male"}, {"2nd", 24., "female"}, {
            "2nd", 44., "male"}, {"2nd", 62., "male"}, {"2nd", 43., "male"}, {
            "2nd", 48., "female"}, {"2nd", 36., "male"}, {
            "2nd", 54., "female"}, {"2nd", 50., "male"}, {
            "2nd", 29., "female"}, {"2nd", 60., "female"}, {
            "2nd", 17., "female"}, {"2nd", 47., "male"}, {
            "2nd", 24., "male"}, {"2nd", 32., "male"}, {"2nd", 34., "male"}, {
            "2nd", 22., "female"}, {"2nd", 35., "male"}, {
            "2nd", 31., "male"}, {"2nd", 3., "female"}, {"2nd", 
             Missing[], "female"}, {"2nd", 34., "female"}, {
            "2nd", 36., "male"}, {"2nd", 61., "male"}, {
            "2nd", 42., "female"}, {"2nd", 30., "male"}, {
            "2nd", 46., "male"}, {"2nd", 41., "female"}, {
            "2nd", 19., "male"}, {"2nd", 39., "male"}, {
            "2nd", 32.5, "male"}, {"2nd", 36.5, "male"}, {
            "2nd", 19., "male"}, {"2nd", 20., "male"}, {
            "2nd", 29., "female"}, {"2nd", 19., "female"}, {
            "2nd", 8., "female"}, {"2nd", 36., "male"}, {
            "2nd", 0.8333, "male"}, {"2nd", 50., "female"}, {
            "2nd", 26., "male"}, {"2nd", 25., "male"}, {"2nd", 59., "male"}, {
            "2nd", 40., "female"}, {"2nd", 25., "male"}, {
            "2nd", 18.5, "male"}, {"2nd", 14., "male"}, {
            "2nd", 31., "female"}, {"2nd", 30., "male"}, {
            "2nd", 31., "female"}, {"2nd", 
             Missing[], "male"}, {"2nd", 4., "female"}, {
            "2nd", 29., "female"}, {"2nd", 36., "male"}, {
            "2nd", 31., "male"}, {"3rd", 42., "male"}, {"3rd", 13., "male"}, {
            "3rd", 40., "female"}, {"3rd", 19., "female"}, {
            "3rd", 6., "female"}, {"3rd", 17., "female"}, {
            "3rd", 38., "female"}, {"3rd", 11., "female"}, {
            "3rd", 39., "male"}, {"3rd", 26., "male"}, {"3rd", 9., "male"}, {
            "3rd", 40., "male"}, {"3rd", 20., "male"}, {
            "3rd", 5., "female"}, {"3rd", 18., "female"}, {
            "3rd", 26., "male"}, {"3rd", 26., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 22., "male"}, {
            "3rd", 22., "male"}, {"3rd", 18.5, "female"}, {
            "3rd", 21., "male"}, {"3rd", 18., "female"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 37., "female"}, {
            "3rd", 21., "male"}, {"3rd", 32., "male"}, {"3rd", 29., "male"}, {
            "3rd", 26., "male"}, {"3rd", 18., "male"}, {"3rd", 20., "male"}, {
            "3rd", 31., "male"}, {"3rd", 43., "male"}, {
            "3rd", 36., "female"}, {"3rd", 19., "male"}, {
            "3rd", 44., "male"}, {"3rd", 17., "male"}, {
            "3rd", 22., "female"}, {"3rd", 19., "male"}, {
            "3rd", 29., "male"}, {"3rd", 34., "male"}, {"3rd", 27., "male"}, {
            "3rd", 21., "male"}, {"3rd", 17., "male"}, {
            "3rd", 36.5, "male"}, {"3rd", 30., "male"}, {
            "3rd", 0.1667, "female"}, {"3rd", 24., "male"}, {
            "3rd", 23., "male"}, {"3rd", 22., "female"}, {
            "3rd", 16., "male"}, {"3rd", 39., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 16., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 33., "male"}, {
            "3rd", 38., "male"}, {"3rd", 16., "female"}, {
            "3rd", 40., "male"}, {"3rd", 51., "male"}, {"3rd", 37., "male"}, {
            "3rd", 24., "female"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 18., "female"}, {
            "3rd", 23., "female"}, {"3rd", 28., "female"}, {
            "3rd", 2., "female"}, {"3rd", 28., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 30., "male"}, {
            "3rd", 27., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 33., "male"}, {
            "3rd", 31., "male"}, {"3rd", 4., "male"}, {"3rd", 49., "male"}, {
            "3rd", 33., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 32., "male"}, {
            "3rd", 21., "male"}, {"3rd", 18.5, "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 34.5, "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 26., "male"}, {
            "3rd", 4., "female"}, {"3rd", 26., "female"}, {
            "3rd", 36., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 37., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 22., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 36., "male"}, {
            "3rd", 30., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 28., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 30., "male"}, {
            "3rd", 20.5, "male"}, {"3rd", 23., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 25., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 18., "male"}, {
            "3rd", 15., "female"}, {"3rd", 33., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 41., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 32., "male"}, {
            "3rd", 16., "male"}, {"3rd", 3., "female"}, {
            "3rd", 16., "male"}, {"3rd", 14., "male"}, {"3rd", 21., "male"}, {
            "3rd", 0.75, "male"}, {"3rd", 26., "female"}, {
            "3rd", 21., "male"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 24., "male"}, {
            "3rd", 28., "female"}, {"3rd", 32., "male"}, {
            "3rd", 17., "male"}, {"3rd", 24., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 4., "male"}, {"3rd", 2., "male"}, {
            "3rd", 22., "female"}, {"3rd", 
             Missing[], "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 50., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 2., "female"}, {
            "3rd", 16., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 38.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 1., "female"}, {
            "3rd", 24.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 4., "male"}, {"3rd", 2., "female"}, {
            "3rd", 45., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 32., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 33., "male"}, {
            "3rd", 23., "female"}, {"3rd", 29., "female"}, {
            "3rd", 25., "male"}, {"3rd", 0.4167, "male"}, {
            "3rd", 32., "male"}, {"3rd", 30.5, "male"}, {
            "3rd", 44., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 7., "male"}, {"3rd", 9., "female"}, {
            "3rd", 29., "female"}, {"3rd", 36., "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 40.5, "male"}, {
            "3rd", 33., "male"}, {"3rd", 18., "female"}, {
            "3rd", 14., "female"}, {"3rd", 22., "male"}, {
            "3rd", 38., "female"}, {"3rd", 51., "male"}, {
            "3rd", 18., "male"}, {"3rd", 21., "male"}, {
            "3rd", 47., "female"}, {"3rd", 
             Missing[], "male"}, {"3rd", 21., "male"}, {
            "3rd", 45.5, "male"}, {"3rd", 
             Missing[], "male"}, {"3rd", 27., "male"}}, 
          "Output" -> {
           "died", "died", "survived", "died", "survived", "survived", 
            "survived", "survived", "survived", "survived", "died", 
            "survived", "survived", "survived", "died", "survived", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "survived", "survived", "died", "died", "survived", 
            "survived", "survived", "survived", "survived", "survived", 
            "survived", "survived", "died", "survived", "died", "survived", 
            "survived", "survived", "died", "died", "died", "survived", 
            "survived", "survived", "survived", "died", "survived", "died", 
            "died", "died", "survived", "died", "survived", "survived", 
            "survived", "died", "died", "died", "died", "survived", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "survived", "died", "survived", "survived", "died", "died", 
            "survived", "survived", "survived", "survived", "survived", 
            "died", "died", "survived", "died", "survived", "survived", 
            "died", "died", "survived", "survived", "died", "died", "died", 
            "died", "survived", "survived", "survived", "died", "survived", 
            "died", "died", "died", "died", "died", "survived", "survived", 
            "died", "survived", "died", "survived", "died", "died", "died", 
            "survived", "died", "survived", "survived", "died", "died", 
            "died", "died", "survived", "died", "survived", "died", "died", 
            "died", "survived", "survived", "died", "survived", "died", 
            "survived", "died", "survived", "died", "survived", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "survived", "died", "died", 
            "survived", "died", "died", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "survived", "died", "died", 
            "died", "survived", "died", "died", "died", "survived", "died", 
            "survived", "died", "survived", "survived", "died", "survived", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "died", "died", "died", "died", "died", "died", "survived", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "survived", 
            "died", "died", "died", "died", "died", "died", "survived", 
            "died", "died", "died", "died", "died", "survived", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "survived", "died", "survived", "died", "died", "died", "died", 
            "survived", "survived", "survived", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "survived", "died", 
            "died", "died", "survived", "died", "died", "died", "died", 
            "died", "survived", "survived", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "survived", "died", 
            "died", "survived", "died", "died", "died", "died", "survived", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "survived", "survived", "died", "survived", 
            "survived", "died", "survived", "died", "survived", "survived", 
            "survived", "died", "died", "died", "survived", "died", 
            "survived", "survived", "survived", "survived", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "survived", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "died", "died", "died", 
            "died", "died", "died", "survived", "died", "died", "died", 
            "died", "died", "died", "died", "died", "died", "died", "died", 
            "died", "survived", "died", "survived", "survived", "died", 
            "died", "died", "died", "survived", "survived", "survived", 
            "died", "died", "died", "died", "died", "died", "died", 
            "survived", "died", "died", "died", "survived", "died", "died", 
            "died", "died", "died"}|>, 
        "Predictions" -> {
         "survived", "died", "survived", "died", "died", "survived", "died", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "survived", "died", "died", "died", "survived", "survived", "died", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "survived", "survived", "survived", "survived", "died", "survived", 
          "survived", "survived", "survived", "survived", "died", "survived", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "survived", "survived", "survived", "died", "died", "died", "died", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "died", "died", "survived", "survived", "died", "survived", 
          "survived", "died", "survived", "died", "died", "survived", 
          "survived", "died", "died", "died", "died", "survived", "died", 
          "died", "died", "died", "survived", "died", "died", "survived", 
          "died", "died", "died", "survived", "died", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "died", 
          "died", "died", "died", "survived", "died", "died", "survived", 
          "died", "survived", "died", "died", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "survived", 
          "died", "survived", "died", "died", "died", "survived", "survived", 
          "died", "died", "died", "survived", "died", "survived", "died", 
          "survived", "survived", "survived", "died", "died", "died", "died", 
          "survived", "died", "died", "survived", "survived", "survived", 
          "died", "died", "survived", "died", "died", "survived", "died", 
          "died", "died", "died", "died", "died", "survived", "survived", 
          "survived", "died", "survived", "survived", "died", "died", "died", 
          "survived", "died", "died", "died", "survived", "died", "survived", 
          "died", "survived", "survived", "died", "died", "died", "died", 
          "died", "survived", "survived", "survived", "died", "survived", 
          "died", "died", "died", "died", "died", "survived", "survived", 
          "died", "died", "survived", "died", "died", "survived", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "survived", "died", "died", "survived", "died", "died", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "survived", "survived", "survived", "survived", "died", "died", 
          "died", "survived", "died", "survived", "died", "died", "died", 
          "died", "died", "died", "died", "died", "survived", "died", "died", 
          "died", "survived", "died", "survived", "died", "died", "survived", 
          "survived", "died", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "survived", "died", "died", "died", 
          "died", "died", "survived", "survived", "died", "died", "died", 
          "survived", "died", "survived", "died", "survived", "survived", 
          "died", "died", "died", "died", "survived", "died", "died", "died", 
          "survived", "survived", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "survived", "died", "died", 
          "survived", "died", "died", "died", "died", "survived", "died", 
          "survived", "survived", "died", "survived", "died", "died", "died", 
          "died", "died", "died", "survived", "survived", "died", "died", 
          "died", "survived", "died", "died", "died", "died", "died", 
          "survived", "died", "died", "died", "died", "died", "survived", 
          "died", "died", "died", "died", "died", "died", "survived", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "survived", "survived", "died", "died", "died", "died", "survived", 
          "survived", "died", "died", "died", "died", "died", "died", "died", 
          "died", "died", "died", "died"}, 
        "LogProbabilities" -> CompressedData["
1:eJytWFlIlFEYHYdKWh5qSLKpLF8maZEWywSRNkoHihgozJYHyaiw1ahALAwr
1IegwaTI0MpCS9KiCCq+B1NTEzFnTGlKs6ZVya3c0iKY/+Vc4nCZnoaP+91v
Oed89975QxMPOpLMJpMpM8Bk+vtrti5I2FAxKhGjDUenRD2TpuTiIze9bil0
z3vqaugVXDef2hySvq9RwqqdJatTfqg28yfr9wZix3xcMSxLx3ntlufVtB70
Z/Fd64sircfbxZGfnp+d+FV23HndNz36pZRnPjmyd9NP7XjKup/1sfg0np/1
6tr/mx+09yy29PRcc4kjbV2T82ofX9esn8XX5Qfx2HTrYaGcHZF7ibaTjQGV
io36Y/WgP51XsHG/Nj6EP20+NPvz93zC+AwPXX+sj/JL8Gb5dfFGf1292e+H
p031VEmQLfdESvwvMQVbOidX1sr23NLfNbYhJS/qHvXP/PH8QH/sj9XD8mF/
7DxDf+U+gfhYH+uPrTMb5wb9dOOxeoy+jD7Z/vLz86OctgGZ9aAgJ2awntbH
+GL6wHXcj/rEfnT5YHph/rp6Rhv3M/1hHDavqC+M9697z7BZ/2x+cN6wT8Sb
6RPrZHxjfLTxPsD3Z/jc7kNDUV0S2bxq9jG3R+ouBD9+UdYhZy/Em/dXtCnr
uN/z/tutwM+d8jtla3xxR6uS35grY86+tz7tcC95JTPr4xZlT+pV/PE+wHpK
dpYE377YLbVZqbuvd7Yo8dFWzh9yP2O/iB/mx3XMj3ihP5sPjMfeOxuj1yQl
NNVJadGNdnPooET5dFPm0xHWg/EwP8af4ePN4JHtZ/c14oH52H7UH8MT68f8
LB/iy+oZaRmq8YZ/Esf4mLHJy7wKH5iPzRPbP6FryJUT9l0CY6ypwwlvlfMJ
60c9Z/RfDI3b2CNtb86FSFazRFhXFjyK/SLty6bbgxLea+Ot3B8QD+uZ6LS0
b/F2yZzrkYNV214r+1FviAfGQz2hP9o4b4gH0y/W5zmwMPvwmW/SXPjpUu/l
dwpfqEd2njF94XwjHrjO9I39TO2MSM+L/Cw5QXl3Z679oPgr7wvgW1cvDG/k
h/HF5pftZ/3j/PlbD84v8q2LH+oN4yHf2A/Oi2RsuZI5rUF22WOz8pf3K/HZ
ewD7Z/0h/zgP7P862gYvp308YX70RzzQZucdu18Zf+iP7ynEn53X7Pxk+LL5
Z/1gfDYPuM6+R2B8gweDF3/PI8SP3Z9YL+pP93zAdeQH389YD/LF+MR+8f2A
eLPv3xgP/bEf5I/1z+53xPMPZTKcMA==
         "], "CountMatrix" -> {{211, 32, 0}, {50, 100, 0}}, 
        "IndicesMatrix" -> {{CompressedData["
1:eJwt0ctPDwAAAOBfFvOYx9hQpkna0BwqOvRYWVaqzVSEFOmF9LDII8Wq9bAw
DoxNXGwY1tpMDua1aRw8RmU087hYcWBpnTy+g8P3F3zhxTU51UGBQOANEwhm
GjMJIZRIlrGcKGKIZSVxxJNAIkmkkEoaGWSynmxyyWMT+WylgEJ2UEIpZZSz
kwoqqaaGvdRSxwEOcoh6GmjkKE200Eo7nZzgJKc4zRnOco7zXOAiXVziMle4
yjWuc4Ob3KKbHm5zh17uco/7POAhj3jME/p4yjOe84KXvOL1/4t+BhjkLe94
zxAf+MgnPvOFrwwzwje+84OfjPKLMcb5zR/+EiQ/mIlMYjJTmMp0ZjCL2cxh
LvOYTwihLGAhYSwinMVEsISlRLGCaGKIZRXxJJJEMimsZg1ppLOWDLJYRzY5
5LKBjWxmC/kUUMg2tlNEMSWUUkY5u9hNBXuopIpa9rGfOg5TzxEaOEYTzbTQ
ShvtdHCcf3ZRYbs=
           "], {1, 35, 48, 137, 143, 186, 189, 196, 199, 202, 204, 220, 242, 
           249, 250, 251, 256, 267, 273, 284, 287, 318, 325, 330, 333, 335, 
           342, 347, 359, 367, 381, 382}, {}}, {{5, 7, 9, 16, 17, 20, 31, 44, 
           45, 49, 57, 69, 75, 76, 78, 79, 84, 88, 96, 98, 105, 113, 130, 155,
            160, 181, 203, 209, 216, 222, 227, 228, 230, 237, 248, 259, 263, 
           268, 295, 297, 304, 310, 311, 323, 336, 368, 369, 374, 384, 
           388}, CompressedData["
1:eJwV0U0rwwEAwOE/SlpeajZTXjKxaWm7TKYVWWoOXFaSC5GDEg5WyGEOWnJE
KTc0BwdpTnL0WZTTdnNy8Dg8X+D3i28dlPZbgiDYpo12OgjRSRfdhOklSh8x
+hlgkCGGGSHOKGMkSDJBmgxTTJNjljnmKbBAkUWWKbHCGutssMMuexxS5oRT
KpxxTpULLrnimhtuueOeBx6p8cQzL7xS5413Pvjki28aNPnhl1YRe4gQZZwE
KSZJkyFLjhnyFFhilU3+ZxxxzB+ruyWG
           "], {}}}, "ExtendedClasses" -> {"died", "survived"}, "Weights" -> 
        SparseArray[Automatic, {393}, 1., {1, {{0, 0}, {}}, {}}], 
        "BatchEvaluationTime" -> 0.0002476854961832061, 
        "SingleEvaluationTime" -> 0.0146692, "Version" -> {14.1, 0}|>]]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.937623688821827*^9},
 CellLabel->
  "Out[139]//TableForm=",ExpressionUUID->"6c05c26e-6ba1-594e-b503-\
7ffffc4c5ddc"]
}, Open  ]],

Cell["\<\
We can see that the train and test dataset have the similar level of \
accuracy, so can refers that it is not overfitting / underfitting\
\>", "Abstract",
 CellChangeTimes->{{3.937623718767763*^9, 
  3.9376237532162037`*^9}},ExpressionUUID->"2e7f5901-b0b9-c14f-826d-\
2f82bcfa904c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 2. What is Gini Impurity", "Section",
 CellChangeTimes->{{3.9376264273645267`*^9, 
  3.937626433297827*^9}},ExpressionUUID->"4d1f6b79-bc5d-ef44-92d1-\
bd29bd06fe03"],

Cell[TextData[{
 "Gini impurity is a ",
 StyleBox["measure used in decision trees",
  FontWeight->"Bold"],
 " to ",
 StyleBox["evaluate the quality of a split",
  FontWeight->"Bold"],
 ". It quantifies how often a randomly chosen element from the set would be \
incorrectly labeled if it was randomly labeled according to the distribution \
of labels in the subset."
}], "Text",
 CellChangeTimes->{
  3.9376266515611477`*^9},ExpressionUUID->"0d4f07be-0b80-4545-88d6-\
75122d7ed0cf"],

Cell[CellGroupData[{

Cell["Definition", "Subsection",
 CellChangeTimes->{{3.9376266956918373`*^9, 
  3.9376267071067944`*^9}},ExpressionUUID->"1d6b84b9-1051-ab48-8f6e-\
f45eac1fd2a5"],

Cell["\<\
Gini impurity measures the likelihood of misclassified a randomly chosen \
element from a dataset. It ranges from 0 to 0.5 for binary classification, \
where:\
\>", "Text",
 CellChangeTimes->{{3.937626709430729*^9, 
  3.9376267131926117`*^9}},ExpressionUUID->"22a9be84-b532-804e-a055-\
7854755af01c"],

Cell["\<\
0 indicates perfect purity (all elements belong to a single class).\
\>", "Subsubitem",
 CellChangeTimes->{{3.937626756792204*^9, 
  3.937626759294035*^9}},ExpressionUUID->"93004e22-01ad-754d-b734-\
1ec6b089cb0a"],

Cell["\<\
0.5 indicates maximum impurity (elements are evenly distributed across \
classes).\
\>", "Subsubitem",
 CellChangeTimes->{{3.937626756792204*^9, 
  3.937626758595026*^9}},ExpressionUUID->"5a0bfc75-c1aa-3543-892d-\
a6aa51c83def"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Formula", "Subsection",
 CellChangeTimes->{{3.937626774160013*^9, 
  3.9376267844948807`*^9}},ExpressionUUID->"680b308d-55ab-b241-9054-\
f0e3154aac66"],

Cell[TextData[{
 "Gini = 1 - ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"i", "=", "1"}], "c"], 
    RowBox[{"(", 
     SubscriptBox["P", "i"], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "73e5ddad-4d4d-9f4f-9561-0a7ba413bcfa"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["", "2"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "f82db9de-214a-1e40-824a-ea61f5715429"]
}], "Text",
 CellChangeTimes->{{3.9376267918556023`*^9, 3.937626820365576*^9}, {
  3.9376268861595287`*^9, 
  3.9376269898357162`*^9}},ExpressionUUID->"36e121dd-4548-c943-9dfe-\
2d5f3f4f4d11"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Usage", "Subsection",
 CellChangeTimes->{{3.9376270101612663`*^9, 
  3.9376270223095055`*^9}},ExpressionUUID->"7abdd725-a922-9a46-a82b-\
8efd3a7358d6"],

Cell["\<\
In constructing decision trees, Gini impurity is used to select the best \
feature to split the data. The feature that results in the lowest Gini \
impurity after the split is preferred.\
\>", "Text",
 CellChangeTimes->{{3.9376270254390144`*^9, 
  3.9376270280278664`*^9}},ExpressionUUID->"5b4f8b9f-b02e-6448-8fd9-\
62a19b2f5ef7"],

Cell["\<\
When building a decision tree, the goal is to create branches that lead to \
pure leaf nodes (nodes where all samples belong to a single class). By \
measuring the Gini impurity, we can assess how well a particular feature \
divides the dataset. Features that yield lower Gini impurity values after \
splitting indicate better separation between classes, guiding the \
tree-building process.

Overall, Gini impurity is a crucial concept in machine learning, particularly \
in classification tasks, providing a straightforward way to evaluate the \
effectiveness of different features in decision tree algorithms.\
\>", "Text",
 CellChangeTimes->{
  3.937627035982628*^9},ExpressionUUID->"05029bc5-34cc-af4c-a122-\
8e57b042787b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1141.2, 573.6},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.1 for Microsoft Windows (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"55e457e0-e78d-e84d-8da2-40d8dae3a261"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 240, 4, 96, "Title",ExpressionUUID->"dddee75b-4084-3e42-afab-ee11872a3cd2"],
Cell[819, 28, 174, 3, 52, "Subtitle",ExpressionUUID->"54b35a77-87df-5f42-acdc-f1a11bb4587b"],
Cell[CellGroupData[{
Cell[1018, 35, 226, 3, 66, "Section",ExpressionUUID->"c1e2e9bf-f64f-1d43-a8f2-3e71e8f1af0e"],
Cell[CellGroupData[{
Cell[1269, 42, 171, 3, 43, "Subsubsection",ExpressionUUID->"c11bc12f-c702-2141-b036-08efb7bf60c3"],
Cell[CellGroupData[{
Cell[1465, 49, 435, 9, 50, "Code",ExpressionUUID->"4acb8a1f-9b41-e141-b216-be6dd2eb3fd3"],
Cell[1903, 60, 570, 9, 51, "Output",ExpressionUUID->"07008436-916e-4545-b93e-d4c048c5c9b0"]
}, Open  ]],
Cell[2488, 72, 1027, 25, 85, "Code",ExpressionUUID->"e5d063f1-02d7-1a4a-a9c9-a2995892eb37"],
Cell[CellGroupData[{
Cell[3540, 101, 332, 6, 50, "Code",ExpressionUUID->"5c4ffc9e-c48f-f840-b725-bb66ca3d7b38"],
Cell[3875, 109, 997, 25, 32, "Output",ExpressionUUID->"24ba56db-4d0e-a440-b93a-6cf689e8b699"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4909, 139, 344, 7, 50, "Code",ExpressionUUID->"17cb48c1-39ae-aa4a-b6bc-2c574cd3beca"],
Cell[5256, 148, 526, 6, 89, "Output",ExpressionUUID->"605752e2-9aee-3648-91ea-bb26805a6d82"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[5831, 160, 233, 4, 43, "Subsubsection",ExpressionUUID->"202a5b80-a77b-8043-9c55-e4c1c3c4dc34"],
Cell[CellGroupData[{
Cell[6089, 168, 340, 7, 50, "Code",ExpressionUUID->"5d724260-d035-444d-992c-c7b8268e811a"],
Cell[6432, 177, 154, 2, 32, "Output",ExpressionUUID->"c2e80a72-d9ed-194b-af27-b8d1d32a7f55"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6623, 184, 349, 7, 50, "Code",ExpressionUUID->"9c26f092-0ce6-a444-a747-210ab678593b"],
Cell[6975, 193, 331, 7, 32, "Output",ExpressionUUID->"d93a3bb6-2c7e-954e-a057-f0405d04ded7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7343, 205, 342, 7, 50, "Code",ExpressionUUID->"9d3e0263-f73a-544b-8151-c0ff845d34ef"],
Cell[7688, 214, 297, 6, 32, "Output",ExpressionUUID->"adabb0d7-86a5-e14f-8237-4555c6cba2af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8022, 225, 274, 5, 50, "Code",ExpressionUUID->"049e7403-aedd-bd4e-ae37-9947ae1e7ebe"],
Cell[8299, 232, 149, 2, 32, "Output",ExpressionUUID->"f6d934d4-93de-1040-9554-40e58c80f3be"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8497, 240, 170, 3, 53, "Subsection",ExpressionUUID->"3082675e-5f1e-2845-80fc-1fa37d86c8e5"],
Cell[CellGroupData[{
Cell[8692, 247, 838, 19, 102, "Code",ExpressionUUID->"f90d6c20-0f83-d443-9965-cbf9e32c8325"],
Cell[9533, 268, 40349, 773, 59, "Output",ExpressionUUID->"86a0a593-0170-2143-95f6-12aa56fe9dc5"],
Cell[49885, 1043, 83847, 1528, 59, "Output",ExpressionUUID->"e683a406-d155-df49-aca6-d3477ad82f03"],
Cell[133735, 2573, 141162, 2336, 59, "Output",ExpressionUUID->"bf3456c5-0cb6-0744-9efb-86d33784d44b"],
Cell[274900, 4911, 97178, 1789, 59, "Output",ExpressionUUID->"8dfcea00-d86b-6045-9d0a-dbb3ad748d45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[372115, 6705, 1474, 35, 208, "Code",ExpressionUUID->"9b65ca3e-86f6-7a45-af24-81184dd9b1d8"],
Cell[373592, 6742, 686734, 11988, 480, "Output",ExpressionUUID->"de69447e-fe66-ba4a-979c-b1875fd11a45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1060363, 18735, 3503, 78, 752, "Code",ExpressionUUID->"832094b3-044b-4943-9b2d-ab38378e007d"],
Cell[1063869, 18815, 4441, 104, 128, "Output",ExpressionUUID->"9be95111-b4f3-5f42-9dc6-ea3dd5b6d131"]
}, Open  ]],
Cell[1068325, 18922, 302, 8, 60, "Abstract",ExpressionUUID->"c261a772-77c7-2a4d-a15d-268710c58a03"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1068664, 18935, 164, 3, 53, "Subsection",ExpressionUUID->"8bc5b44a-8b49-8949-8a83-cb436e0a0431"],
Cell[CellGroupData[{
Cell[1068853, 18942, 608, 15, 137, "Code",ExpressionUUID->"b4054837-146f-2c42-8039-3cb0b3f024d4"],
Cell[1069464, 18959, 196174, 3331, 480, "Output",ExpressionUUID->"6c05c26e-6ba1-594e-b503-7ffffc4c5ddc"]
}, Open  ]],
Cell[1265653, 22293, 292, 6, 60, "Abstract",ExpressionUUID->"2e7f5901-b0b9-c14f-826d-2f82bcfa904c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1265994, 22305, 176, 3, 66, "Section",ExpressionUUID->"4d1f6b79-bc5d-ef44-92d1-bd29bd06fe03"],
Cell[1266173, 22310, 482, 13, 55, "Text",ExpressionUUID->"0d4f07be-0b80-4545-88d6-75122d7ed0cf"],
Cell[CellGroupData[{
Cell[1266680, 22327, 162, 3, 53, "Subsection",ExpressionUUID->"1d6b84b9-1051-ab48-8f6e-f45eac1fd2a5"],
Cell[1266845, 22332, 310, 7, 33, "Text",ExpressionUUID->"22a9be84-b532-804e-a055-7854755af01c"],
Cell[1267158, 22341, 223, 5, 24, "Subsubitem",ExpressionUUID->"93004e22-01ad-754d-b734-1ec6b089cb0a"],
Cell[1267384, 22348, 238, 6, 24, "Subsubitem",ExpressionUUID->"5a0bfc75-c1aa-3543-892d-a6aa51c83def"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1267659, 22359, 157, 3, 53, "Subsection",ExpressionUUID->"680b308d-55ab-b241-9054-f0e3154aac66"],
Cell[1267819, 22364, 660, 20, 33, "Text",ExpressionUUID->"36e121dd-4548-c943-9dfe-2d5f3f4f4d11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1268516, 22389, 157, 3, 53, "Subsection",ExpressionUUID->"7abdd725-a922-9a46-a82b-8efd3a7358d6"],
Cell[1268676, 22394, 340, 7, 55, "Text",ExpressionUUID->"5b4f8b9f-b02e-6448-8fd9-62a19b2f5ef7"],
Cell[1269019, 22403, 738, 14, 143, "Text",ExpressionUUID->"05029bc5-34cc-af4c-a122-8e57b042787b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

